{"version":3,"sources":["assets/images/Ui_box3.webp","assets/images/button.png","assets/images/discord-brands.svg","assets/images/ban1.png","assets/images/ban2.png","assets/images sync /^/.*$","assets/images/ban1-1.jpg","assets/images/ban2-1.jpg","assets/images/logo.png","assets/images/tronlink.svg","connectors/injected-tron-connector/tronlink-abis.ts","connectors/injected-tron-connector/index.ts","connectors/NetworkConnector.ts","connectors/index.ts","constants/blockchain.ts","constants/addresses.ts","constants/index.ts","hooks/index.ts","state/application/actions.ts","state/application/hooks.ts","state/multicall/actions.ts","state/multicall/hooks.ts","utils/index.ts","constants/multicall/index.ts","hooks/useContract.ts","hooks/useENSName.ts","hooks/useDebounce.ts","utils/isZero.ts","state/transactions/actions.ts","state/transactions/hooks.tsx","components/Identicon/index.tsx","components/Loader/index.tsx","components/AccountDetails/Copy.tsx","hooks/useCopyClipboard.ts","components/AccountDetails/Transaction.tsx","components/AccountDetails/index.tsx","components/WalletModal/Option.tsx","components/WalletModal/PendingView.tsx","hooks/usePrevious.ts","components/WalletModal/index.tsx","components/Web3Status/index.tsx","components/Header/index.tsx","pages/Home/components/Banner/index.tsx","store/slices/pending-txns-slice.ts","helpers/set-all.ts","utils/notification.ts","constants/axios.ts","store/slices/play-slice.ts","store/slices/walletInfo-slice.ts","store/slices/addnft-slice.ts","pages/Home/components/Jackpot/index.tsx","components/Current/style.ts","store/slices/battle-slice.ts","store/slices/messages-slice.ts","constants/messages.ts","helpers/metamask-error-wrap.ts","store/slices/NFt-slice.ts","components/Current/getDate.ts","store/slices/enter-room-slice.ts","components/Current/modal.tsx","components/Current/bigRoomModal.tsx","components/Current/Datas.ts","store/slices/Nftinfo-slice.ts","components/Current/SmallRoom.tsx","components/Current/BigRoom.tsx","store/slices/game-slice.ts","store/slices/random-slice.ts","store/slices/result-slice.ts","store/slices/winner-slice.ts","pages/Home/components/CurrentBattle/index.tsx","pages/Home/index.tsx","store/slices/staking-slice.ts","pages/Stake/components/MeowToken/index.tsx","pages/Stake/components/ChestInfo/index.tsx","pages/Stake/index.tsx","store/slices/getnft-slice.ts","pages/admin/components/waiting/index.tsx","pages/admin/components/approve/index.tsx","pages/admin/index.tsx","state/application/reducer.ts","state/global/actions.ts","state/user/actions.ts","state/user/reducer.ts","state/transactions/reducer.ts","state/multicall/reducer.ts","store/slices/jackpot-slice.ts","state/index.ts","App.tsx","theme/index.tsx","utils/getLibrary.ts","reportWebVitals.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","abis","ERC20_ABI","IntercroneswapV1Router02ABI","InjectedTronConnector","kwargs","provider","getParamTypes","params","type","components","join","signs","web3","Web3","providers","WebsocketProvider","fn","sign","eth","abi","encodeFunctionSignature","name","inputs","getFunctionSelector","err","createTronLinkProvider","network","process","tronApiUrl","functionSignatures","args","this","request","res","requestProvider","method","accounts","account","chainId","AbstractConnector","NetworkConnector","createJavaTronProvider","NETWORK_URL","NETWORK_CHAIN_ID","parseInt","urls","Networks","injected","supportedChainIds","GOERLI","SHASTA_TESTNET","MEOW_ADDRESS","NFT_ADDRESS","MEOWTOKEN_ADDRESS","SUPPORTED_WALLETS","TRONLINK","connector","iconName","description","href","color","mobileOnly","NetworkContextName","useActiveWeb3React","context","useWeb3ReactCore","contextNetwork","active","ApplicationModal","updateBlockNumber","createAction","setOpenModal","addPopup","removePopup","useBlockNumber","useSelector","state","application","blockNumber","useModalOpen","modal","openModal","useToggleModal","open","dispatch","useDispatch","useCallback","useWalletModalToggle","WALLET","ADDRESS_REGEX","LOWER_HEX_REGEX","toCallKey","call","test","address","callData","addMulticallListeners","removeMulticallListeners","fetchingMulticallResults","errorFetchingMulticallResults","updateMulticallResults","isMethodArg","x","indexOf","isValidMethodArgs","undefined","Array","isArray","every","xi","INVALID_RESULT","valid","data","useCallsData","calls","options","callResults","multicall","serializedCallKeys","useMemo","JSON","stringify","filter","c","Boolean","sort","useEffect","callKeys","parse","length","key","callKey","pcs","split","parseCallKey","result","INVALID_CALL_STATE","loading","syncing","error","LOADING_CALL_STATE","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","decodeFunctionResult","console","debug","useSingleCallResult","contract","methodName","interface","getFunction","encodeFunctionData","isAddress","value","getAddress","ETHERSCAN_PREFIXES","getEtherscanLink","prefix","remove0xPrefix","ethAddress","toTron","shortenAddress","chars","parsed","tronAddress","substring","substr","ChainId","MAINNET","NILE","SHASTA","useContract","ABI","withSignerIfPossible","library","AddressZero","Contract","getSigner","connectUnchecked","getProviderOrSigner","getContract","useENSName","debouncedAddress","delay","useState","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","ensNodeArgument","namehash","toLowerCase","registrarContract","ENS_ABI","useENSRegistrarContract","resolverAddress","resolverAddressResult","resolverContract","ENS_PUBLIC_RESOLVER_ABI","useENSResolverContract","changed","ENSName","addTransaction","clearAllTransactions","finalizeTransaction","checkedTransaction","useAllTransactions","transactions","isTransactionRecent","tx","Date","getTime","addedTime","Identicon","ref","useRef","current","innerHTML","appendChild","Jazzicon","slice","Box","sx","height","width","borderRadius","Loader","stroke","viewBox","fill","xmlns","className","d","strokeWidth","strokeLinecap","strokeLinejoin","CopyHelper","props","timeout","isCopied","setIsCopied","staticCopy","text","didCopy","copy","hide","useCopyClipboard","setCopied","onClick","toCopy","size","Typography","component","ml","fontSize","children","Transaction","hash","allTransactions","summary","pending","receipt","status","Link","target","rel","display","justifyContent","alignItems","textDecoration","p","renderTransactions","i","AccountDetails","toggleWalletModal","pendingTransactions","confirmedTransactions","openOptions","getStatusIcon","mr","clearAllTransactionsCallback","IconButton","k","formatConnectorName","Button","variant","lineHeight","mb","textTransform","Option","clickable","header","subheader","icon","backgroundColor","borderColor","cursor","border","mt","src","alt","PendingView","setPendingError","tryActivation","option","require","default","usePrevious","WALLET_VIEWS","OPTIONS","OPTIONS_SECONDARY","ACCOUNT","PENDING","WalletModal","useWeb3React","activate","walletView","setWalletView","pendingWallet","setPendingWallet","pendingError","walletModalOpen","previousAccount","activePrevious","connectorPrevious","ReactGA","event","category","action","label","catch","UnsupportedChainIdError","Dialog","onClose","maxWidth","xs","sm","md","newTransactionsFirst","a","b","StatusIcon","Web3StatusInner","values","hasPendingTransactions","Web3Status","sortedRecentTransactions","confirmed","menuLists","link","Header","history","useHistory","anchorElUser","setAnchorElUser","handleCloseUserMenu","AppBar","position","Container","Toolbar","disableGutters","columnGap","fontFamily","DiscordIcon","currentTarget","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","list","push","Banner","BannerImage1","BannerImage2","pendingTxnsSlice","createSlice","initialState","reducers","fetchPendingTxns","payload","clearPendingTxn","find","txnHash","splice","actions","setAll","properties","forEach","notification","title","message","Store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","onScreen","baseURL","instance","axios","create","socket","io","widrawNFT","createAsyncThunk","window","tronWeb","defaultAddress","base58","at","toHex","meowContract","get","then","response","usersData","log","claimNFT","ownNfts","send","feeLimit","post","stakeAmount","claimAmount","emit","claimMoney","ClaimFight","tokenId","fightRoom","whichroom","url","waitingRandom","gamePrice","random1","random2","claimFight","callValue","enterTx","Promise","trx","getTransaction","transaction","ret","contractRet","randoms","random_tmp","toNumber","roomNum","secondNFT","secondAddress","secondRandom","secondId","firstRandom","flag","randomNumber1","randomNumber2","resultData","jackpotAmount","Math","pow","totalStake","firstAddress","alert","setJackpot","winnerData","winCount","nftUrl1","firstNFT","nftUrl2","address1","address2","fightSlice","fetchAppSuccess","extraReducers","builder","addCase","fulfilled","rejected","walletInfo","createSelector","fight","tmpData","nftCount","nftInfo","trxAmount","nftSlice","AddNft","nfts","nftContract","nftName","symbol","nftSymbol","ApproveNft","delete","DeleteWaiting","DeleteApproved","availableStyle","paddingY","textAlign","style","top","left","transform","boxShadow","flexDirection","Jackpot","React","setOpen","walletAddress","setWalletAddress","handleClose","JackpotAmount","jackpot","contractNFTs","wallet","widrawAmount","getAvailableData","onWidrawNFT","meta","requestStatus","onClaimMoney","handleRequest","py","px","mx","flexWrap","pb","xl","bottom","Modal","fontWeight","TextField","onChange","fightStyle","randomNumberStyle","roomStyleAvatar","buttonStyle","roomStyleBack","lg","overflowY","avatarsStyle","modalAvatarStyle","loadBattleDetails","openState","claimState","whichfight","decide","battleSlice","battle","createMessage","severity","messagesSlice","info","warning","close","messages","metamaskErrorWrap","includes","trim","approveNFT","approve","loadNftAllowance","tokenIds","allowtmp","all","index","getApproved","allows","allow","allowances","getDate","nft","date","year","getFullYear","month","getMonth","day","hour","getHours","minute","getMinutes","second","getSeconds","EnterRoom","enterRoom","attempts","SampleModal","nftids","nfturis","isLoading","allowFlg","gameprice","baseUri","nfturl","closeModal","onEnterRoom","fightRoomNum","Number","m","Skeleton","BigRoomModal","onClaimFight","Datas","loadNftDetails","tokenURI","balanceOf","nft_counts","min","tokenOfOwnerByIndex","tmptokenID","toDecimal","SmallRooms","firRandomData","secRandomData","gameData","app","onEnterModal","onClaimModal","bgcolor","padding","roomPic","disabled","buttonBack","BigRoom","repeat","loadGameDetails","tmpgameData","maxRoomNum","max","newGameData","tmpcnt","gameSlice","updateGameData","updatedData","delRoomNum","findIndex","emptyData","loadRandomDetails","randomData","randomSlice","updateRandomData","unshift","loadResultDetails","random","resultSlice","updateResultData","pop","loadWinnerDetails","winnerSlice","updateWinnerData","CurrentBattle","on","paddingX","Home","my","stackingMeow","amount","meowTokenContract","stakeamount","approveTx","stake","unstackingMeow","unStake","stakeSlice","meowTokenStyle","stack","jackpotStyle","stakeButtonStyle","opacity","MeowToken","stackAmount","changesStack","unstackAmount","changeUnstack","meowCount","marginX","pl","ChestInfo","pt","tp","Stake","loadWaitingDetails","waitingList","approvedList","waitingSlice","waiting","Waiting","waitings","setAddress","setName","setSymbol","created","setCreated","handleApprove","handleDecline","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","scope","wordBreak","createdAt","marginTop","approves","Admin","loadData","minHeight","createReducer","popupList","content","removeAfterMs","popup","concat","nanoid","show","updateVersion","updateMatchesDarkMode","updateUserDarkMode","updateUserExpertMode","updateUserSlippageTolerance","updateUserDeadline","addSerializedToken","removeSerializedToken","addSerializedPair","removeSerializedPair","toggleURLWarning","currentTimestamp","pairKey","token0Address","token1Address","userDarkMode","matchesDarkMode","userExpertMode","userSlippageTolerance","userDeadline","tokens","pairs","timestamp","URLWarningVisible","lastUpdateVersionTimestamp","serializedToken","serializedPair","token0","token1","tokenAAddress","tokenBAddress","now","from","approval","claim","txs","lastCheckedBlockNumber","confirmedTime","blocksPerFetch","listeners","callListeners","fetchingBlockNumber","results","loadJackpotDetails","TronWeb","toString","jackpotSlice","fetchJackpotSuccess","store","configureStore","reducer","user","appReducer","fightReducer","stackReducer","nftReducer","nftInfoReducer","walletInfoReducer","messagesReducer","battleReducer","JackpotReducer","RandomReducer","ResultReducer","winner","WinnerReducer","WaitingReducer","middleware","getDefaultMiddleware","serializableCheck","preloadedState","load","states","App","exact","path","to","ThemeProvider","theme","createTheme","palette","mode","common","black","primary","light","main","dark","secondary","StyledEngineProvider","injectFirst","CssBaseline","getLibrary","Web3Provider","pollingInterval","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Web3ProviderNetwork","createWeb3ReactRoot","ReactDOM","render","document","getElementById"],"mappings":"wGAAA,OAAe,cAA0B,oC,mCCAzC,OAAe,cAA0B,kC,mCCAzC,OAAe,cAA0B,0C,mCCAzC,OAAe,cAA0B,gC,mCCAzC,OAAe,cAA0B,gC,6lDCAzC,IAAIA,EAAM,CACT,iBAAkB,IAClB,eAAgB,IAChB,aAAc,IACd,eAAgB,IAChB,aAAc,IACd,eAAgB,IAChB,uBAAwB,IACxB,aAAc,IACd,iBAAkB,KAInB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,EAC5B,CACA,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,CACP,CACA,OAAOP,EAAIE,EACZ,CACAD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,EACpB,EACAC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,G,+3gBC9BpB,OAAe,cAA0B,kC,mCCAzC,OAAe,cAA0B,kC,mCCAzC,OAAe,cAA0B,gC,mCCAzC,OAAe,cAA0B,oC,4fCK5BY,EAAI,sBAAOC,GAAS,YAAKC,MCSzBC,GARiCV,MAQZ,kDAGhC,WAAYW,GAAqC,IAAD,uBAC9C,cAAMA,IAHDC,cAAQ,EAKb,IAGMC,EAAgB,SAACC,GACrB,OAAOA,EAAOtB,KAAI,YAA2D,IAAxDuB,EAAI,EAAJA,KAAMC,EAAU,EAAVA,WACzB,MAAa,YAATD,EAEA,IACAC,EACGxB,KAAI,YACH,OADU,EAAJuB,IAER,IACCE,KAAK,KACR,MAGGF,CACT,GACF,EACMG,EAAa,CAAC,EACdC,EAAO,IAAIC,IACf,IAAIA,IAAKC,UAAUC,kBAAkB,gEAoBvC,OAlBAf,EAAKf,KAAI,SAAC+B,GACR,IACE,IAAMC,EAAOL,EAAKM,IAAIC,IAAIC,wBAAwB,CAChDC,KAAML,EAAGK,KACTb,KAAMQ,EAAGR,KACTc,OAAQN,EAAGM,SAEbX,EAAMM,GA9BkB,SAACE,GAC3B,OAAOA,EAAIE,KAAO,IAAMf,EAAca,EAAIG,QAAU,IAAIZ,KAAK,KAAO,GACtE,CA4BkBa,CAAoBP,EAEpC,CADE,MAAOQ,GACT,CACF,IAEA,EAAKnB,SAAWoB,IAAuB,CACrCC,QAASC,SACTC,WAAYD,iCACZE,mBAAoB7B,EACpBW,UAEF,CAMF,CAmCC,OAnCA,6FAED,WAAsBmB,GAAS,iGACXC,KAAK1B,SAAS2B,QAAQF,GAAM,KAAD,EAApC,OAAHG,EAAG,yBACFA,GAAG,gDACX,mDALA,IAKA,uEAED,gHACyBF,KAAKG,gBAAgB,CAAEC,OAAQ,iBAAkB,KAAD,EAC3C,OADtBC,EAAQ,OACRC,EAAUD,EAAS,GAAE,kBACpB,CAAE/B,SAAU0B,KAAK1B,SAAUgC,YAAS,gDAC5C,kDANA,IAMA,0EAED,iHACSN,KAAK1B,UAAQ,gDACrB,kDAJA,IAIA,yEAED,8GACwB0B,KAAKG,gBAAgB,CAAEC,OAAQ,gBAAiB,KAAD,EAAxD,OAAPG,EAAO,yBACNA,GAAO,gDACf,kDALA,IAKA,yEAED,gHACyBP,KAAKG,gBAAgB,CAAEC,OAAQ,iBAAkB,KAAD,EAC3C,OADtBC,EAAQ,OACRC,EAAUD,EAAS,GAAE,kBACpBC,GAAO,gDACf,kDANA,IAMA,wBAED,WACE,OAAO,CACT,GAAC,2EAED,kHAES,GAAI,2CACZ,kDALA,MAKA,EAxF+B,CAASE,MCV9BC,EAAgB,kDAC3B,WAAYpC,GAAc,IAAD,EAKpB,OALoB,qBACvB,cAAMA,IACDC,SAAWoC,IAAuB,CACrCf,QAASC,SACTC,WAAYD,mCACX,CACL,CAkBC,OAlBA,6FAED,6HACoB,EAAAI,KAAK1B,UAAS2B,QAAO,WAAU,KAAD,EAAvC,OAAHC,EAAG,yBAEFA,GAAG,gDACX,kDANA,IAMA,uEAED,iHACS,CAAE5B,SAAU0B,KAAK1B,WAAU,gDACnC,kDAJA,IAIA,0EAED,iHACS0B,KAAK1B,UAAQ,gDACrB,kDAJA,IAIA,yEAED,iHACS,MAAI,2CACZ,kDAJA,MAIA,EAzB0B,CAASF,GCAhCuC,EAAcf,iCAEPgB,EAA2BC,SAAuC,OAA9BjB,QAAkC,SAM5D,IAAIa,EAAiB,CAC1CK,KAAK,eAAIF,EAAmBD,KAQvB,ICnBKI,EDmBCC,GAAW,IAAI5C,EAAsB,CAChD6C,kBAAmB,CAAC,MAAO,K,WChB5B,SAJWF,OAAQ,mBAARA,IAAQ,mBAInB,CAJWA,MAAQ,KAMWA,EAASG,OAAjC,ICNMC,GAAiB,CAC5BC,aAAc,qCACdC,YAAa,qCACbC,kBAAmB,sCCaRC,GAAmD,CAC9DC,SAAU,CACRC,UAAWT,GACX1B,KAAM,WACNoC,SAAU,eACVC,YAAa,iCACbC,KAAM,KACNC,MAAO,UACPC,YAAY,IAIHC,GAAqB,UCxB3B,SAASC,KAGd,IAAMC,EAAUC,cACVC,EAAiBD,YAA+BH,IACtD,OAAOE,EAAQG,OAASH,EAAUE,CACpC,C,ICQYE,G,UAUX,SAVWA,OAAgB,mBAAhBA,IAAgB,uBAAhBA,IAAgB,2BAAhBA,IAAgB,iCAAhBA,IAAgB,6BAAhBA,IAAgB,eAAhBA,IAAgB,uBAAhBA,IAAgB,uBAAhBA,IAAgB,eAU3B,CAVWA,QAAgB,KAYrB,IAAMC,GAAoBC,aAC/B,iCAEWC,GAAeD,aAAsC,4BACrDE,GAAWF,aACtB,wBAEWG,GAAcH,aAA8B,2BCjClD,SAASI,KACd,IAAQpC,EAAYyB,KAAZzB,QAER,OAAOqC,aAAY,SAACC,GAAe,OAAKA,EAAMC,YAAYC,YAAmB,OAAPxC,QAAO,IAAPA,KAAY,EAAE,GACtF,CAEO,SAASyC,GAAaC,GAE3B,OADkBL,aAAY,SAACC,GAAe,OAAKA,EAAMC,YAAYI,SAAS,MACzDD,CACvB,CAEO,SAASE,GAAeF,GAC7B,IAAMG,EAAOJ,GAAaC,GACpBI,EAAWC,cACjB,OAAOC,uBAAY,kBAAMF,EAASb,GAAaY,EAAO,KAAOH,GAAO,GAAE,CAACI,EAAUJ,EAAOG,GAC1F,CAYO,SAASI,KACd,OAAOL,GAAed,GAAiBoB,OACzC,CC5BA,IAAMC,GAAgB,sBAChBC,GAAkB,gBACjB,SAASC,GAAUC,GACxB,IAAKH,GAAcI,KAAKD,EAAKE,SAC3B,MAAM,IAAIrG,MAAM,oBAAD,OAAqBmG,EAAKE,UAE3C,IAAKJ,GAAgBG,KAAKD,EAAKG,UAC7B,MAAM,IAAItG,MAAM,gBAAD,OAAiBmG,EAAKG,WAEvC,MAAM,GAAN,OAAUH,EAAKE,QAAO,YAAIF,EAAKG,SACjC,CAkBO,IAAMC,GAAwB1B,aACnC,mCAEW2B,GAA2B3B,aACtC,sCAEW4B,GAA2B5B,aACtC,sCAEW6B,GAAgC7B,aAI1C,2CACU8B,GAAyB9B,aAMnC,oCC7BH,SAAS+B,GAAYC,GACnB,OAAmD,IAA5C,CAAC,SAAU,UAAUC,eAAeD,EAC7C,CAEA,SAASE,GAAkBF,GACzB,YACQG,IAANH,GACCI,MAAMC,QAAQL,IAAMA,EAAEM,OAAM,SAACC,GAAE,OAAKR,GAAYQ,IAAQH,MAAMC,QAAQE,IAAOA,EAAGD,MAAMP,GAAa,GAExG,CAQA,IAAMS,GAA6B,CAAEC,OAAO,EAAOjC,iBAAa2B,EAAWO,UAAMP,GAQjF,SAASQ,GAAaC,EAA6BC,GACjD,IAAQ7E,EAAYyB,KAAZzB,QACF8E,EAAczC,aAClB,SAACC,GAAK,OAAKA,EAAMyC,UAAUD,WAAW,IAElChC,EAAWC,cAEXiC,EAA6BC,mBACjC,4BACEC,KAAKC,UAIO,QAJE,EACP,OAALP,QAAK,IAALA,GACwC,QADnC,EAALA,EACIQ,QAAO,SAACC,GAAC,OAAgBC,QAAQD,EAAE,WAAC,OACtB,QADsB,EADxC,EAEI1I,IAAI0G,WAAU,WAFb,EAAL,EAGIkC,cAAM,QAAI,GACf,GACH,CAACX,IA2BH,OAvBAY,qBAAU,WACR,IAAMC,EAAqBP,KAAKQ,MAAMV,GACtC,GAAKhF,GAA+B,IAApByF,EAASE,OAAzB,CACA,IAAMf,EAAQa,EAAS9I,KAAI,SAACiJ,GAAG,ODtD5B,SAAsBC,GAC3B,IAAMC,EAAMD,EAAQE,MAAM,KAC1B,GAAmB,IAAfD,EAAIH,OACN,MAAM,IAAIxI,MAAM,qBAAD,OAAsB0I,IAEvC,MAAO,CACLrC,QAASsC,EAAI,GACbrC,SAAUqC,EAAI,GAElB,CC6CwCE,CAAaJ,EAAI,IASrD,OARA9C,EACEY,GAAsB,CACpB1D,UACA4E,QACAC,aAIG,WACL/B,EACEa,GAAyB,CACvB3D,UACA4E,QACAC,YAGN,CAlBuD,CAmBzD,GAAG,CAAC7E,EAAS8C,EAAU+B,EAASG,IAEzBC,mBACL,kBACEL,EAAMjI,KAAgB,SAAC2G,GAAU,IAAD,EAC9B,IAAKtD,IAAYsD,EAAM,OAAOkB,GAE9B,IACIE,EADEuB,EAA6B,QAAvB,EAAGnB,EAAY9E,UAAQ,aAApB,EAAuBqD,GAAUC,IAMhD,OAJU,OAAN2C,QAAM,IAANA,KAAQvB,MAAyB,QAAX,OAANuB,QAAM,IAANA,OAAM,EAANA,EAAQvB,QAC1BA,EAAOuB,EAAOvB,MAGT,CAAED,OAAO,EAAMC,OAAMlC,YAAmB,OAANyD,QAAM,IAANA,OAAM,EAANA,EAAQzD,YACnD,GAAE,GACJ,CAACsC,EAAaF,EAAO5E,GAEzB,CAcA,IAAMkG,GAAgC,CAAEzB,OAAO,EAAOwB,YAAQ9B,EAAWgC,SAAS,EAAOC,SAAS,EAAOC,OAAO,GAC1GC,GAAgC,CAAE7B,OAAO,EAAMwB,YAAQ9B,EAAWgC,SAAS,EAAMC,SAAS,EAAMC,OAAO,GAE7G,SAASE,GACPC,EACAC,EACAC,EACAC,GAEA,IAAKH,EAAY,OAAON,GACxB,IAAQzB,EAA6B+B,EAA7B/B,MAAOC,EAAsB8B,EAAtB9B,KAAMlC,EAAgBgE,EAAhBhE,YACrB,IAAKiC,EAAO,OAAOyB,GACnB,GAAIzB,IAAUjC,EAAa,OAAO8D,GAClC,IAAKG,IAAsBC,IAAaC,EAAmB,OAAOL,GAClE,IAAMM,EAAUlC,GAAQA,EAAKiB,OAAS,EAChCS,GAAsB,OAAX5D,QAAW,IAAXA,IAAe,GAAKmE,EACjCV,OAA6B9B,EACjC,GAAIyC,GAAWlC,EACb,IACEuB,EAASQ,EAAkBI,qBAAqBH,EAAUhC,EAU5D,CATE,MAAO2B,GAEP,OADAS,QAAQC,MAAM,6BAA8BL,EAAUhC,GAC/C,CACLD,OAAO,EACP0B,SAAS,EACTE,OAAO,EACPD,UACAH,SAEJ,CAEF,MAAO,CACLxB,OAAO,EACP0B,SAAS,EACTC,UACAH,OAAQA,EACRI,OAAQO,EAEZ,CAwEO,SAASI,GACdC,EACAC,EACAlI,EACA6F,GAEA,IAAM6B,EAAWzB,mBAAQ,wBAAc,OAARgC,QAAQ,IAARA,GAAmB,QAAX,EAARA,EAAUE,iBAAS,WAAX,EAAR,EAAqBC,YAAYF,EAAW,GAAE,CAACD,EAAUC,IAalFjB,EAAStB,GAXDM,mBAAgB,WAC5B,OAAOgC,GAAYP,GAAYxC,GAAkBlF,GAC7C,CACE,CACEwE,QAASyD,EAASzD,QAClBC,SAAUwD,EAASE,UAAUE,mBAAmBX,EAAU1H,KAG9D,EACN,GAAG,CAACiI,EAAUP,EAAU1H,IAEW6F,GAAS,GACtC8B,EAAoBvE,KAE1B,OAAO6C,mBAAQ,WACb,OAAOsB,GAAYN,EAAgB,OAARgB,QAAQ,IAARA,OAAQ,EAARA,EAAUE,UAAWT,EAAUC,EAC5D,GAAG,CAACV,EAAQgB,EAAUP,EAAUC,GAClC,C,uBCzPO,SAASW,GAAUC,GACxB,IACE,OAAOC,sBAAWD,EAGpB,CAFE,SACA,OAAO,CACT,CACF,CAEA,IAAME,GAAuD,CAC3D,MAAO,GACP,EAAG,UACH,UAAW,SAGN,SAASC,GACd1H,EACA0E,EACAxG,GAEA,IAAMyJ,EAAM,kBACVF,GAAmBzH,IAAYyH,GAAmB,OAAM,gBAG1D,OAAQvJ,GACN,IAAK,cACH,MAAM,GAAN,OAAUyJ,EAAM,0BAAkBC,yBAAelD,IAEnD,IAAK,QACH,MAAM,GAAN,OAAUiD,EAAM,sBAAcE,aAAWC,OAAOpD,IAGlD,QACE,MAAM,GAAN,OAAUiD,EAAM,sBAAcE,aAAWC,OAAOpD,IAGtD,CAEO,SAASqD,GAAevE,GAAqC,IAApBwE,EAAK,uDAAG,EAChDC,EAASX,GAAU9D,GACzB,IAAKyE,EACH,MAAM9K,MAAM,gCAAD,OAAiCqG,EAAO,OAErD,IAAM0E,EAAcL,aAAWC,OAAOG,GACtC,MAAM,GAAN,OAAUC,EAAYC,UAAU,EAAGH,GAAM,cAAME,EAAYE,QAAQJ,GACrE,C,4CCjD0D,qBAEvDK,KAAQC,QAAU,8CAA4C,eAC9DD,KAAQE,KAAO,8CAA4C,eAC3DF,KAAQG,OAAS,8CCGpB,SAASC,GACPjF,EACAkF,GAEkB,IADlBC,IAAoB,yDAEpB,EAA6BlH,KAArBmH,EAAO,EAAPA,QAAS7I,EAAO,EAAPA,QAEjB,OAAOkF,mBAAQ,WACb,IAAKzB,IAAYkF,IAAQE,EAAS,OAAO,KACzC,IACE,OFoDC,SACLpF,EACAkF,EACAE,EACA7I,GAEA,IAAKuH,GAAU9D,IAAYA,IAAYqF,KACrC,MAAM1L,MAAM,gCAAD,OAAiCqG,EAAO,OAErD,OAAO,IAAIsF,KACTtF,EACAkF,EApBG,SACLE,EACA7I,GAGA,OAAOA,EAbF,SACL6I,EACA7I,GAEA,OAAO6I,EAAQG,UAAUhJ,GAASiJ,kBACpC,CAQmBD,CAAUH,EAAS7I,GAAW6I,CACjD,CAeIK,CAAoBL,EAAS7I,GAEjC,CElEamJ,CACL1F,EACAkF,EACAE,EACAD,GAAwB5I,EAAUA,OAAUoE,EAKhD,CAHE,MAAOkC,GAEP,OADAS,QAAQT,MAAM,yBAA0BA,GACjC,IACT,CACF,GAAG,CAAC7C,EAASkF,EAAKE,EAASD,EAAsB5I,GACnD,CCnBe,SAASoJ,GAAW3F,GAAiE,IAAD,MAC3F4F,ECVO,SAAwB7B,EAAU8B,GAC/C,MAA4CC,mBAAY/B,GAAM,mBAAvDgC,EAAc,KAAEC,EAAiB,KAgBxC,OAdAhE,qBAAU,WAER,IAAMiE,EAAUC,YAAW,WACzBF,EAAkBjC,EACpB,GAAG8B,GAKH,OAAO,WACLM,aAAaF,EACf,CACF,GAAG,CAAClC,EAAO8B,IAEJE,CACT,CDR2BK,CAAYpG,EAAS,KACxCqG,EAAkB5E,mBAAQ,WAC9B,IAAKmE,IAAqB9B,GAAU8B,GAAmB,MAAO,MAACjF,GAC/D,IACE,OAAOiF,EAAmB,CAACU,oBAAS,GAAD,OAAIV,EAAiBW,cAAc3B,OAAO,GAAE,mBAAoB,MAACjE,EAGtG,CAFE,MAAOkC,GACP,MAAO,MAAClC,EACV,CACF,GAAG,CAACiF,IACEY,EDWD,SACLrB,GAEA,IACInF,EADIxD,EAAYyB,KAAZzB,QAER,GAAIA,EACF,OAAQA,GAEN,KAAKqI,KAAQC,QACX9E,EAAU,6CACV,MAEF,KAAK6E,KAAQE,KACX/E,EAAU,6CAIhB,OAAOiF,GAAYjF,EAASyG,GAAStB,EACvC,CC7B4BuB,EAAwB,GAC5CC,EAAkBnD,GAAoBgD,EAAmB,WAAYH,GACrEO,EAA8C,QAAzB,EAAGD,EAAgBlE,cAAM,aAAtB,EAAyB,GACjDoE,ED4BD,SACL7G,EACAmF,GAEA,OAAOF,GAAYjF,EAAS8G,GAAyB3B,EACvD,CCjC2B4B,CACvBH,IErBK,SAAS7G,KFqBmB6G,GAAyBA,OAAwBjG,GAClF,GAEIpF,EAAOiI,GAAoBqD,EAAkB,OAAQR,GAErDW,EAAUpB,IAAqB5F,EACrC,MAAO,CACLiH,QAASD,EAAU,KAAuB,QAAnB,EAAc,QAAd,EAAGzL,EAAKkH,cAAM,aAAX,EAAc,UAAE,QAAI,KAC9CE,QAASqE,GAAWL,EAAgBhE,SAAWpH,EAAKoH,QAExD,CGtBO,IAAMuE,GAAiB1I,aAO3B,+BACU2I,GAAuB3I,aAAmC,qCAC1D4I,GAAsB5I,aAIhC,oCACU6I,GAAqB7I,aAI/B,mCCYI,SAAS8I,KAAgE,IAAD,EACrE9K,EAAYyB,KAAZzB,QAEFsC,EAAQD,aAAgD,SAACC,GAAK,OAAKA,EAAMyI,YAAY,IAE3F,OAAO/K,GAAwB,QAAjB,EAAGsC,EAAMtC,UAAQ,QAAS,CAAC,CAC3C,CAcO,SAASgL,GAAoBC,GAClC,OAAO,IAAIC,MAAOC,UAAYF,EAAGG,UAAY,KAC/C,C,iCC7De,SAASC,KACtB,IAAMC,EAAMC,mBAEJxL,EAAY0B,KAAZ1B,QASR,OAPAyF,qBAAU,WACJzF,GAAWuL,EAAIE,UACjBF,EAAIE,QAAQC,UAAY,GACxBH,EAAIE,QAAQE,YAAYC,KAAS,GAAIrL,SAASP,EAAQ6L,MAAM,EAAG,IAAK,MAExE,GAAG,CAAC7L,IAGF,eAAC8L,EAAA,EAAG,CACFC,GAAI,CACFC,OAAQ,OACRC,MAAO,OACPC,aAAc,OAEhBX,IAAKA,GAGX,C,OCzBe,SAASY,GAAO,GAAkC,IAAhCC,EAAM,EAANA,OAC/B,OACE,sBACEC,QAAQ,YACRC,KAAK,OACLC,MAAM,6BACNC,UAAU,aAAY,SAEtB,uBACEC,EAAE,6HACFL,OAAQA,GAAkB,OAC1BM,YAAY,MACZC,cAAc,QACdC,eAAe,WAIvB,C,0GCfe,SAASC,GAAWC,GAIjC,MCLa,WAA+E,IAArDC,EAAO,uDAAG,IACjD,EAAgCxD,oBAAS,GAAM,mBAAxCyD,EAAQ,KAAEC,EAAW,KAEtBC,EAAajK,uBAAY,SAACkK,GAC9B,IAAMC,EAAUC,KAAKF,GACrBF,EAAYG,EACd,GAAG,IAeH,OAbA3H,qBAAU,WACR,GAAIuH,EAAU,CACZ,IAAMM,EAAO3D,YAAW,WACtBsD,GAAY,EACd,GAAGF,GAEH,OAAO,WACLnD,aAAa0D,EACf,CACF,CAEF,GAAG,CAACN,EAAUC,EAAaF,IAEpB,CAACC,EAAUE,EACpB,CDjBgCK,GAAkB,mBAAzCP,EAAQ,KAAEQ,EAAS,KAE1B,OACE,eAAC1B,EAAA,EAAG,CAACU,UAAU,YAAYiB,QAAS,kBAAMD,EAAUV,EAAMY,OAAO,EAAC,SAC/DV,EACC,uCACE,eAAC,KAAW,CAACW,KAAM,OACnB,eAACC,EAAA,EAAU,CAACC,UAAU,OAAOC,GAAG,MAAMC,SAAS,OAAM,SAAC,cAKxD,uCACE,eAAC,KAAI,CAACJ,KAAM,OACXb,EAAMkB,aAKjB,C,cEpBe,SAASC,GAAY,GAA6B,IAAD,IAA1BC,EAAI,EAAJA,KAC5BjO,EAAYyB,KAAZzB,QACFkO,EAAkBpD,KAElBG,EAAoB,OAAfiD,QAAe,IAAfA,OAAe,EAAfA,EAAkBD,GACvBE,EAAY,OAAFlD,QAAE,IAAFA,OAAE,EAAFA,EAAIkD,QACdC,IAAa,OAAFnD,QAAE,IAAFA,KAAIoD,SACfzH,GACHwH,GACDnD,IACwB,KAAb,QAAV,EAAAA,EAAGoD,eAAO,aAAV,EAAYC,SAA8C,qBAAb,QAAjB,EAAOrD,EAAGoD,eAAO,aAAV,EAAYC,SAElD,OAAKtO,EAGH,+BACE,gBAACuO,EAAA,EAAI,CACHlN,KAAMqG,GAAiB1H,EAASiO,EAAM,eACtCO,OAAO,SACPC,IAAI,aACJ3C,GAAI,CACF4C,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,eAAgB,OAChBC,EAAG,QACH,UAAW,CACTD,eAAgB,cAElB,UAEF,gBAAClB,EAAA,EAAU,CAACrM,MAAM,UAAUwM,SAAS,OAAM,UACjC,OAAPK,QAAO,IAAPA,IAAWF,EAAK,aAEnB,eAACpC,EAAA,EAAG,UACDuC,EACC,eAAClC,GAAM,CAACC,OAAO,YACbvF,EACF,eAAC,KAAW,CAAC8G,KAAK,KAAKpM,MAAM,YAE7B,eAAC,KAAQ,CAACoM,KAAK,KAAKpM,MAAM,mBA5Bf,IAkCvB,CCrCA,SAASyN,GAAmBhE,GAC1B,OACE,eAACc,EAAA,EAAG,UACDd,EAAapO,KAAI,SAACsR,EAAMe,GACvB,OAAO,eAAChB,GAAW,CAASC,KAAMA,GAATe,EAC3B,KAGN,CAUe,SAASC,GAAe,GAMd,IALvBC,EAAiB,EAAjBA,kBACAC,EAAmB,EAAnBA,oBACAC,EAAqB,EAArBA,sBACA3E,EAAO,EAAPA,QACA4E,EAAW,EAAXA,YAEA,EAAwC5N,KAAhCzB,EAAO,EAAPA,QAASD,EAAO,EAAPA,QAASmB,EAAS,EAATA,UACpB4B,EAAWC,cAajB,SAASuM,IACP,OAAIpO,IAAcT,GAEd,eAACoL,EAAA,EAAG,CAAC0D,GAAG,MAAK,SACX,eAAClE,GAAS,MAIT,IACT,CAEA,IAAMmE,EAA+BxM,uBAAY,WAC3ChD,GAAS8C,EAAS6H,GAAqB,CAAE3K,YAC/C,GAAG,CAAC8C,EAAU9C,IAEd,OACE,uCACE,gBAAC6L,EAAA,EAAG,WACF,eAAC4D,GAAA,EAAU,CAAClD,UAAU,aAAaiB,QAAS0B,EAAkB,SAC5D,eAAC,KAAS,MAEZ,eAACvB,EAAA,EAAU,CAACmB,EAAE,OAAM,SAAC,YACrB,eAACjD,EAAA,EAAG,CAACiD,EAAE,mBAAkB,SACvB,gBAACjD,EAAA,EAAG,CAACU,UAAU,YAAYuC,EAAE,OAAM,UACjC,gBAACjD,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTC,eAAgB,gBAChBC,WAAY,UACZ,UAxCd,WACE,IAAM7P,EAAOzB,OAAOD,KAAK2D,IAAmBrE,KAC1C,SAAC+S,GAAC,OAAK1O,GAAkB0O,GAAG3Q,IAAI,IAChC,GACF,OACE,gBAAC4O,EAAA,EAAU,CAACrM,MAAM,UAAUwM,SAAS,OAAM,UAAC,kBAC1B/O,IAGtB,CAiCa4Q,GACD,eAACC,EAAA,EAAM,CACLC,QAAQ,WACR/D,GAAI,CAAEgC,SAAU,OAAQgC,WAAY,MAAOhB,EAAG,WAC9CtB,QAAS,WACP6B,GACF,EAAE,SACH,cAIH,eAACxD,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTC,eAAgB,gBAChBC,WAAY,UACZ,SAEF,eAAC/C,EAAA,EAAG,CAACC,GAAI,CAAE4C,QAAS,OAAQE,WAAY,UAAW,SAChDnE,EACC,uCACG6E,IACD,gBAAC3B,EAAA,EAAU,CAACG,SAAS,OAAM,UAAC,IAAErD,QAGhC,uCACG6E,IACD,gBAAC3B,EAAA,EAAU,CAACG,SAAS,OAAM,UACxB,IACA/N,GAAWgI,GAAehI,aAMrC,eAAC8L,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTC,eAAgB,gBAChBC,WAAY,UACZ,SAEF,gBAAC/C,EAAA,EAAG,CAACC,GAAI,CAAE4C,QAAS,OAAQE,WAAY,UAAW,UAChD7O,GACC,eAAC,GAAI,CAAC0N,OAAQ5F,aAAWC,OAAO/H,GAAS,SACvC,eAAC4N,EAAA,EAAU,CAACC,UAAU,OAAOC,GAAG,MAAMC,SAAS,OAAM,SAAC,mBAKzD9N,GAAWD,GACV,gBAACwO,EAAA,EAAI,CACHhC,UAAU,eACVlL,KAAMqG,GACJ1H,EACAyK,GAAoB1K,EACpB,WAEFyO,OAAO,SACPC,IAAI,aAAY,UAEhB,eAAC,KAAQ,CAACf,KAAM,KAChB,eAACC,EAAA,EAAU,CAACC,UAAU,OAAOC,GAAG,MAAMC,SAAS,OAAM,SAAC,qCAUjEqB,EAAoBxJ,QAAYyJ,EAAsBzJ,OACvD,gBAACkG,EAAA,EAAG,CAACiD,EAAE,YAAW,UAChB,gBAACjD,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTE,WAAY,SACZD,eAAgB,iBAElBoB,GAAG,OAAM,UAET,eAACpC,EAAA,EAAU,UAAC,wBACZ,eAACiC,EAAA,EAAM,CACLlC,KAAK,QACLmC,QAAQ,OACRrC,QAASgC,EACT1D,GAAI,CAAEkE,cAAe,aAAc,SACpC,mBAIFjB,GAAmBI,GACnBJ,GAAmBK,MAGtB,eAACzB,EAAA,EAAU,CAACmB,EAAE,YAAW,SAAC,4CAMlC,CC1Le,SAASmB,GAAO,GAkB3B,IAAD,IAjBDC,iBAAS,OAAO,MAChB1C,eAAO,MAAG,KAAI,EACdlM,EAAK,EAALA,MACA6O,EAAM,EAANA,OAAO,EAAD,EACNC,iBAAS,MAAG,KAAI,EAChBC,EAAI,EAAJA,KAAK,EAAD,EACJxO,cAAM,OAAQ,EACZ,EAAF/E,GAkDA,OAtCE,gBAAC+O,EAAA,EAAG,CACFU,UAAU,wBACViB,QAASA,GAAoB,WAAO,EACpC1B,GAAI,CACFwE,gBAAiBzO,EAAS,UAAY,UACtC0O,YAAa1O,EAAS,cAAgB,UACtC,UAAW,CACT2O,OAAQN,EAAY,UAAY,GAChCO,OAAQP,EAAS,yBAEnB,UAEF,gBAACrE,EAAA,EAAG,WACF,gBAACA,EAAA,EAAG,CACFC,GAAI,CACFxK,QACAoN,QAAS,OACTE,WAAY,UACZ,WAEA/M,GAAU,eAACgK,EAAA,EAAG,CAACU,UAAU,iBAC1B4D,KAEFC,GACC,eAACzC,EAAA,EAAU,CAACG,SAAS,OAAO4C,GAAG,OAAM,SAClCN,OAIP,eAACvE,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAKN,EACLO,IAAK,OACL9E,GAAI,CAAEE,MAAO,OAAQD,OAAQ,YAMrC,CCvDe,SAAS8E,GAAY,GAUhC,IATF3P,EAAS,EAATA,UAAU,EAAD,EACTmF,aAAK,OAAQ,EACbyK,EAAe,EAAfA,gBACAC,EAAa,EAAbA,cAOA,OACE,gBAAClF,EAAA,EAAG,WACF,eAACA,EAAA,EAAG,CACFkE,GAAG,OACHjE,GAAI,CACFG,aAAc,OACdwE,OAAO,aAAD,OAAepK,EAAQ,UAAY,YACzC,SAEF,eAACwF,EAAA,EAAG,CAACC,GAAI,CAAE4C,QAAS,OAAQE,WAAY,UAAYE,EAAE,OAAM,SACzDzI,EACC,gBAACwF,EAAA,EAAG,CAACC,GAAI,CAAE4C,QAAS,OAAQE,WAAY,UAAW,UACjD,eAACjB,EAAA,EAAU,CAACrM,MAAM,UAAS,SAAC,sBAC5B,eAACsO,EAAA,EAAM,CACLlC,KAAK,QACLmC,QAAQ,YACR/D,GAAI,CACFwE,gBAAiB,UACjBhP,MAAO,UACPwO,WAAY,MACZjC,GAAI,MACJ,UAAW,CACTyC,gBAAiB,YAGrB9C,QAAS,WACPsD,GAAgB,GAChB5P,GAAa6P,EAAc7P,EAC7B,EAAE,SACH,iBAKH,uCACE,eAACgL,GAAM,CAACC,OAAO,SACf,eAACwB,EAAA,EAAU,CAACE,GAAG,MAAK,SAAC,2BAK5BvQ,OAAOD,KAAK2D,IAAmBrE,KAAI,SAACiJ,GACnC,IAAMoL,EAAShQ,GAAkB4E,GACjC,OAAIoL,EAAO9P,YAAcA,EAErB,eAAC+O,GAAM,CACLnT,GAAE,kBAAa8I,GAEfsK,WAAW,EACX5O,MAAO0P,EAAO1P,MACd6O,OAAQa,EAAOjS,KACfqR,UAAWY,EAAO5P,YAClBiP,KAAMY,OAAQ,KAAyBD,EAAO7P,UAAU+P,SALnDtL,GASJ,IACT,MAGN,CC1Ee,SAASuL,GAAe5J,GAGrC,IAAM+D,EAAMC,mBAQZ,OALA/F,qBAAU,WACR8F,EAAIE,QAAUjE,CAChB,GAAG,CAACA,IAGG+D,EAAIE,OACb,CCDA,IAAM4F,GAAe,CACnBC,QAAS,UACTC,kBAAmB,oBACnBC,QAAS,UACTC,QAAS,WAGI,SAASC,GAAY,GAQhC,IAPFtC,EAAmB,EAAnBA,oBACAC,EAAqB,EAArBA,sBACA3E,EAAO,EAAPA,QAOA,EAAwDiH,cAAhD7P,EAAM,EAANA,OAAQ9B,EAAO,EAAPA,QAASmB,EAAS,EAATA,UAAWyQ,EAAQ,EAARA,SAAUtL,EAAK,EAALA,MAE9C,EAAoCiD,mBAAS8H,GAAaG,SAAQ,mBAA3DK,EAAU,KAAEC,EAAa,KAEhC,EAA0CvI,qBAEvC,mBAFIwI,EAAa,KAAEC,EAAgB,KAItC,EAAwCzI,qBAAmB,mBAApD0I,EAAY,KAAElB,EAAe,KAE9BmB,EAAkBxP,GAAaX,GAAiBoB,QAChDgM,EAAoBjM,KAEpBiP,EAAkBf,GAAYpR,GAGpCyF,qBAAU,WACJzF,IAAYmS,GAAmBD,GACjC/C,GAEJ,GAAG,CAACnP,EAASmS,EAAiBhD,EAAmB+C,IAGjDzM,qBAAU,WACJyM,IACFnB,GAAgB,GAChBe,EAAcT,GAAaG,SAE/B,GAAG,CAACU,IAGJ,IAAME,EAAiBhB,GAAYtP,GAC7BuQ,EAAoBjB,GAAYjQ,GACtCsE,qBAAU,WAENyM,IACEpQ,IAAWsQ,GACVjR,GAAaA,IAAckR,IAAsB/L,IAEpDwL,EAAcT,GAAaG,QAE/B,GAAG,CACDM,EACAhQ,EACAwE,EACAnF,EACA+Q,EACAE,EACAC,IAGF,IAAMrB,EAAa,iDAAG,WAAO7P,GAAwC,iFAC/DnC,EAAO,GACXzB,OAAOD,KAAK2D,IAAmBrE,KAAI,SAACiJ,GAClC,OAAI1E,IAAcF,GAAkB4E,GAAK1E,YAC/BnC,EAAOiC,GAAkB4E,GAAK7G,KAG1C,IAEAsT,KAAQC,MAAM,CACZC,SAAU,SACVC,OAAQ,gBACRC,MAAO1T,IAETgT,EAAiB7Q,GACjB2Q,EAAcT,GAAaI,SAE3BtQ,GACEyQ,EAASzQ,OAAWiD,GAAW,GAAMuO,OAAM,SAACrM,GACtCA,aAAiBsM,IACnBhB,EAASzQ,IAET4F,QAAQT,MAAMA,GACdyK,GAAgB,GAEpB,IAAG,2CACN,gBA1BkB,sCA+HnB,OACE,eAAC8B,GAAA,EAAM,CACL/P,KAAMoP,EACNY,QAAS3D,EACTpD,GAAI,CACF,yBAA0B,CACxB,mBAAoB,CAClBgH,SAAU,QACV9G,MAAO,CAAE+G,GAAI,OAAQC,GAAI,MAAOC,GAAI,UAGxC,SAtFA5M,EAEA,gBAACwF,EAAA,EAAG,WACF,eAAC4D,GAAA,EAAU,CAAClD,UAAU,aAAaiB,QAAS0B,EAAkB,SAC5D,eAAC,KAAS,MAEZ,eAACvB,EAAA,EAAU,CAACmB,EAAE,OAAM,SACjBzI,aAAiBsM,IACd,gBACA,qBAELtM,aAAiBsM,IAChB,eAAChF,EAAA,EAAU,CACTrM,MAAM,eACNwK,GAAI,CAAEgD,EAAG,CAAEiE,GAAI,OAAQE,GAAI,SAAW,SACvC,oDAID,eAACtF,EAAA,EAAU,CAACrM,MAAM,QAAQwK,GAAI,CAAEgD,EAAG,CAAEiE,GAAI,OAAQE,GAAI,SAAW,SAAC,kDAOrElT,GAAW6R,IAAeR,GAAaG,QAEvC,eAACtC,GAAc,CACbC,kBAAmBA,EACnBC,oBAAqBA,EACrBC,sBAAuBA,EACvB3E,QAASA,EACT4E,YAAa,kBAAMwC,EAAcT,GAAaC,QAAQ,IAK1D,gBAACxF,EAAA,EAAG,WACF,eAAC4D,GAAA,EAAU,CAAClD,UAAU,aAAaiB,QAAS0B,EAAkB,SAC5D,eAAC,KAAS,MAEX0C,IAAeR,GAAaG,QAC3B,eAAC5D,EAAA,EAAU,CACTrM,MAAM,eACNwN,EAAE,OACFhD,GAAI,CAAE0E,OAAQ,WACdhD,QAAS,WACPsD,GAAgB,GAChBe,EAAcT,GAAaG,QAC7B,EAAE,SACH,SAID,eAAC5D,EAAA,EAAU,CAACmB,EAAE,OAAOhD,GAAI,CAAE0E,OAAQ,WAAY,SAAC,wBAIlD,eAAC3E,EAAA,EAAG,CAACC,GAAI,CAAEgD,EAAG,CAAEiE,GAAI,OAAQE,GAAI,SAAW,SACxCrB,IAAeR,GAAaI,QAC3B,eAACX,GAAW,CACV3P,UAAW4Q,EACXzL,MAAO2L,EACPlB,gBAAiBA,EACjBC,cAAeA,IAGjB,eAAClF,EAAA,EAAG,UA1FLvO,OAAOD,KAAK2D,IAAmBrE,KAAI,SAACiJ,GACzC,IAAMoL,EAAShQ,GAAkB4E,GACjC,OACE,eAACqK,GAAM,CACLnT,GAAE,kBAAa8I,GACf4H,QAAS,WACPwD,EAAO9P,YAAcA,EACjB2Q,EAAcT,GAAaG,UAC1BP,EAAO3P,MAAQ0P,EAAcC,EAAO9P,UAC3C,EAEAW,OAAQmP,EAAO9P,YAAcA,EAC7BI,MAAO0P,EAAO1P,MACd6O,OAAQa,EAAOjS,KACfqR,UAAW,KACXC,KAAMY,OAAQ,KAAyBD,EAAO7P,UAAU+P,SALnDtL,EAQX,YA+FJ,C,OC9MA,SAASsN,GAAqBC,EAAuBC,GACnD,OAAOA,EAAEhI,UAAY+H,EAAE/H,SACzB,CAYA,SAASiI,GAAW,GAClB,OAD6B,EAATnS,YACFT,GACT,eAAC4K,GAAS,IAEZ,IACT,CAEA,SAASiI,KACP,MAAsC5B,cAA9B3R,EAAO,EAAPA,QAASmB,EAAS,EAATA,UAAWmF,EAAK,EAALA,MACpBoE,EAAYtB,GAAkB,OAAPpJ,QAAO,IAAPA,SAAWoE,GAAlCsG,QAEFyD,EAAkBpD,KAOlBsD,EAL2BnJ,mBAAQ,WAEvC,OADY3H,OAAOiW,OAAOrF,GACf9I,OAAO4F,IAAqBzF,KAAK2N,GAC9C,GAAG,CAAChF,IAGD9I,QAAO,SAAC6F,GAAE,OAAMA,EAAGoD,OAAO,IAC1B1R,KAAI,SAACsO,GAAE,OAAKA,EAAGgD,IAAI,IAEhBuF,IAA2BpF,EAAQzI,OAEnCuJ,EAAoBjM,KAE1B,OAAIlD,EAEA,gBAAC6P,EAAA,EAAM,CAACC,QAAQ,YAAYvO,MAAM,UAAUkM,QAAS0B,EAAkB,UACpEsE,EACC,uCACE,gBAAC7F,EAAA,EAAU,CAAC4B,GAAG,MAAK,UAAS,OAAPnB,QAAO,IAAPA,OAAO,EAAPA,EAASzI,OAAO,cAAsB,IAC5D,eAACuG,GAAM,OAGT,uCACqB,KACnB,eAACyB,EAAA,EAAU,CAAC4B,GAAG,MAAM1B,GAAG,MAAK,SAC1BpD,GAAW1C,GAAehI,SAI/ByT,GAA0BtS,GAC1B,eAACmS,GAAU,CAACnS,UAAWA,OAIpBmF,EAEP,gBAACuJ,EAAA,EAAM,CAACC,QAAQ,YAAYvO,MAAM,QAAQkM,QAAS0B,EAAkB,UACnE,eAAC,IAAQ,CAAC3C,UAAU,iBACpB,eAACoB,EAAA,EAAU,CAACE,GAAG,MAAK,SACjBxH,aAAiBsM,IAA0B,gBAAkB,aAMlE,qCACE,eAAC/C,EAAA,EAAM,CAACC,QAAQ,YAAYvO,MAAM,UAAUkM,QAAS0B,EAAkB,SAAC,oBAMhF,CAEe,SAASuE,KACtB,IAAQ1T,EAAY2R,cAAZ3R,QAEA0K,EAAYtB,GAAkB,OAAPpJ,QAAO,IAAPA,SAAWoE,GAAlCsG,QAEFyD,EAAkBpD,KAElB4I,EAA2BzO,mBAAQ,WAEvC,OADY3H,OAAOiW,OAAOrF,GACf9I,OAAO4F,IAAqBzF,KAAK2N,GAC9C,GAAG,CAAChF,IAEEE,EAAUsF,EACbtO,QAAO,SAAC6F,GAAE,OAAMA,EAAGoD,OAAO,IAC1B1R,KAAI,SAACsO,GAAE,OAAKA,EAAGgD,IAAI,IAChB0F,EAAYD,EACftO,QAAO,SAAC6F,GAAE,OAAKA,EAAGoD,OAAO,IACzB1R,KAAI,SAACsO,GAAE,OAAKA,EAAGgD,IAAI,IAMtB,OACE,uCACE,eAACqF,GAAe,IAChB,eAAC7B,GAAW,CACVhH,QAAgB,OAAPA,QAAO,IAAPA,SAAWtG,EACpBgL,oBAAqBf,EACrBgB,sBAAuBuE,MAI/B,CChHA,IAAMC,GAAY,CAChB,CACEC,KAAM,QACN3G,KAAM,YAER,CACE2G,KAAM,SACN3G,KAAM,iBAsKK4G,GAhKA,WACb,IAAMC,EAAUC,cAEhB,EAAwC1K,mBAA6B,MAAK,mBAAnE2K,EAAY,KAAEC,EAAe,KAM9BC,EAAsB,WAC1BD,EAAgB,KAClB,EAOA,OACE,eAACE,EAAA,EAAM,CACLC,SAAS,SACT9H,UAAU,SACVT,GAAI,CAAEwE,gBAAiB,kBAAmB,SAE1C,eAACgE,EAAA,EAAS,CAACxB,SAAS,KAAI,SACtB,gBAACyB,EAAA,EAAO,CACNC,gBAAc,EACd1I,GAAI,CAAE6C,eAAgB,gBAAiB8F,UAAW,OAAQ,UAE1D,eAAClG,EAAA,EAAI,CAAClN,KAAK,IAAIkL,UAAU,OAAOT,GAAI,CAAE+C,eAAgB,QAAS,SAE7D,eAAClB,EAAA,EAAU,CACT+G,WAAW,YACX5I,GAAI,CAAEgC,SAAU,CAAEiF,GAAI,OAAQC,GAAI,OAAQC,GAAI,SAAW,SAC1D,iBAIH,gBAACpH,EAAA,EAAG,CAACC,GAAI,CAAE4C,QAAS,OAAQE,WAAY,SAAU6F,UAAW,OAAQ,UACnE,gBAAC5I,EAAA,EAAG,CACFU,UAAU,iBACVT,GAAI,CAAE4C,QAAS,CAAEqE,GAAI,OAAQC,GAAI,SAAW,UAE5C,eAACpD,EAAA,EAAM,CACLvO,KAAK,qCACLmN,OAAO,SACPC,IAAI,aACJlC,UAAU,gBACVsD,QAAQ,YACR/D,GAAI,CACFwE,gBAAiB,cACjB,WAAY,CACVA,gBAAiB,wBAEnB,SAEF,eAAC,IAAW,CAACxE,GAAI,CAAExK,MAAO,YAE5B,eAACsO,EAAA,EAAM,CACLvO,KAAK,8BACLmN,OAAO,SACPC,IAAI,aACJlC,UAAU,gBACVsD,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACFwE,gBAAiB,cACjB,WAAY,CACVA,gBAAiB,wBAEnB,SAEF,eAAC,IAAY,CAACxE,GAAI,CAAExK,MAAO,YAE7B,eAACsO,EAAA,EAAM,CACLvO,KAAK,8BACLmN,OAAO,SACPC,IAAI,aACJlC,UAAU,gBACVsD,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACFwE,gBAAiB,cACjB,WAAY,CACVA,gBAAiB,wBAEnB,SAEF,eAACzE,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAKgE,UAAa/D,IAAI,UAG/C,eAAC6C,GAAU,IACX,eAAC7D,EAAA,EAAM,CACLpC,QAxFe,SAAC8E,GAC1B4B,EAAgB5B,EAAMsC,cACxB,EAuFYrI,UAAU,cACVsD,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACFwE,gBAAiB,yBACjB,WAAY,CACVA,gBAAiB,2BAEnB,SAEF,eAAC,IAAQ,CACPxE,GAAI,CACFxK,MAAO,wBACP,WAAY,CACVA,MAAO,4BAKf,gBAACuT,EAAA,EAAI,CACH/X,GAAG,cACHgY,SAAUb,EACVc,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,SAEdpS,KAAMyC,QAAQ2O,GACdpB,QAASsB,EACTrI,GAAI,CACF4E,GAAI,QACJ,UAEF,eAAC0E,EAAA,EAAQ,CACPxH,UAAU,IACVvM,KAAK,iCACLyK,GAAI,CACFwE,gBAAiB,yBACjBhP,MAAO,yBACP,SACH,SAGAsS,GAAUjX,KAAI,SAAC0Y,EAAMzP,GAAG,OACvB,eAACwP,EAAA,EAAQ,CAEPtJ,GAAI,CACFwE,gBAAiB,yBACjBhP,MAAO,yBAETkM,QAAS,kBAvIAqG,EAuIsBwB,EAAKxB,KAtIlDM,SACAJ,EAAQuB,KAAKzB,GAFS,IAACA,CAuIgC,EAAC,SAEzCwB,EAAKnI,MAPDtH,EAQI,gBAQ3B,E,6BCpKe2P,GAxBA,WACb,OACE,qCACE,gBAAC1J,EAAA,EAAG,CAACU,UAAU,mBAAkB,UAC/B,eAACV,EAAA,EAAG,CACF+B,UAAU,MACV9B,GAAI,CACFE,MAAO,CAAE+G,GAAI,QAASC,GAAI,SAC1BzD,GAAI,CAAEwD,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAE1BtC,IAAK6E,WACL5E,IAAI,iBAEN,eAAC/E,EAAA,EAAG,CACF+B,UAAU,MACV9B,GAAI,CAAEE,MAAO,CAAE+G,GAAI,QAASC,GAAI,UAChCrC,IAAK8E,WACL7E,IAAI,qBAKd,E,8BCjBM8E,GAAmBC,aAAY,CACnC5W,KAAM,sBACN6W,aAJuC,GAKvCC,SAAU,CACRC,iBAAgB,SAACxT,EAAOkQ,GACtBlQ,EAAMgT,KAAK9C,EAAOuD,QACpB,EACAC,gBAAe,SAAC1T,EAAOkQ,GACrB,IAAMhE,EAASlM,EAAM2T,MAAK,SAACjS,GAAC,OAAKA,EAAEkS,UAAY1D,EAAOuD,OAAO,IACzDvH,GACFlM,EAAM6T,OAAO7T,EAAM2B,QAAQuK,GAAS,EAExC,KA6BG,GAA8CkH,GAAiBU,QAArCJ,IAAF,GAAhBF,iBAAiC,GAAfE,iBCnDpBK,IDqDEX,GAAwB,QCrDjB,SAACpT,EAAYgU,GACjBhZ,OAAOD,KAAKiZ,GACpBC,SAAQ,SAAA3Q,GACVtD,EAAMsD,GAAO0Q,EAAW1Q,EAC5B,GACJ,G,wCCGa4Q,GAAe,SAAH,GAAoD,IAA9CC,EAAK,EAALA,MAAM,EAAD,EAAEC,eAAO,IAAC,KAAE,EAAExY,EAAI,EAAJA,KAC9C,OAAOyY,SAAMC,gBAAgB,CACzBH,MAAOA,EACPC,QAASA,EACTxY,KAAMA,EACN2Y,OAAQ,SACRC,UAAW,eACXC,YAAa,CAAC,oBAAqB,mBACnCC,aAAc,CAAC,oBAAqB,oBACpCC,QAAS,CACLC,SAAU,IACVC,UAAU,IAGtB,E,UCpBaC,GAAU,qBAMRC,G,QAJEC,EAAMC,OAAO,CAC5BH,QAASA,KCWLI,GAASC,aAAGL,IAMLM,GAAYC,aACvB,sBAAqB,iDAErB,mGAAgB,GAAPnU,EAAO,EAAPA,SAEHoU,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QACzB5Q,WACA+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeC,eAAe,KAAD,EAFzDqX,EAAY,8BAMVb,GACHc,IAAI,8BAAD,OAA+B3U,IAClC4U,MAAK,SAACC,GACLC,EAAYD,EAAS3T,IACvB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,4BAGI6R,EACHM,SAASF,EAAUG,SACnBC,KAAK,CAAEC,SAAU,MAAa,KAAD,oBAE1BtB,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa,EACbC,YAAa,EACbL,QAAS,EAAE,KACV,KAAD,GAEmB,OADrBjC,GAAa,CAAEC,MAAO,yBAA0BvY,KAAM,YACtDsZ,GAAOuB,KAAK,SAAS,2BAG6B,OAH7B,0BAGrBvC,GAAa,CAAEC,MAAM,GAAD,aAAYvY,KAAM,WAAY,yHAIrD,mDAxCoB,IA+CV8a,GAAarB,aACxB,wBAAuB,iDAEvB,mGAAgB,GAAPnU,EAAO,EAAPA,SAEHoU,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QACzB5Q,WACA+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeC,eAAe,KAAD,EAFzDqX,EAAY,8BAMVb,GACHc,IAAI,8BAAD,OAA+B3U,IAClC4U,MAAK,SAACC,GACLC,EAAYD,EAAS3T,IACvB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,4BAGI6R,EACHc,WAAWV,EAAUQ,aACrBJ,KAAK,CAAEC,SAAU,MAAa,KAAD,oBAC1BtB,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa,EACbC,aAAc,EACdL,QAAS,KACR,KAAD,GAEFjC,GAAa,CAAEC,MAAO,yBAA0BvY,KAAM,YACtDsZ,GAAOuB,KAAK,SAAS,wBAE6B,OAF7B,0BAErBvC,GAAa,CAAEC,MAAM,GAAD,aAAYvY,KAAM,WAAY,yHAIrD,mDAvCsB,IAoDZ+a,GAAatB,aACxB,4BAA2B,iDAE3B,mJAa0G,GAXtGuB,EAAO,EAAPA,QACAC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAG,EAAHA,IACAC,EAAa,EAAbA,cACA9V,EAAO,EAAPA,QACA+V,EAAS,EAATA,UAEAzW,EAAQ,EAARA,SAGFgE,QAAQyR,IAAI,oBAAqBW,EAASC,EAAWC,EAAWC,EAAKC,EAAe9V,EAAS+V,IACzF3B,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QACzB5Q,WACA+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeC,eAAe,KAAD,EAFzDqX,EAAY,cAQU,OADtBsB,EAAoB,GACpBC,EAAoB,GAAG,EAAD,kBAERvB,EACbwB,WAAWR,EAASC,GACpBT,KAAK,CAAEC,SAAU,IAAWgB,UAAWJ,IAAa,KAAD,GAFtDK,EAAO,OAIHvL,EAAU,KAAK,KAAD,MACC,WAAZA,GAAmC,MAAXA,EAAe,qBACxCuJ,OAAOC,QAAQ,CAAD,iCACV,IAAIgC,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,oBAE/Bqa,OAAOC,QAAQiC,IAAIC,eAAeH,GAAS,KAAD,IAA9DI,EAAW,SACEA,EAAYC,KAAOD,EAAYC,IAAItU,OAAS,IAC7D0I,EAAU2L,EAAYC,IAAI,GAAGC,aAE/BpT,QAAQyR,IAAI,YAAalK,EAASuL,GAAS,WAE7B,WAAZvL,EAAoB,kCAChB,IAAIwL,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,4CAKrD2a,EAAaiC,QAAQhB,EAAW,GAAG7V,OAAM,QAEX,OAHhC8W,EAAU,OAEdC,WACFvT,QAAQyR,IAAI,cAAea,GAAW,UAChC/B,GAASuB,KAAK,sBAAuB,CACzC0B,QAASlB,EACTmB,UAAWlB,EACXmB,cAAehX,EACfiX,aAAcL,EACdM,SAAUxB,IACT,KAAD,GAQuB,OANrByB,EAAcrB,EACdmB,EAAeL,EACnBZ,EAAQJ,GAAauB,EACrBlB,EAAQL,GAAaqB,EAGjBG,GAAgB,EAAM,EAAD,QAGnBvD,GAASuB,KAAK,qBAAsB,CACxCiC,cAAeF,EACfG,cAAeL,EACfH,QAASnB,IACR,KAAD,oBAEI9B,GACHc,IAAI,+BAAD,OAAgCgB,IACnCf,MAAK,SAACC,GACL0C,EAAa1C,EAAS3T,IACxB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,oBAGK6R,EAAa8C,gBAAgB1X,OAAM,QADzB,OACyB,YAAE+W,WAAQ,KACpDY,KAAKC,IAAI,GAAI,GAFTF,EAAa,oBAIb3D,GACHc,IAAI,iBACJC,MAAK,SAACC,GACLC,EAAYD,EAAS3T,IACvB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,GAGJ,IADI8U,EAAa,EACRnM,EAAI,EAAGA,EAAIsJ,EAAU3S,OAAQqJ,IACpCmM,GAAc7C,EAAUtJ,GAAG6J,YAC5B,GACmB,QAAhB8B,EAAqB,oBACF,QAAjBF,EAAsB,kCAClBpD,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASuX,EAAWK,aACpBvC,YAAa,EACbC,YAA8B,EAAhBkC,EAAqB,GACnCvC,QAAS,KACR,KAAD,oBAEIpB,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa,EACbC,YAA8B,EAAhBkC,EAAqB,GACnCvC,QAAS,KACR,KAAD,4CAEIpB,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASuX,EAAWK,aACpBvC,YAAa,EACbC,YAA8B,EAAhBkC,EAAqB,GACnCvC,QAAS,KACR,KAAD,oBAEIpB,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa,EACbC,YAA8B,EAAhBkC,EAAqB,GACnCvC,QAAS,KACR,KAAD,GAGKzJ,EAAI,EAAE,KAAD,QAAEA,EAAIsJ,EAAU3S,QAAM,kCAC5B0R,GAASuB,KAAK,uBAAwB,CAC1CpV,QAAS8U,EAAUtJ,GAAGxL,QACtBqV,YAAa,EACbC,YACGkC,EAAgB1C,EAAUtJ,GAAG6J,YAAc,EAAKsC,EAAa,GAChE1C,QAAS,KACR,KAAD,GAPkCzJ,IAAG,wBASY,OAArDqM,MAAM,+CAA+C,UAC/CnD,EAAaoD,WAAWN,EAAgB,IAAI,KAAD,MAG9B,QAAjBP,EAAsB,oBACJ,QAAhBE,EAAqB,kCACjBtD,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASuX,EAAWK,aACpBvC,YAAa,EACbC,YAA8B,EAAhBkC,EAAqB,GACnCvC,QAAS,KACR,KAAD,oBAEIpB,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa,EACbC,YAA8B,EAAhBkC,EAAqB,GACnCvC,QAAS,KACR,KAAD,4CAEIpB,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa,EACbC,YAA8B,EAAhBkC,EAAqB,GACnCvC,QAAS,KACR,KAAD,oBAEIpB,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASuX,EAAWK,aACpBvC,YAAa,EACbC,YAA8B,EAAhBkC,EAAqB,GACnCvC,QAAS,KACR,KAAD,GAEKzJ,EAAI,EAAE,KAAD,QAAEA,EAAIsJ,EAAU3S,QAAM,kCAC5B0R,GAASuB,KAAK,uBAAwB,CAC1CpV,QAAS8U,EAAUtJ,GAAGxL,QACtBqV,YAAa,EACbC,YACGkC,EAAgB1C,EAAUtJ,GAAG6J,YAAc,EAAKsC,EAAa,GAChE1C,QAAS,KACR,KAAD,GAPkCzJ,IAAG,wBASY,OAArDqM,MAAM,+CAA+C,UAC/CnD,EAAaoD,WAAWN,EAAgB,IAAI,KAAD,QAG/CL,EAAcF,GAAY,oCACtBpD,GACHc,IAAI,4BAAD,OAA6B4C,EAAWK,eAC3ChD,MAAK,SAACC,GACLkD,EAAalD,EAAS3T,IACxB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,sBAEEgR,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASuX,EAAWK,aACpBvC,YAAa,EACbC,YAAaM,EAAY,EAAiB,EAAZG,EAAiB,EAAgB,EAAZA,EACnDd,QAAS,CAACS,EAAS6B,EAAW7B,WAC7B,KAAD,mCACOyB,EAAcF,GAAY,oCAC7BpD,GACHc,IAAI,4BAAD,OAA6B3U,IAChC4U,MAAK,SAACC,GACLkD,EAAalD,EAAS3T,IACxB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,sBAEEgR,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa,EACbC,YAAaM,EAAY,EAAiB,EAAZG,EAAiB,EAAgB,EAAZA,EACnDd,QAAS,CAACS,EAAS6B,EAAW7B,WAC7B,KAAD,gDAEI7B,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASuX,EAAWK,aACpBvC,YAAa,EACbC,YAAaM,EAAY,EAAIG,EAAwB,EAAZA,EACzCd,QAAS,CAACsC,EAAW7B,WACpB,KAAD,sBAEI7B,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa,EACbC,YAAaM,EAAY,EAAIG,EAAwB,EAAZA,EACzCd,QAAS,CAACS,KACT,KAAD,IACF0B,GAAO,EAAK,aAGVW,EAAW,CAAD,mCACNlE,GAASuB,KAAK,qBAAsB,CACxCpV,QAAS+X,EAAW/X,QACpBgY,SAAUD,EAAWC,SAAW,IAC/B,KAAD,iCAEGZ,EAAK,CAAD,sBACHD,EAAcF,GAAY,oCACtBpD,GAASuB,KAAK,qBAAsB,CACxCpV,QAAS+X,EAAW/X,QACpBgY,SAAU,IACT,KAAD,mCACOb,EAAcF,GAAY,oCAC7BpD,GAASuB,KAAK,qBAAsB,CACxCpV,QAASA,EACTgY,SAAU,IACT,KAAD,sBAKFnE,GAASuB,KAAK,qBAAsB,CACxCiC,cAAeF,EACfG,cAAeL,EACfgB,QAASV,EAAWW,SACpBC,QAASZ,EAAWR,UACpBqB,SAAUb,EAAWK,aACrBS,SAAUd,EAAWP,cACrBF,QAASnB,IACR,KAAD,IAEgE,OAAlE3C,GAAa,CAAEC,MAAO,wBAAyBvY,KAAM,YAAa,kBAC3D,CACLsb,UACAC,YACD,qCAEDjD,GAAa,CAAEC,MAAM,GAAD,aAAYvY,KAAM,WAAY,SAIjD,OAJiD,WAE9C0b,GACF9W,EAASkT,GAAgB4D,IAC1B,mFAEJ,qDAxR0B,IA6TdkC,GAzBInG,aAAY,CAC7B5W,KAAM,QACN6W,aAXmB,CACnBzP,SAAS,GAWT0P,SAAU,CACRkG,gBAAe,SAACzZ,EAAOkQ,GACrB,GAGJwJ,cAAe,SAACC,GACdA,EACGC,QAAQjD,GAAW7K,SAAS,SAAC9L,EAAOkQ,GACnClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQjD,GAAWkD,WAAW,SAAC7Z,EAAOkQ,GACrC6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQjD,GAAWmD,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MACtC/D,EAAM6D,SAAU,CAClB,GACJ,IAK+B,QC5apBkW,ID8acC,cAJV,SAACha,GAAgB,OAAKA,EAAMia,KAAM,IAIC,SAACA,GAAK,OAAKA,CAAK,IC9a1C5E,aACxB,iBAAgB,iDAChB,uHAAgB,OAAP5X,EAAO,EAAPA,QAAO,SAGRsX,GACHc,IAAI,iBACJC,MAAK,SAACC,GACLC,EAAYD,EAAS3T,IACvB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,EAGJ,IADI8U,EAAa,EACRnM,EAAI,EAAGA,EAAIsJ,EAAU3S,OAAQqJ,IACpCmM,GAAc7C,EAAUtJ,GAAG6J,YAC5B,gBAEKxB,GACHc,IAAI,8BAAD,OAA+BpY,IAClCqY,MAAK,SAACC,GACLmE,EAAUnE,EAAS3T,IACrB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,EAKmC,OAHnCoW,EAAkB,QAAV,EAAGD,SAAO,aAAP,EAAS/D,QAAQ9S,OAC5B+W,EAA2B,QAAV,EAAGF,SAAO,aAAP,EAAS/D,QAC7BkE,GAAmB,QAAP,EAAAH,SAAO,aAAP,EAAS1D,aAAc,IACnCD,EAAqB,QAAV,EAAG2D,SAAO,aAAP,EAAS3D,YAAW,kBAC/B,CACL4D,WACAE,YACA9D,cACAsC,aACAuB,YACD,4CACF,mDAtCe,KA+EHE,GA1BEjH,aAAY,CAC3B5W,KAAM,MACN6W,aANmB,CACnBzP,SAAS,GAMT0P,SAAU,CACRkG,gBAAe,SAACzZ,EAAOkQ,GACrB6D,GAAO/T,EAAOkQ,EAAOuD,QAEvB,GAEFiG,cAAe,SAACC,GACdA,EACGC,QAAQG,GAAWjO,SAAS,SAAC9L,EAAOkQ,GACnClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQG,GAAWF,WAAW,SAAC7Z,EAAOkQ,GACrC6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQG,GAAWD,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MACtC/D,EAAM6D,SAAU,CAClB,GACJ,IAK6B,QClFlB0W,IDoFcP,cAJV,SAACha,GAAgB,OAAKA,EAAMwa,IAAK,IAIE,SAACA,GAAI,OAAKA,CAAI,ICpF5CnF,aACpB,gBAAe,iDACf,qGAAgB,GAAPnU,EAAO,EAAPA,SAEHoU,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACpCH,OAAOC,QACxB5Q,WACA+Q,GAAGH,KAAQrU,QAAQyU,MAAMzU,IAAU,KAAD,EAFrCuZ,EAAW,8BAKKA,EAAYhe,OAAOuE,OAAO,KAAD,EAAlC,OAAP0Z,EAAO,iBACWD,EAAYE,SAAS3Z,OAAO,KAAD,GAApC,OAAT4Z,EAAS,iBAEP7F,GAASuB,KAAK,sBAAuB,CACzCpV,QAASA,EACTzE,KAAMie,EACNC,OAAQC,IACP,KAAD,GAEF1G,GAAa,CAAEC,MAAO,qBAAsBvY,KAAM,YAAa,4CAChE,mDApBc,KA6BJif,GAAaxF,aACxB,wBAAuB,iDACvB,mGAA8B,OAArBnU,EAAO,EAAPA,QAASzE,EAAI,EAAJA,KAAMke,EAAM,EAANA,OAAM,SACtB5F,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTzE,KAAMA,EACNke,OAAQA,IACP,KAAD,kBACI5F,GAAS+F,OAAO,uBAAD,OAAwB5Z,IAAW,KAAD,EAEvDgT,GAAa,CAAEC,MAAO,yBAA0BvY,KAAM,YAAa,2CACpE,mDAVsB,IAiBZmf,GAAgB1F,aAC3B,8BAA6B,iDAC7B,+FAAgB,OAAPnU,EAAO,EAAPA,QAAO,SACR6T,GAAS+F,OAAO,uBAAD,OAAwB5Z,IAAW,KAAD,EAEvDgT,GAAa,CAAEC,MAAO,wBAAyBvY,KAAM,YAAa,2CACnE,mDAL4B,IAYlBof,GAAiB3F,aAC5B,gCAA+B,iDAC/B,+FAAgB,OAAPnU,EAAO,EAAPA,QAAO,SACR6T,GAAS+F,OAAO,wBAAD,OAAyB5Z,IAAW,KAAD,EAExDgT,GAAa,CAAEC,MAAO,wBAAyBvY,KAAM,YAAa,2CACnE,mDAL8B,IC7D3Bqf,GAAiB,CACrBC,SAAU,MACVC,UAAW,SACX3P,SAAU,OACVxM,MAAO,WAGHoc,GAAQ,CACZrJ,SAAU,WACVsJ,IAAK,MACLC,KAAM,MACNC,UAAW,wBACX7R,MAAO,IACPsE,gBAAiB,iBACjBG,OAAQ,OACRqN,UAAW,GACXhP,EAAG,EACHJ,QAAS,OACTqP,cAAe,SACfnP,WAAY,UAuLCoP,GApLC,WACd,IAAQje,EAAY2R,cAAZ3R,QACR,EAAwBke,IAAM3U,UAAS,GAAM,mBAAtCzG,EAAI,KAAEqb,EAAO,KACpB,EAA0CD,IAAM3U,SAAS,IAAG,mBAArD6U,EAAa,KAAEC,EAAgB,KAEhCC,EAAc,WAAH,OAASH,GAAQ,EAAO,EACnCpb,EAAWC,cAEXub,EAAgBjc,aACpB,SAACC,GAAK,OAAKA,EAAMic,QAAQvD,aAAa,IAEpCwD,EAAuBnc,aACzB,SAACC,GAAK,OAAKA,EAAMmc,OAAOhC,QAAQ,IAE9BiC,EAAuBrc,aACzB,SAACC,GAAK,OAAKA,EAAMmc,OAAO9B,SAAS,IAG7B5I,EAAUC,cAKV2K,EAAmB3b,uBAAY,WACnCF,EAASuZ,GAAW,CAAEtc,QAASA,IACjC,GAAG,CAACA,IAEE6e,EAAc5b,sBAAW,gCAAC,wGACNF,EAAS4U,GAAU,CAAElU,QAASzD,KAAY,KAAD,EAC1B,cADxB,OACC8e,KAAKC,eACnBH,IACD,2CACA,CAAC5e,IAEEgf,EAAe/b,sBAAW,gCAAC,wGACRF,EAASkW,GAAW,CAAExV,QAASzD,KAAY,KAAD,EAC3B,cADxB,OACC8e,KAAKC,eAClBH,IACD,2CACA,CAAC5e,IAEJyF,qBAAU,WACJzF,GACF4e,GAEJ,GAAG,CAAC5e,IAEJ,IAAMif,EAAgBhc,sBAAW,gCAAC,wGAC1BF,EAAS+Z,GAAO,CAAErZ,QAAS2a,KAAkB,KAAD,sCACjD,CAACA,IAEJ,OACE,gBAACtS,EAAA,EAAG,CACFC,GAAI,CACFwE,gBAAiB,yBACjBkN,SAAU,MACVnJ,SAAU,YACV,UAEF,gBAAC1G,EAAA,EAAU,CACT+G,WAAW,YACX5I,GAAI,CACFxK,MAAO,UACPwM,SAAU,CAAEiF,GAAI,OAAQC,GAAI,QAC5BiM,GAAI,EACJC,GAAI,CAAEnM,GAAI,EAAGC,GAAI,GACjB1C,gBAAiB,sBACjBtE,MAAO,CAAE+G,GAAI,QAASC,GAAI,SAC1ByK,UAAW,SACX0B,GAAI,QACJ,UACH,sBACqBb,EAAc,UAEpC,gBAACzS,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTC,eAAgB,SAChByQ,SAAU,OACVxQ,WAAY,aACZyQ,GAAI,EACJ3O,GAAI,QACJ,UAEF,eAAC7E,EAAA,EAAG,CAACC,GAAI,CAAEyD,GAAI,EAAGkO,UAAW,UAAW,SACtC,eAAC7N,EAAA,EAAM,CAACpC,QAjFG,WAAH,OAAS0Q,GAAQ,EAAM,EAiFFrO,QAAQ,YAAYvO,MAAM,UAAS,SAAC,kBAInE,gBAACuK,EAAA,EAAG,CAACC,GAAI,CAAEyD,GAAI,EAAGkO,UAAW,UAAW,UACtC,eAAC7N,EAAA,EAAM,CAACC,QAAQ,YAAYvO,MAAM,OAAOkM,QAASoR,EAAY,SAAC,kBAG/D,gBAACjR,EAAA,EAAU,CAAC7B,GAAIyR,GAAe,UAAC,mBACbiB,GAA8B,EAAE,cAGrD,gBAAC3S,EAAA,EAAG,CAACC,GAAI,CAAEyD,GAAI,EAAGkO,UAAW,UAAW,UACtC,eAAC7N,EAAA,EAAM,CAACC,QAAQ,YAAYvO,MAAM,OAAOkM,QAASuR,EAAa,SAAC,iBAGhE,gBAACpR,EAAA,EAAU,CAAC7B,GAAIyR,GAAe,UAAC,kBACdmB,GAA8B,EAAE,aAGpD,eAAC7S,EAAA,EAAG,CAACC,GAAI,CAAEyD,GAAI,EAAGkO,UAAW,UAAW,SACtC,eAAC7N,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNkM,QAAS,WA1FM,IAACqG,IA2FG,QA1F3BE,EAAQuB,KAAKzB,EA2FL,EAAE,SACH,sBAKL,eAAClG,EAAA,EAAU,CACT+G,WAAW,YACX5I,GAAI,CACFxK,MAAO,OACPwM,SAAU,CAAEiF,GAAI,OAAQuM,GAAI,QAC5BL,GAAI,EACJC,GAAI,CAAEnM,GAAI,EAAGuM,GAAI,GACjBhP,gBAAiB,sBACjBtE,MAAO,CAAE+G,GAAI,QAASC,GAAI,QAASsM,GAAI,SACvC7B,UAAW,SACXpJ,SAAU,CAAEpB,GAAI,YAChBkM,GAAI,OACJvB,KAAM,MACN2B,OAAQ,OACR,SACH,sCAGD,eAACC,GAAA,EAAK,CACJ3c,KAAMA,EACNgQ,QAASwL,EACT,kBAAgB,oBAChB,mBAAiB,0BAAyB,SAE1C,gBAACxS,EAAA,EAAG,CAACC,GAAI4R,GAAM,UACb,eAAC/P,EAAA,EAAU,CACTrM,MAAM,QACNoT,WAAW,UACX+K,WAAW,MACX3R,SAAS,OAAM,SAChB,8BAGD,eAAC4R,GAAA,EAAS,CACR5T,GAAI,CACF4E,GAAI,OACJ1E,MAAO,QAETzE,MAAO4W,EACPwB,SAAU,SAACziB,GACTkhB,EAAiBlhB,EAAEsR,OAAOjH,MAC5B,IAEF,eAACqI,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,OACNwK,GAAI,CACF4E,GAAI,OACJ1E,MAAO,OAETwB,QAAS,WACPwR,IACAX,GACF,EAAE,SACH,wBAOX,E,UCpNauB,GAAa,CACxB9R,SAAU,CAAEiF,GAAI,OAAQC,GAAI,OAAQC,GAAI,QACxCyB,WAAY,UACZ+K,WAAY,MACZne,MAAO,QACPwO,WAAY,CAAEiD,GAAI,OAAQC,GAAI,OAAQC,GAAI,QAC1CwK,UAAW,UAGAoC,GAAoB,CAC/B/R,SAAU,CAAEiF,GAAI,OAAQC,GAAI,OAAQC,GAAI,QACxC3R,MAAO,QACPme,WAAY,MACZ/K,WAAY,WAGDoL,GAAkB,CAC7B9T,MAAO,CAAE+G,GAAI,QAASC,GAAI,QAASC,GAAI,SACvClH,OAAQ,CAAEgH,GAAI,QAASC,GAAI,QAASC,GAAI,SACxChH,aAAc,QAGH8T,GAAc,CACzBjS,SAAU,CAAEiF,GAAI,OAAQC,GAAI,QAC5ByK,UAAW,SACXpJ,SAAU,YAGC2L,GAAgB,CAC3BhU,MAAO,CAAE+G,GAAI,QAASC,GAAI,QAASC,GAAI,SACvClH,OAAQ,CAAEgH,GAAI,QAASC,GAAI,QAASC,GAAI,UAG7ByK,GAAQ,CACnBrJ,SAAU,WACVsJ,IAAK,MACLC,KAAM,MACNC,UAAW,wBACX7R,MAAO,CAAE+G,GAAI,QAASC,GAAI,QAASC,GAAI,QAASgN,GAAI,UACpDlU,OAAQ,QACR0E,OAAQ,iBACRqN,UAAW,GACXhP,EAAG,EACHwB,gBAAiB,iBACjBrE,aAAc,EACdiU,UAAW,SACX,uBAAwB,CACtBlU,MAAO,MACPsE,gBAAiB,QAEnB,6BAA8B,CAC5BrE,aAAc,MACdqE,gBAAiB,SAIR6P,GAAe,CAC1BzR,QAAS,OACTC,eAAgB,eAChByQ,SAAU,QAGCgB,GAAmB,CAC9BpU,MAAO,CACLF,GAAI,OACJkH,GAAI,QACJC,GAAI,QACJgN,GAAI,SAENlU,OAAQ,CACND,GAAI,OACJkH,GAAI,QACJC,GAAI,QACJgN,GAAI,SAENhU,aAAc,QC1DHoU,GAAoB1I,aAC/B,wBAAuB,iDACvB,yGAA4E,OAAnE2I,EAAS,EAATA,UAAWC,EAAU,EAAVA,WAAYC,EAAU,EAAVA,WAAYpH,EAAS,EAATA,UAAWE,EAAa,EAAbA,cAAemH,EAAM,EAANA,OAAM,kBACnE,CACLH,YACAC,aACAC,aACApH,YACAE,gBACAmH,WACD,2CACF,mDAVsB,IA2DVC,GA1BK/K,aAAY,CAC9B5W,KAAM,MACN6W,aAtBmB,CACnBzP,SAAS,EACTma,WAAW,EACXC,YAAY,EACZnH,UAAW,EACXoH,WAAY,EACZlH,cAAe,EACfmH,QAAQ,GAgBR5K,SAAU,CACRkG,gBAAe,SAACzZ,EAAOkQ,GACrB6D,GAAO/T,EAAOkQ,EAAOuD,QAEvB,GAEFiG,cAAe,SAACC,GACdA,EACGC,QAAQmE,GAAkBjS,SAAS,SAAC9L,EAAOkQ,GAC1ClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQmE,GAAkBlE,WAAW,SAAC7Z,EAAOkQ,GAC5C6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQmE,GAAkBjE,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC7C/D,EAAM6D,SAAU,CAClB,GACJ,IAKgC,Q,IAEPmW,cAJV,SAACha,GAAgB,OAAKA,EAAMqe,MAAO,IAIA,SAACA,GAAM,OAAKA,CAAM,I,QC9DhEC,GAAgB,SACpBte,EACAue,EACA3T,GAEA,IAAMwJ,EAAgB,cACpBmK,YACG3T,GAEL5K,EAAMoU,QAAUA,CAClB,EAIMoK,GAAgBnL,aAAY,CAChC5W,KAAM,WACN6W,aALkC,CAClCc,QAAS,MAKTb,SAAU,CAERxP,MAAK,SAAC/D,EAAOkQ,GACXoO,GAActe,EAAO,QAASkQ,EAAOuD,QACvC,EAEAgL,KAAI,SAACze,EAAOkQ,GACVoO,GAActe,EAAO,OAAQkQ,EAAOuD,QACtC,EACAiL,QAAO,SAAC1e,EAAOkQ,GACboO,GAActe,EAAO,UAAWkQ,EAAOuD,QACzC,EACAnP,QAAO,SAACtE,EAAOkQ,GACboO,GAActe,EAAO,UAAWkQ,EAAOuD,QACzC,EAEAkL,MAAK,SAAC3e,GACJA,EAAMoU,QAAU,IAClB,KAIG,GAAiDoK,GAAc1K,QAAvD/P,GAAK,GAALA,MAEAya,IAFW,GAAJC,KAAW,GAALE,MAAc,GAAPD,QAAgB,GAAPpa,QAE7Bka,GAAqB,SC1DvBI,GAcM,uBCVNC,GAAoB,SAACjiB,EAAU4D,GACxC,IAAIoK,EAAOgU,GA0BX,OAxBIhiB,EAAI9B,OAAsB,QAAd8B,EAAI9B,OACZ8B,EAAIwX,QAAQzS,QAAQ,0BAA4B,IAChDiJ,EAAO,uGAGPhO,EAAIwF,MAAQxF,EAAIwF,KAAKgS,UACrBxJ,EAAOhO,EAAIwF,KAAKgS,QAAQ0K,SAAS,KAAOliB,EAAIwF,KAAKgS,QAAQ3Q,MAAM,KAAK,GAAGsb,OAASniB,EAAIwF,KAAKA,MAAQxF,EAAIwF,KAAKgS,SAG1GxX,EAAIwF,MAAQxF,EAAIwF,KAAKgS,SAAWxX,EAAIwF,KAAKgS,QAAQ0K,SAAS,oCAC1DlU,EAAO,8CAGPhO,EAAIwF,MAAQxF,EAAIwF,KAAKgS,SAAWxX,EAAIwF,KAAKgS,QAAQ0K,SAAS,oBAC1DlU,EAAO,mBAIXhO,EAAI9B,MAAqB,OAAb8B,EAAI9B,MACZ8B,EAAIwX,QAAQ0K,SAAS,uCACrBlU,EAAO,qCAIRpK,EAASuD,GAAM,CAAE6G,OAAM7G,MAAOnH,IACzC,ECdaoiB,GAAa3J,aACxB,iBACA,iDACA,2GAA2C,GAAlCuB,EAAO,EAAPA,QAA0BpW,EAAQ,EAARA,UAE9B8U,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QAAQ5Q,WAAW+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeE,cAAc,KAAD,EAAnGic,EAAW,wCAIOA,EAAYwE,QAC9B3gB,GAAeC,aACfqY,GACAR,KAAK,CAAEC,SAAU,MAAa,KAAD,GAH3BiB,EAAO,OAKPvL,EAAU,KAAK,KAAD,MACC,WAAZA,GAAmC,MAAXA,EAAe,qBACxCuJ,OAAOC,QAAQ,CAAD,iCACV,IAAIgC,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,oBAE/Bqa,OAAOC,QAAQiC,IAAIC,eAAeH,GAAS,KAAD,IAA9DI,EAAW,SACEA,EAAYC,KAAOD,EAAYC,IAAItU,OAAS,IAC7D0I,EAAU2L,EAAYC,IAAI,GAAGC,aAE/BpT,QAAQyR,IAAI,YAAalK,EAASuL,GAAS,WAE7B,WAAZvL,EAAoB,kCAChB,IAAIwL,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,2BAIK,OAAlEiZ,GAAa,CAAEC,MAAO,yBAA0BvY,KAAM,YAAY,2BAGjB,OAHiB,0BAGlEsY,GAAa,CAAEC,MAAM,GAAD,aAAYvY,KAAM,WAAW,kBAC1CijB,GAAkB,EAAD,GAAMre,IAAS,sGAG1C,qDArCD,IA4CW0e,GAAmB7J,aAC9B,uBACA,iDACA,qGAAiB,GAAR8J,EAAQ,EAARA,UAEJ7J,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QAAQ5Q,WAAW+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeE,cAAc,KAAD,EAAnGic,EAAW,cAGY,OAAvB2E,EAAqB,GAAG,EAAD,OACrB7H,QAAQ8H,IACZF,EAAS9kB,IAAG,iDAAC,WAAOuc,EAAS0I,GAAK,2FACR7E,EAAY8E,YAAY3I,GAAS5V,OAAO,KAAD,EAA/Doe,EAASE,GAAM,kDAChB,qDAFW,KAGZ,KAAD,EAIE,OAHCE,EAAoB,GACxBJ,EAAS/kB,KAAI,SAAColB,EAAOH,GACnBE,EAAOF,GAASG,IAAUlK,KAAQrU,QAAQyU,MAAMrX,GAAeC,aACjE,IAAG,kBACI,CACLmhB,WAAYF,IACb,4CACF,mDArBD,IA2DalF,GA1BEjH,aAAY,CAC3B5W,KAAM,MACN6W,aAXmB,CACnBzP,SAAS,GAWT0P,SAAU,CACRkG,gBAAe,SAACzZ,EAAOkQ,GACrB6D,GAAO/T,EAAOkQ,EAAOuD,QAEvB,GAEFiG,cAAe,SAACC,GACdA,EACCC,QAAQsF,GAAiBpT,SAAS,SAAC9L,EAAOkQ,GACzClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQsF,GAAiBrF,WAAW,SAAC7Z,EAAOkQ,GAC3C6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQsF,GAAiBpF,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC5C/D,EAAM6D,SAAU,CAClB,GACF,IAK6B,QC7HlB8b,ID+Hc3F,cAJV,SAACha,GAAgB,OAAKA,EAAM4f,GAAI,IAIG,SAACA,GAAG,OAAKA,CAAG,IC/HzC,WACrB,IAAIC,EAAO,IAAIjX,KACXkX,EAAOD,EAAKE,cACZC,EAAQH,EAAKI,WAAa,EAC1BC,EAAML,EAAKF,UACXQ,EAAON,EAAKO,WACZC,EAASR,EAAKS,aACdC,EAASV,EAAKW,aAQlB,OANEV,EAAOnH,KAAKC,IAAI,GAAI,IACpBoH,EAAQrH,KAAKC,IAAI,GAAI,GACrBsH,EAAMvH,KAAKC,IAAI,GAAI,GACnBuH,EAAOxH,KAAKC,IAAI,GAAI,GACpByH,EAAS1H,KAAKC,IAAI,GAAI,GACtB2H,CAEJ,GCGaE,GAAYpL,aACvB,0BAAyB,iDACzB,yHAI0F,GAHtFuB,EAAO,EAAPA,QAASC,EAAS,EAATA,UAAWC,EAAS,EAATA,UAAWC,EAAG,EAAHA,IAAK7V,EAAO,EAAPA,QAAS+V,EAAS,EAATA,UAC7CzW,EAAQ,EAARA,SAEFgE,QAAQyR,IAAI,mBAAoBW,EAASC,EAAWC,EAAWC,EAAK7V,EAAS+V,IAEzE3B,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QACzB5Q,WACA+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeC,eAAe,KAAD,EAFzDqX,EAAY,wCAOEA,EACb8K,UAAU9J,EAASC,GACnBT,KAAK,CAAEC,SAAU,IAAYgB,UAAWJ,IAAa,KAAD,GAFvDK,EAAO,OAIHvL,EAAU,KACV4U,EAAW,EAAE,KAAD,MACI,WAAZ5U,GAAmC,MAAXA,KAAoB4U,EAAW,KAAI,qBAE7DrL,OAAOC,QAAQ,CAAD,iCACV,IAAIgC,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,oBAC/Bqa,OAAOC,QAAQiC,IAAIC,eAAeH,GAAS,KAAD,IAA9DI,EAAW,SACEA,EAAYC,KAAOD,EAAYC,IAAItU,OAAS,IAC7D0I,EAAU2L,EAAYC,IAAI,GAAGC,aAE/BpT,QAAQyR,IAAI,YAAalK,EAASuL,GAAS,WAE7B,WAAZvL,EAAoB,kCAChB,IAAIwL,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,GAE3D0lB,IAAW,yCAGL/K,EAAaiC,QAAQhB,EAAW,GAAG7V,OAAM,QACvC,OAFJ8W,EAAU,OAEdC,WAAW,EAAH,QACJhD,GAASuB,KAAK,sBAAuB,CACzC0B,QAASlB,EACTsC,SAAUrC,EACV+B,aAAc5X,EACd2V,UAAWA,EACXwB,YAAaP,EACblB,QAASA,IACR,KAAD,GACgE,OAAlE1C,GAAa,CAAEC,MAAO,wBAAyBvY,KAAM,YAAa,2BAGhB,OAHgB,0BAGlEsY,GAAa,CAAEC,MAAM,GAAD,aAAYvY,KAAM,WAAY,kBAC3CijB,GAAkB,EAAD,GAAMre,IAAS,QAItC,OAJsC,UAEnC8W,GACF9W,EAASkT,GAAgB4D,EAAQ3L,OAClC,6EAEJ,qDA1DwB,ICPpB,SAASiV,KACd,IAAMpgB,EAAWC,cACThD,EAAY2R,cAAZ3R,QACFojB,EAAgB9gB,aACpB,SAACC,GAAK,OAAKA,EAAMwa,KAAKqG,MAAM,IAExBC,EAAiB/gB,aACrB,SAACC,GAAK,OAAKA,EAAMwa,KAAKsG,OAAO,IAEzBC,EAAqBhhB,aACzB,SAACC,GAAK,OAAKA,EAAM4f,IAAI/b,OAAO,IAExBmd,EAAsBjhB,aAC1B,SAACC,GAAK,OAAKA,EAAM4f,IAAIF,UAAU,IAE3B1B,EAAqBje,aACzB,SAACC,GAAK,OAAKA,EAAMqe,OAAOL,SAAS,IAE7BlH,EAAoB/W,aACxB,SAACC,GAAK,OAAKA,EAAMqe,OAAOvH,SAAS,IAE7BG,EAAoBlX,aACxB,SAACC,GAAK,OAAKA,EAAMic,QAAQgF,SAAS,IAE9B7G,EAAoBra,aACxB,SAACC,GAAK,OAAKA,EAAMmc,OAAO/B,OAAO,IAE3B8G,EAAkBnhB,aACtB,SAACC,GAAK,OAAKA,EAAMwa,KAAK2G,MAAM,IAGxBlC,EAAUve,sBAAW,iDAAC,WAAOlG,GAAU,2FACrCgG,EACJwe,GAAW,CACTpI,QAASpc,KAEX,KAAD,kBACKgG,EAAS0e,GAAiB,CAAEC,SAAU0B,KAAW,KAAD,sCACvD,mDAP0B,GAOxB,CAACA,IAEEO,EAAa1gB,sBAAW,gCAAC,wFAC7BF,EACEud,GAAkB,CAChBC,WAAW,EACXC,YAAY,EACZnH,UAAW,EACXoH,WAAY,EACZlH,cAAe,EACfmH,QAAQ,KAEV,2CACD,IAEGkD,EAAc3gB,sBAAW,iDAC7B,WAAOlG,GAAU,iFACa,OAAxB8mB,EAAe3B,KAAU,EAAD,OACtBnf,EACJigB,GAAU,CACR7J,QAASpc,EACTqc,UAAWyK,EACXxK,UAAWA,EACXC,IAAI,wBAAD,OAAiC,OAAPmK,QAAO,IAAPA,OAAO,EAAPA,EAAS5X,MAAM,EAAG,IAAG,YAAI9O,EAAE,QACxD0G,QAASzD,EACTwZ,UAAWsK,OAAOtK,MAEpB,KAAD,sCACF,mDAb4B,GAa1B,CAACA,EAAWiK,EAASzjB,EAASqZ,IAEnC,OACE,eAACoG,GAAA,EAAK,CACJ3c,KAAMyd,EACNzN,QAAS,WACP6Q,GACF,EACA,kBAAgB,oBAChB,mBAAiB,0BAAyB,SAE1C,gBAAC7X,EAAA,EAAG,CAACC,GAAI4R,GAAM,UACb,eAAC7R,EAAA,EAAG,CAACC,GAAIqU,GAAa,SACnBzD,GACCA,EAAQ/f,KAAI,SAACG,EAAY8kB,GACvB,OACE,gBAAC/V,EAAA,EAAG,CACFC,GAAI,CAAEgY,EAAG,EAAGpV,QAAS,OAAQqP,cAAe,UAAW,UAGvD,eAAClS,EAAA,EAAG,CAACC,GAAI,CAAEiE,GAAI,EAAGrB,QAAS,OAAQqP,cAAe,UAAW,SAC3D,eAAClS,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAG,+BAAiC,OAAP6S,QAAO,IAAPA,OAAO,EAAPA,EAAS5X,MAAM,EAAE,IAAG,YAAI9O,EAAE,QACvD8T,IAAI,aACJ9E,GAAIsU,OAGR,eAACxQ,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNkM,QAAS,WACPmW,EAAY7mB,GACZ4mB,GACF,EAAE,SACH,YAjBI9B,EAsBX,MAEJ,eAAC/V,EAAA,EAAG,CAACC,GAAIqU,GAAa,SACnBgD,GACCA,EAAOxmB,KAAI,SAACG,EAAY8kB,GACtB,OACE,gBAAC/V,EAAA,EAAG,CACFC,GAAI,CAAEgY,EAAG,EAAGpV,QAAS,OAAQqP,cAAe,UAAW,UAGvD,eAAClS,EAAA,EAAG,CAACC,GAAI,CAAEiE,GAAI,EAAGrB,QAAS,OAAQqP,cAAe,UAAW,SAC1DqF,EACC,eAACvX,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAY,OAAPyS,QAAO,IAAPA,OAAO,EAAPA,EAAUxB,GACfhR,IAAI,aACJ9E,GAAIsU,KAGN,eAAC2D,GAAA,EAAQ,CAACjY,GAAIsU,OAGjBiD,EACC,eAACU,GAAA,EAAQ,CAAChY,OAAO,SAEjB,eAAC6D,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNkM,QACU,OAAR8V,QAAQ,IAARA,KAAW1B,GACP,WACE+B,EAAY7mB,GACZ4mB,GACF,EACA,kBAAMnC,EAAQzkB,EAAG,EACtB,SAEQ,OAARwmB,QAAQ,IAARA,KAAW1B,GAAS,QAAU,cA7B9BA,EAkCX,UAKZ,CC1JO,SAASoC,KACd,IAAMlhB,EAAWC,cACThD,EAAY2R,cAAZ3R,QACFojB,EAAgB9gB,aACpB,SAACC,GAAK,OAAKA,EAAMwa,KAAKqG,MAAM,IAExBC,EAAiB/gB,aACrB,SAACC,GAAK,OAAKA,EAAMwa,KAAKsG,OAAO,IAEzBC,EAAqBhhB,aACzB,SAACC,GAAK,OAAKA,EAAM4f,IAAI/b,OAAO,IAExBmd,EAAsBjhB,aAC1B,SAACC,GAAK,OAAKA,EAAM4f,IAAIF,UAAU,IAE3B5I,EAAoB/W,aACxB,SAACC,GAAK,OAAKA,EAAMqe,OAAOvH,SAAS,IAE7BG,EAAoBlX,aACxB,SAACC,GAAK,OAAKA,EAAMic,QAAQgF,SAAS,IAE9BhD,EAAsBle,aAC1B,SAACC,GAAK,OAAKA,EAAMqe,OAAOJ,UAAU,IAE9BC,EAAqBne,aACzB,SAACC,GAAK,OAAKA,EAAMqe,OAAOH,UAAU,IAE9BlH,EAAwBjX,aAC5B,SAACC,GAAK,OAAKA,EAAMqe,OAAOrH,aAAa,IAEjCoD,EAAoBra,aACxB,SAACC,GAAK,OAAKA,EAAMmc,OAAO/B,OAAO,IAE3B8G,EAAkBnhB,aACtB,SAACC,GAAK,OAAKA,EAAMwa,KAAK2G,MAAM,IAGxBlC,EAAUve,sBAAW,iDAAC,WAAOlG,GAAU,2FACrCgG,EACJwe,GAAW,CACTpI,QAASpc,KAEX,KAAD,kBACKgG,EAAS0e,GAAiB,CAAEC,SAAU0B,KAAW,KAAD,sCACvD,mDAP0B,GAOxB,CAACrgB,EAAUqgB,IAERO,EAAa1gB,sBAAW,gCAAC,wFAC7BF,EACEud,GAAkB,CAChBC,WAAW,EACXC,YAAY,EACZnH,UAAW,EACXoH,WAAY,EACZlH,cAAe,EACfmH,QAAQ,KAEV,2CACD,IAEGwD,EAAejhB,sBAAW,iDAC9B,WAAOlG,GAAU,2FACTgG,EACJmW,GAAW,CACTC,QAASpc,EACTqc,UAAWqH,EACXpH,UAAWA,EACXC,IAAI,wBAAD,OAAiC,OAAPmK,QAAO,IAAPA,OAAO,EAAPA,EAAS5X,MAAM,EAAG,IAAG,YAAI9O,EAAE,QACxDwc,cAAeA,EACf9V,QAASzD,EACTwZ,UAAWsK,OAAOtK,MAEpB,KAAD,sCACF,mDAb6B,GAc9B,CAACA,EAAWiK,EAASzjB,EAASqZ,EAAWoH,EAAYlH,IAGvD,OACE,eAACkG,GAAA,EAAK,CACJ3c,KAAM0d,EACN1N,QAAS,WACP6Q,GACF,EACA,kBAAgB,oBAChB,mBAAiB,0BAAyB,SAE1C,gBAAC7X,EAAA,EAAG,CAACC,GAAI4R,GAAM,UACf,eAAC7R,EAAA,EAAG,CAACC,GAAIqU,GAAa,SACjBzD,GACCA,EAAQ/f,KAAI,SAACG,EAAY8kB,GACvB,OACE,gBAAC/V,EAAA,EAAG,CACFC,GAAI,CAAEgY,EAAG,EAAGpV,QAAS,OAAQqP,cAAe,UAAW,UAGvD,eAAClS,EAAA,EAAG,CAACC,GAAI,CAAEiE,GAAI,EAAGrB,QAAS,OAAQqP,cAAe,UAAW,SAC3D,eAAClS,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAG,+BAAiC,OAAP6S,QAAO,IAAPA,OAAO,EAAPA,EAAS5X,MAAM,EAAE,IAAG,YAAI9O,EAAE,QACvD8T,IAAI,aACJ9E,GAAIsU,OAGR,eAACxQ,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNkM,QAAS,WACPyW,EAAannB,GACb4mB,GACF,EAAE,SACH,YAjBI9B,EAsBX,MAEJ,eAAC/V,EAAA,EAAG,CAACC,GAAIqU,GAAa,SACnBgD,GACCA,EAAOxmB,KAAI,SAACG,EAAY8kB,GACtB,OACE,gBAAC/V,EAAA,EAAG,CACFC,GAAI,CAAEgY,EAAG,EAAGpV,QAAS,OAAQqP,cAAe,UAAW,UAGvD,eAAClS,EAAA,EAAG,CAACC,GAAI,CAAEiE,GAAI,EAAGrB,QAAS,OAAQqP,cAAe,UAAW,SAC1DqF,EACC,eAACvX,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAG,+BAAiC,OAAP6S,QAAO,IAAPA,OAAO,EAAPA,EAAS5X,MAAM,EAAE,IAAG,YAAI9O,EAAE,QACvD8T,IAAI,aACJ9E,GAAIsU,KAGN,eAAC2D,GAAA,EAAQ,CAACjY,GAAIsU,OAGjBiD,EACC,eAACU,GAAA,EAAQ,CAAChY,OAAO,SAEjB,eAAC6D,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNkM,QACU,OAAR8V,QAAQ,IAARA,KAAW1B,GACP,WACEqC,EAAannB,GACb4mB,GACF,EACA,kBAAMnC,EAAQzkB,EAAG,EACtB,SAEQ,OAARwmB,QAAQ,IAARA,KAAW1B,GAAS,QAAU,cA7B9BA,EAkCX,UAKZ,C,wBC7KasC,GAAQ,CACjB,CACE5J,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXqH,WAAY,GAEd,CACElG,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXqH,WAAY,GAEd,CACElG,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTsH,WAAY,EACZrH,UAAW,GAEb,CACEmB,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXqH,WAAY,GAEd,CACElG,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXqH,WAAY,GAEd,CACElG,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXqH,WAAY,GAEd,CACElG,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXqH,WAAY,GAEd,CACElG,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXqH,WAAY,IC/EL2D,GAAiBxM,aAC5B,qBAAoB,iDACpB,+GAAgB,GAAP5X,EAAO,EAAPA,SAEJ6X,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QAAQ5Q,WAAW+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeE,cAAc,KAAD,EAAnGic,EAAW,cAKQ,OAFnBoG,EAAgB,GAEhBC,EAAiB,GAAG,EAAD,QACRrG,EAAYqH,SAAS,GAAG9gB,OAAO,KAAD,GAAvC,OAANmgB,EAAM,iBACmB1G,EAAYsH,UAAUtkB,GAASuD,OAAO,KAAD,GAAxDghB,EAAU,OACPtV,EAAI,EAAE,KAAD,QAAEA,EAAIiM,KAAKsJ,IAAID,EAAY,IAAE,kCAClBvH,EAAYyH,oBAAoBzkB,EAASiP,GAAG1L,OAAO,KAAD,GAArEmhB,EAAU,OACdtB,EAAOnU,GAAK6I,KAAQ6M,UAAUD,GAAY,QAFCzV,IAAG,wBAIhD,IAASA,EAAI,EAAGA,EAAIiM,KAAKsJ,IAAID,EAAY,GAAItV,IAC3CoU,EAAQpU,GAAE,+BAA2ByU,EAAO7X,MAAM,EAAG,IAAG,YACtDuX,EAAOnU,GAAE,QAEZ,yBACM,CACLmU,SACAC,UACAK,WACD,4CACF,mDA3BmB,IAmEP7G,GA1BEjH,aAAY,CAC3B5W,KAAM,MACN6W,aANmB,CACnBzP,SAAS,GAMT0P,SAAU,CACRkG,gBAAe,SAACzZ,EAAOkQ,GACrB6D,GAAO/T,EAAOkQ,EAAOuD,QAEvB,GAEFiG,cAAe,SAACC,GACdA,EACCC,QAAQiI,GAAe/V,SAAS,SAAC9L,EAAOkQ,GACvClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQiI,GAAehI,WAAW,SAAC7Z,EAAOkQ,GACzC6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQiI,GAAe/H,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC1C/D,EAAM6D,SAAU,CAClB,GACF,IAK6B,QAEJmW,cAJV,SAACha,GAAgB,OAAKA,EAAMwa,IAAK,IAIE,SAACA,GAAI,OAAKA,CAAI,ICjE3D,SAAS6H,KAAc,IAAD,EACnB5kB,EAAY2R,cAAZ3R,QACF+C,EAAWC,cACX6hB,EAA0BviB,aAC9B,SAACC,GAAK,OAAKA,EAAMia,MAAM/C,OAAO,IAE1BqL,EAA0BxiB,aAC9B,SAACC,GAAK,OAAKA,EAAMia,MAAM9C,OAAO,IAE1BqL,EAA4BziB,aAChC,SAACC,GAAK,OAAKA,EAAMyiB,IAAID,QAAQ,IAEzBrE,EAAkBpe,aACtB,SAACC,GAAK,OAAKA,EAAMqe,OAAOF,MAAM,IAE1B0C,EAAgB9gB,aACpB,SAACC,GAAK,OAAKA,EAAMwa,KAAKqG,MAAM,IAGxB6B,EAAehiB,sBAAW,iDAC9B,WAAO4e,GAAa,2FACZ9e,EAASqhB,GAAe,CAAEpkB,QAASA,KAAY,KAAD,kBAC9C+C,EAAS0e,GAAiB,CAAEC,SAAU0B,KAAW,KAAD,kBAChDrgB,EACJud,GAAkB,CAChBC,WAAW,EACXlH,UAAWwI,EAAQ,EACnBrB,YAAY,EACZC,WAAY,EACZlH,cAAe,EACfmH,QAAQ,KAEV,KAAD,sCACF,mDAd6B,GAe9B,CAAC1gB,EAASojB,IAGN8B,EAAejiB,sBAAW,iDAC9B,WAAO4e,EAAezI,EAAmBwB,GAAmB,2FACpD7X,EAASqhB,GAAe,CAAEpkB,QAASA,KAAY,KAAD,kBAC9C+C,EAAS0e,GAAiB,CAAEC,SAAU0B,KAAW,KAAD,kBAChDrgB,EACJud,GAAkB,CAChBC,WAAW,EACXlH,UAAWwI,EAAQ,EACnBrB,YAAY,EACZC,WAAYrH,EACZG,cAAeqB,EACf8F,QAAQ,KAEV,KAAD,sCACF,uDAd6B,GAe9B,CAAC1gB,EAASojB,IAGZ,OACE,eAACtX,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTC,eAAgB,eAChByQ,SAAU,QACV,SAEwC,QAFxC,EAEoB,IAApB0F,EAASnf,OAAemf,EAAWZ,UAAK,aAAzC,EAA4CvnB,KAAI,SAAC+H,EAAMkd,GAAW,IAAD,IAChE,OACE,gBAAC/V,EAAA,EAAG,CACF6C,QAAQ,OACRC,eAAe,aACf7C,GAAI,CACFyD,GAAI,CAAEwD,GAAI,EAAGC,GAAI,GACjBnF,GAAI,CAAEkF,GAAI,EAAGC,GAAI,GACjBjD,GAAI,CAAEgD,GAAI,EAAGC,GAAI,IAEnBvC,OAAO,kBACPyU,QAAQ,uBACRC,QAAS,EAAE,UAGX,gBAACtZ,EAAA,EAAG,CACFC,GAAI,CACFyD,GAAI,CAAEwD,GAAI,MAAOC,GAAI,MAAOC,GAAI,OAAQqM,GAAI,SAE9CjL,SAAS,WACT3F,QAAQ,OACRqP,cAAc,SACdnP,WAAW,SAAQ,UAEnB,eAAC/C,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAKyU,WAAStZ,GAAIkU,KACvC,gBAACnU,EAAA,EAAG,CACF6C,QAAQ,OACRqP,cAAc,SACdnP,WAAW,SACXyF,SAAS,WACTsJ,IAAI,OAAM,UAES,KAAlBjZ,EAAKgX,SACJ,eAAC7P,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAKjM,EAAKgX,SACV5P,GAAIgU,KAGN,eAACjU,EAAA,EAAG,CAACC,GAAIgU,GAAiBlR,WAAW,SAASF,QAAQ,OAAM,SAC1D,eAACf,EAAA,EAAU,CAAC7B,GAAI8T,GAAW,SAAC,kBAGhC,eAAC/T,EAAA,EAAG,CACFC,GAAI,CACFC,OAAQ,CAAEgH,GAAI,OAAQC,GAAI,OAAQC,GAAI,SAExCvE,QAAQ,OACRC,eAAe,SACfC,WAAW,SAAQ,SAEA,KAAlBlK,EAAKgX,eAAqCvX,IAAlBO,EAAKgX,SAC5B,eAAC/N,EAAA,EAAU,CAAC7B,GAAI+T,GAAkB,SAC/Bnb,EAAKiW,cAGR,eAAChN,EAAA,EAAU,CAAC7B,GAAI+T,GAAkB,SAAC,oBAKvC,gBAACjQ,EAAA,EAAM,CACLpC,QAAS,WACPwX,EAAapD,EACf,EACAyD,SAA4B,KAAlB3gB,EAAKgX,SACf5P,GAAI,CACFuI,SAAU,WACVrI,MAAO,OACP,UAEF,eAACH,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAK2U,WAAYtZ,MAAM,SAC5C,eAAC2B,EAAA,EAAU,CACT7B,GAAIiU,GACJze,MAAOoD,EAAKgX,SAAW,QAAU,SAAS,SAEzCkJ,GACDnE,QAE+Btc,IAA7BygB,EAAchD,EAAQ,IACO,IAA7BgD,EAAchD,EAAQ,GAEpBgD,EAAchD,EAAQ,GAAKiD,EAAcjD,EAAQ,GAC/C,SACAgD,EAAchD,EAAQ,KAAOiD,EAAcjD,EAAQ,GACnD,OACA,QACqB,KAAvBld,EAAK8V,eACkB,OAAvB9V,EAAK8V,oBACkBrW,IAAvBO,EAAK8V,cACiB,KAAtB9V,EAAK0W,aACH,QAAO,UACa,QADb,EACJ1W,EAAK0W,oBAAY,aAAjB,EAAmBxP,MACpB,EACA,GACD,cAAuB,QAAvB,EAAMlH,EAAK0W,oBAAY,aAAjB,EAAmBxP,OAAO,IACnC,yBAKZ,gBAACC,EAAA,EAAG,CACFwI,SAAS,WACT3F,QAAQ,OACRqP,cAAc,SACdnP,WAAW,SAAQ,UAEnB,eAAC/C,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAKyU,WAAStZ,GAAIkU,KACvC,gBAACnU,EAAA,EAAG,CACF6C,QAAQ,OACRqP,cAAc,SACdnP,WAAW,SACXyF,SAAS,WACTsJ,IAAI,OAAM,UAEU,KAAnBjZ,EAAK6V,gBAAuCpW,IAAnBO,EAAK6V,UAC7B,eAAC1O,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAKjM,EAAK6V,UACVzO,GAAIgU,KAGN,eAACjU,EAAA,EAAG,CAACC,GAAIgU,GAAiBpR,QAAQ,OAAOE,WAAW,SAAQ,SAC1D,eAACjB,EAAA,EAAU,CAAC7B,GAAI8T,GAAW,SAAC,kBAGhC,eAAC/T,EAAA,EAAG,CACFC,GAAI,CACFC,OAAQ,CAAEgH,GAAI,OAAQC,GAAI,OAAQC,GAAI,SAExCvE,QAAQ,OACRC,eAAe,SACfC,WAAW,SAAQ,SAEC,KAAnBlK,EAAK6V,gBAAuCpW,IAAnBO,EAAK6V,UAC7B,eAAC5M,EAAA,EAAU,CAAC7B,GAAI+T,GAAkB,SAC/Bnb,EAAK+V,eAGR,eAAC9M,EAAA,EAAU,CAAC7B,GAAI+T,GAAkB,SAAC,oBAKvC,gBAACjQ,EAAA,EAAM,CACLyV,SAEsB,KAAlB3gB,EAAKgX,UACkB,OAAvBhX,EAAK8V,oBACkBrW,IAAvBO,EAAK8V,cAKThN,QAAS,WACPyX,EAAarD,EAAOld,EAAKyU,UAAWzU,EAAKiW,YAC3C,EACA7O,GAAI,CACFuI,SAAU,WACVrI,MAAO,OACP,UAEF,eAACH,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAK2U,WAAYtZ,MAAM,SAC5C,eAAC2B,EAAA,EAAU,CACT7B,GAAIiU,GACJze,MACEujB,GAAiBA,EAAcjD,EAAQ,GACnC,QACA,SACL,SAEAiD,GACDpE,QAE+Btc,IAA7B0gB,EAAcjD,EAAQ,IACO,IAA7BiD,EAAcjD,EAAQ,GAEpBgD,EAAchD,EAAQ,GAAKiD,EAAcjD,EAAQ,GAC/C,QACAgD,EAAchD,EAAQ,KAAOiD,EAAcjD,EAAQ,GACnD,OACA,SACqB,KAAvBld,EAAK8V,eACkB,OAAvB9V,EAAK8V,oBACkBrW,IAAvBO,EAAK8V,cACL,QACA,2BA7KPoH,EAoLX,KAGN,C,cClQO,SAAS2D,KACd,IAAMziB,EAAWC,cACThD,EAAY2R,cAAZ3R,QAEF6kB,EAA0BviB,aAC9B,SAACC,GAAK,OAAKA,EAAMia,MAAM/C,OAAO,IAE1BqL,EAA0BxiB,aAC9B,SAACC,GAAK,OAAKA,EAAMia,MAAM9C,OAAO,IAK1BgH,GAH4Bpe,aAChC,SAACC,GAAK,OAAKA,EAAMyiB,IAAID,QAAQ,IAEPziB,aACtB,SAACC,GAAK,OAAKA,EAAMqe,OAAOF,MAAM,KAE1B0C,EAAgB9gB,aACpB,SAACC,GAAK,OAAKA,EAAMwa,KAAKqG,MAAM,IAGxB6B,EAAehiB,sBAAW,iDAAC,WAAO4e,GAAa,2FAC7C9e,EACJud,GAAkB,CAChBC,WAAW,EACXlH,UAAWwI,EAAQ,EACnBrB,YAAY,EACZC,WAAY,EACZlH,cAAe,EACfmH,QAAQ,KAEV,KAAD,kBACK3d,EAASqhB,GAAe,CAAEpkB,QAASA,KAAY,KAAD,kBAC9C+C,EAAS0e,GAAiB,CAAEC,SAAU0B,KAAW,KAAD,sCACvD,mDAb+B,GAa7B,CAACpjB,EAASojB,IAEP8B,EAAejiB,sBAAW,iDAC9B,WAAO4e,EAAezI,EAAmBwB,GAAmB,2FACpD7X,EACJud,GAAkB,CAChBC,WAAW,EACXlH,UAAWwI,EAAQ,EACnBrB,YAAY,EACZC,WAAYrH,EACZG,cAAeqB,EACf8F,QAAQ,KAEV,KAAD,kBACK3d,EAASqhB,GAAe,CAAEpkB,QAASA,KAAY,KAAD,kBAC9C+C,EAAS0e,GAAiB,CAAEC,SAAU0B,KAAW,KAAD,sCACvD,uDAd6B,GAe9B,CAACpjB,EAASojB,IAGZ,OACE,eAACtX,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTC,eAAgB,eAChByQ,SAAU,QACV,SAED8E,IACCA,GAAMvnB,KAAI,SAAC+H,EAAMkd,GAAW,IAAD,IACzB,KAAIA,EAAQ,GACZ,OACE,gBAAC/V,EAAA,EAAG,CACF6C,QAAQ,OACRC,eAAe,aACf7C,GAAI,CACFyD,GAAI,CAAEwD,GAAI,EAAGC,GAAI,GACjBnF,GAAI,CAAEkF,GAAI,EAAGC,GAAI,GACjBjD,GAAI,CAAEgD,GAAI,EAAGC,GAAI,IAEnBvC,OAAO,kBACPyU,QAAQ,uBACRC,QAAS,EAAE,UAGX,gBAACtZ,EAAA,EAAG,CACFC,GAAI,CACFyD,GAAI,CAAEwD,GAAI,MAAOC,GAAI,MAAOC,GAAI,OAAQqM,GAAI,SAE9CjL,SAAS,WACT3F,QAAQ,OACRqP,cAAc,SACdnP,WAAW,SAAQ,UAEnB,eAAC/C,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAKyU,WAAStZ,GAAIkU,KACvC,gBAACnU,EAAA,EAAG,CACF6C,QAAQ,OACRqP,cAAc,SACd1J,SAAS,WACTsJ,IAAI,OACJ/O,WAAW,SAAQ,UAEA,KAAlBlK,EAAKgX,SACJ,eAAC7P,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAKjM,EAAKgX,SACV5P,GAAIgU,KAGN,eAACjU,EAAA,EAAG,CACFC,GAAIgU,GACJlR,WAAW,SACXF,QAAQ,OAAM,SAEd,eAAC,KAAQ,CACPF,OACE,eAACb,EAAA,EAAU,CAAC7B,GAAI8T,GAAW,SAAC,gBAE9B4F,OAAQ,QAed,eAAC3Z,EAAA,EAAG,CACFC,GAAI,CACFC,OAAQ,CAAEgH,GAAI,OAAQC,GAAI,OAAQC,GAAI,SAExCvE,QAAQ,OACRC,eAAe,SACfC,WAAW,SAAQ,SAEA,KAAlBlK,EAAKgX,eAAqCvX,IAAlBO,EAAKgX,SAC5B,eAAC/N,EAAA,EAAU,CAAC7B,GAAI+T,KAIhB,eAAClS,EAAA,EAAU,CAAC7B,GAAI+T,GAAkB,SAAC,oBAKvC,gBAACjQ,EAAA,EAAM,CACLpC,QAAS,WACPwX,EAAapD,EACf,EACAyD,SAA4B,KAAlB3gB,EAAKgX,SACf5P,GAAI,CACFuI,SAAU,WACVrI,MAAO,OACP,UAEF,eAACH,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAK2U,WAAYtZ,MAAM,SAC5C,eAAC2B,EAAA,EAAU,CACT7B,GAAIiU,GACJze,MAAOoD,EAAKgX,SAAW,QAAU,SAAS,SAEzCkJ,GACDnE,QAE+Btc,IAA7BygB,EAAchD,EAAQ,IACO,IAA7BgD,EAAchD,EAAQ,GAEpBgD,EAAchD,EAAQ,GAAKiD,EAAcjD,EAAQ,GAC/C,SACAgD,EAAchD,EAAQ,KAAOiD,EAAcjD,EAAQ,GACnD,OACA,QACqB,KAAvBld,EAAK8V,eACkB,OAAvB9V,EAAK8V,oBACkBrW,IAAvBO,EAAK8V,cACiB,KAAtB9V,EAAK0W,aACH,QAAO,UACa,QADb,EACJ1W,EAAK0W,oBAAY,aAAjB,EAAmBxP,MACpB,EACA,GACD,cAAuB,QAAvB,EAAMlH,EAAK0W,oBAAY,aAAjB,EAAmBxP,OAAO,IACnC,yBAKZ,gBAACC,EAAA,EAAG,CACFwI,SAAS,WACT3F,QAAQ,OACRqP,cAAc,SACdnP,WAAW,SAAQ,UAEnB,eAAC/C,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAKyU,WAAStZ,GAAIkU,KACvC,gBAACnU,EAAA,EAAG,CACF6C,QAAQ,OACRE,WAAW,SACXmP,cAAc,SACd1J,SAAS,WACTsJ,IAAI,OAAM,UAEU,KAAnBjZ,EAAK6V,gBAAuCpW,IAAnBO,EAAK6V,UAC7B,eAAC1O,EAAA,EAAG,CACF+B,UAAU,MACV+C,IAAKjM,EAAK6V,UACVzO,GAAIgU,KAGN,eAACjU,EAAA,EAAG,CACFC,GAAIgU,GACJpR,QAAQ,OACRE,WAAW,SAAQ,SAEnB,eAAC,KAAQ,CACPJ,OACE,eAACb,EAAA,EAAU,CAAC7B,GAAI8T,GAAW,SAAC,gBAE9B4F,OAAQ,QAed,eAAC3Z,EAAA,EAAG,CACFC,GAAI,CACFC,OAAQ,CAAEgH,GAAI,OAAQC,GAAI,OAAQC,GAAI,SAExCvE,QAAQ,OACRC,eAAe,SACfC,WAAW,SAAQ,SAEnB,eAACjB,EAAA,EAAU,CAAC7B,GAAI+T,GAAkB,SAAC,oBAIrC,gBAACjQ,EAAA,EAAM,CACLyV,SAEsB,KAAlB3gB,EAAKgX,UACkB,OAAvBhX,EAAK8V,oBACkBrW,IAAvBO,EAAK8V,cAKThN,QAAS,WACPyX,EAAarD,EAAOld,EAAKyU,UAAWzU,EAAKiW,YAC3C,EACA7O,GAAI,CACFuI,SAAU,WACVrI,MAAO,OACP,UAEF,eAACH,EAAA,EAAG,CAAC+B,UAAU,MAAM+C,IAAK2U,WAAYtZ,MAAM,SAC5C,eAAC2B,EAAA,EAAU,CACT7B,GAAIiU,GACJze,MACEujB,GAAiBA,EAAcjD,EAAQ,GACnC,QACA,SACL,SAEAiD,GACDpE,QAE+Btc,IAA7B0gB,EAAcjD,EAAQ,IACO,IAA7BiD,EAAcjD,EAAQ,GAEpBgD,EAAchD,EAAQ,GAAKiD,EAAcjD,EAAQ,GAC/C,QACAgD,EAAchD,EAAQ,KAAOiD,EAAcjD,EAAQ,GACnD,OACA,SACqB,KAAvBld,EAAK8V,eACkB,OAAvB9V,EAAK8V,oBACkBrW,IAAvBO,EAAK8V,cACL,QACA,2BA/MPoH,EAsNX,KAGR,CCjTO,IAAM6D,GAAkB9N,aAC7B,uBAAsB,iDACtB,+HACuC,OAD9BmN,EAAQ,EAARA,SACHY,EAA+B,GAAG,EAAD,OAC/BrO,GACHc,IAAI,gBACJC,MAAK,SAACC,GACLqN,EAAcrN,EAAS3T,IACzB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,EAEJ,IADIsf,EAAa,EACR3W,EAAI,EAAGA,EAAI0W,EAAY/f,OAAQqJ,IACtC2W,EAAa1K,KAAK2K,IAAIF,EAAY1W,GAAGsL,QAASqL,GAEhD,IAAS3W,EAAI,EAAGA,EAAIiM,KAAK2K,IAAI,EAAGD,EAAa,GAAI3W,IAC3C6W,EAA6B,CAC/BvL,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXyB,MAAM,GAERkK,EAASxP,KAAKuQ,GAGhB,IADIC,EAAS,EACJ9W,EAAI,EAAGA,EAAIiM,KAAK2K,IAAI,EAAGD,EAAa,GAAI3W,IAC5CA,EAAI,KAAyB,QAAxB,EAAK0W,EAAYI,UAAO,aAAnB,EAAqBxL,WAChCwK,EAAS9V,GAAGsL,QAAUoL,EAAYI,GAAQxL,QAC1CwK,EAAS9V,GAAG0M,SAA8B,QAAtB,EAAGgK,EAAYI,UAAO,aAAnB,EAAqBpK,SAC5CoJ,EAAS9V,GAAGoM,aAAkC,QAAtB,EAAGsK,EAAYI,UAAO,aAAnB,EAAqB1K,aAChD0J,EAAS9V,GAAG2L,YAAiC,QAAtB,EAAG+K,EAAYI,UAAO,aAAnB,EAAqBnL,YAC/CmK,EAAS9V,GAAGmK,UAA+B,QAAtB,EAAGuM,EAAYI,UAAO,aAAnB,EAAqB3M,UAC7C2L,EAAS9V,GAAGkK,QAA6B,QAAtB,EAAGwM,EAAYI,UAAO,aAAnB,EAAqB5M,QAC3C4L,EAAS9V,GAAGuL,UAA+B,QAAtB,EAAGmL,EAAYI,UAAO,aAAnB,EAAqBvL,UAC7CuK,EAAS9V,GAAGwL,cAAmC,QAAtB,EAAGkL,EAAYI,UAAO,aAAnB,EAAqBtL,cACjDsK,EAAS9V,GAAGyL,aAAkC,QAAtB,EAAGiL,EAAYI,UAAO,aAAnB,EAAqBrL,aAChDqL,KAEH,yBACM,CACLhB,aACD,4CACF,mDAhDqB,IA+DlBiB,GAAYpQ,aAAY,CAC5B5W,KAAM,OACN6W,aAXE,CACFzP,SAAS,EACT2e,SAAU,IAUVjP,SAAU,CACRmQ,eAAc,SAAC1jB,EAAOkQ,GACpB,IAAIyT,EAA6B,CAC/B3L,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXyB,MAAM,GAELpI,EAAOuD,QAAQmQ,WAAa,EAC7BD,EAAY3L,QAAU9H,EAAOuD,QAAQmQ,WAErCD,EAAczT,EAAOuD,QAEvB,IAAM6L,EAAQtf,EAAMwiB,SAASqB,WAC3B,SAACzhB,GAAI,OAAKA,EAAK4V,UAAY2L,EAAY3L,OAAO,IAE7CsH,EAAQ,EACTtf,EAAMwiB,SAASmB,EAAY3L,QAAU,GAAK2L,EAE1C3jB,EAAMwiB,SAASlD,GAASqE,EAgB1B,IAbA,IAAIN,EAAa,EACbS,EAA2B,CAC7B9L,QAAS,EACToB,SAAU,GACVnB,UAAW,GACXa,aAAc,GACdZ,cAAe,GACfG,YAAa,EACbF,aAAc,EACdvB,QAAS,EACTC,UAAW,EACXyB,MAAM,GAEA5L,EAAI,EAAGA,EAAI1M,EAAMwiB,SAASnf,OAAQqJ,IACxC2W,EAAa1K,KAAK2K,IAAItjB,EAAMwiB,SAAS9V,GAAGsL,QAASqL,GAEnD,IAAI,IAAI3W,EAAI,EAAGA,EAAIiM,KAAK2K,IAAI,EAAGD,EAAa,GAAI3W,SACrB7K,IAAtB7B,EAAMwiB,SAAS9V,KAChB1M,EAAMwiB,SAAS9V,GAAKoX,EAG1B,GAGFpK,cAAe,SAACC,GACdA,EACGC,QAAQuJ,GAAgBrX,SAAS,SAAC9L,EAAOkQ,GACxClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQuJ,GAAgBtJ,WAAW,SAAC7Z,EAAOkQ,GAC1C6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQuJ,GAAgBrJ,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC3C/D,EAAM6D,SAAU,CAClB,GACJ,IAKa4f,MAAiB,QAEjBC,GAAmBD,GAAU3P,QAA7B4P,eC1IFK,ID4Ic/J,cANV,SAACha,GAAgB,OAAKA,EAAMyiB,GAAI,IAMG,SAACA,GAAG,OAAKA,CAAG,IC5I/BpN,aAC/B,2BAA0B,iDAC1B,+FAAmB,OAAV2O,EAAU,EAAVA,WAAU,SACXjP,GACHc,IAAI,eACJC,MAAK,SAACC,GACLiO,EAAajO,EAAS3T,IACxB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,2BAEG,CACLigB,eACD,2CACF,mDAdyB,KA6BtBC,GAAc5Q,aAAY,CAC9B5W,KAAM,SACN6W,aAXE,CACFzP,SAAS,EACTmgB,WAAY,IAUZzQ,SAAU,CACR2Q,iBAAgB,SAAClkB,EAAOkQ,GACtB,IAAIyT,EAA+BzT,EAAOuD,QAE1CzT,EAAMgkB,WAAWG,QAAQR,EAC3B,GAEFjK,cAAe,SAACC,GACdA,EACGC,QAAQmK,GAAkBjY,SAAS,SAAC9L,EAAOkQ,GAC1ClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQmK,GAAkBlK,WAAW,SAAC7Z,EAAOkQ,GAC5C6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQmK,GAAkBjK,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC7C/D,EAAM6D,SAAU,CAClB,GACJ,IAKaogB,MAAmB,QAEnBC,GAAqBD,GAAYnQ,QAAjCoQ,iBC3DFE,ID6DcpK,cANV,SAACha,GAAgB,OAAKA,EAAMqkB,MAAO,IAMA,SAACA,GAAM,OAAKA,CAAM,IC7DrChP,aAC/B,2BAA0B,iDAC1B,+FAAmB,OAAVoD,EAAU,EAAVA,WAAU,SACX1D,GACHc,IAAI,eACJC,MAAK,SAACC,GACL0C,EAAa1C,EAAS3T,IACxB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,2BAEG,CACL0U,eACD,2CACF,mDAdyB,KA6BtB6L,GAAcjR,aAAY,CAC9B5W,KAAM,SACN6W,aAXE,CACFzP,SAAS,EACT4U,WAAY,IAUZlF,SAAU,CACRgR,iBAAgB,SAACvkB,EAAOkQ,GACtB,IAAIyT,EAA+BzT,EAAOuD,QAE1CzT,EAAMyY,WAAW0L,QAAQR,GACzB3jB,EAAMyY,WAAW+L,KACnB,GAEF9K,cAAe,SAACC,GACdA,EACGC,QAAQwK,GAAkBtY,SAAS,SAAC9L,EAAOkQ,GAC1ClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQwK,GAAkBvK,WAAW,SAAC7Z,EAAOkQ,GAC5C6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQwK,GAAkBtK,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC7C/D,EAAM6D,SAAU,CAClB,GACJ,IAKaygB,MAAmB,QAEnBC,GAAqBD,GAAYxQ,QAAjCyQ,iBC5DFE,ID8DczK,cANV,SAACha,GAAgB,OAAKA,EAAM2D,MAAO,IAMA,SAACA,GAAM,OAAKA,CAAM,IC9DrC0R,aAC/B,2BAA0B,iDAC1B,+FAAmB,OAAV4D,EAAU,EAAVA,WAAU,SACXlE,GACHc,IAAI,eACJC,MAAK,SAACC,GACLkD,EAAalD,EAAS3T,IACxB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,2BACG,CACLkV,eACD,2CACF,mDAbyB,KA4BtByL,GAAcrR,aAAY,CAC9B5W,KAAM,SACN6W,aAXE,CACFzP,SAAS,EACToV,WAAY,IAUZ1F,SAAU,CACRoR,iBAAgB,SAAC3kB,EAAOkQ,GACtB,IAAIyT,EAA+BzT,EAAOuD,QAEpC6L,EAAQtf,EAAMiZ,WAAW4K,WAC7B,SAACzhB,GAAI,OAAKA,EAAKlB,UAAYyiB,EAAYziB,OAAO,IAE7Coe,EAAQ,EACTtf,EAAMiZ,WAAWjG,KAAK2Q,GAEtB3jB,EAAMiZ,WAAWqG,GAASqE,CAE9B,GAEFjK,cAAe,SAACC,GACdA,EACGC,QAAQ6K,GAAkB3Y,SAAS,SAAC9L,EAAOkQ,GAC1ClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQ6K,GAAkB5K,WAAW,SAAC7Z,EAAOkQ,GAC5C6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQ6K,GAAkB3K,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC7C/D,EAAM6D,SAAU,CAClB,GACJ,IAKa6gB,MAAmB,QAEnBC,GAAqBD,GAAY5Q,QAAjC6Q,iBC+CAC,ID7CY5K,cANV,SAACha,GAAgB,OAAKA,EAAMyiB,GAAI,IAMG,SAACA,GAAG,OAAKA,CAAG,IC1D1C,WACpB,IAAMF,EAA0BxiB,aAC9B,SAACC,GAAK,OAAKA,EAAMia,MAAM9C,OAAO,IAG1B3W,EAAWC,cAEjByC,qBAAU,WACJqf,IACF/hB,EACEud,GAAkB,CAChBI,QAAQ,EACRH,WAAW,EACXC,YAAY,EACZnH,UAAW,EACXoH,WAAY,EACZlH,cAAe,KAGnB5P,WAAU,gCAAC,wFAC0D,OAAnE2N,GAAS+F,OAAO,uBAAD,OAAwByH,EAAclf,OAAS,IAAK,SAE7D7C,EACJud,GAAkB,CAChBI,QAAQ,EACRH,WAAW,EACXC,YAAY,EACZnH,UAAW,EACXoH,WAAY,EACZlH,cAAe,KAEjB,KAAD,sCACA,KAEP,GAAG,CAACuL,IAEJ,IAAIrN,EAASC,aAAGL,IA2BhB,OAzBA5R,qBAAU,WACRgS,EAAO2P,GAAG,aAAa,SAACziB,GACtB5B,EAASkjB,GAAethB,GAC1B,GACF,GAAG,IAEHc,qBAAU,WACRgS,EAAO2P,GAAG,eAAe,SAACziB,GACxB5B,EAAS0jB,GAAiB9hB,GAC5B,GACF,GAAG,IAEHc,qBAAU,WACRgS,EAAO2P,GAAG,eAAe,SAACziB,GACxB5B,EAAS+jB,GAAiBniB,GAC5B,GACF,GAAG,IAEHc,qBAAU,WACRgS,EAAO2P,GAAG,eAAe,SAACziB,GACxB5B,EAASmkB,GAAiBviB,GAC5B,GACF,GAAG,IAID,gBAACmH,EAAA,EAAG,CACFC,GAAI,CACFwE,gBAAiB,yBACjB8W,SAAU,MACV1W,GAAI,CAAEqC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,GAC/BD,GAAI,CAAEtM,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,IAC/B,UAEF,eAAC3R,EAAA,EAAU,CACT+G,WAAW,YACX5I,GAAI,CACFgC,SAAU,CAAEiF,GAAI,OAAQC,GAAI,QAC5B1R,MAAO,QACPmc,UAAW,SACXwB,GAAI,CAAElM,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,IAC/B,SACH,oCAGD,eAACqF,GAAU,IACX,eAAChX,EAAA,EAAU,CACT+G,WAAW,YACX5I,GAAI,CACFgC,SAAU,CAAEiF,GAAI,OAAQC,GAAI,QAC5B1R,MAAO,QACPmc,UAAW,SACXwB,GAAI,CAAElM,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,IAC/B,SACH,sCAGD,eAACiG,GAAO,IAER,eAACrC,GAAW,IACZ,eAACc,GAAY,MAGnB,GC7EeqD,GAlCF,WACX,OACE,gBAACxb,EAAA,EAAG,CAACC,GAAI,CAAEwE,gBAAiB,uBAAwB,UAClD,eAAC,GAAM,IACP,eAAC3C,EAAA,EAAU,CACTkC,QAAQ,KACR4N,UAAU,SACV/I,WAAW,YACXpT,MAAM,QACNwK,GAAI,CACFgC,SAAU,CAAEiF,GAAI,OAAQE,GAAI,OAAQqM,GAAI,QACxC5O,GAAI,OACJX,GAAI,QACJ,SACH,0BAGD,eAAC,GAAO,IACR,eAAClE,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTqP,cAAe,CAAEhL,GAAI,SAAUkN,GAAI,OACnCtR,eAAgB,eAChB2Y,GAAI,CAAEvU,GAAI,EAAGC,GAAI,IACjB,SAEF,eAACnH,EAAA,EAAG,UACF,eAAC,GAAa,UAKxB,ECvBa0b,GAAe5P,aAC1B,wBAAuB,iDAEvB,qHAAqD,GAA5CnU,EAAO,EAAPA,QAASgkB,EAAM,EAANA,OAA2B1kB,EAAQ,EAARA,UAEvC8U,OAAO,CAAD,oBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,iCACnCH,OAAOC,QACzB5Q,WACA+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeC,eAAe,KAAD,EAF7C,OAAZqX,EAAY,gBAGcN,OAAOC,QAC9B5Q,WACA+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeG,oBAAoB,KAAD,EAF9D0mB,EAAiB,eAQM,OAFvBC,EAAcpnB,SAASknB,GAAQ,EAAD,QAEhC1gB,QAAQyR,IAAImP,GAAa,UACPD,EACflG,QAAQ3gB,GAAeC,aAAc6mB,GACrChP,KAAK,CAAEC,SAAU,MAAa,KAAD,GAFhCgP,EAAS,OAGLtZ,EAAU,KAAK,KAAD,MACC,WAAZA,GAAmC,MAAXA,EAAe,qBACxCuJ,OAAOC,QAAQ,CAAD,iCACUD,OAAOC,QAAQiC,IAAIC,eAC3C4N,GACA,KAAD,GAFK3N,EAAW,OAGjB3L,EAAU2L,EAAYC,IAAI,GAAGC,YAAY,WAE3B,WAAZ7L,EAAoB,kCAChB,IAAIwL,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,4CAI7C2a,EACb0P,MAAMF,GACNhP,KAAK,CAAEC,SAAU,MAAa,KAAD,GAFhCiB,EAAO,OAIPvL,EAAU,KAAK,WACI,WAAZA,GAAmC,MAAXA,EAAe,qBACxCuJ,OAAOC,QAAQ,CAAD,iCACUD,OAAOC,QAAQiC,IAAIC,eAAeH,GAAS,KAAD,GAA9DI,EAAW,OACjB3L,EAAU2L,EAAYC,IAAI,GAAGC,YAAY,WAE3B,WAAZ7L,EAAoB,kCAChB,IAAIwL,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,4CAGvD8Z,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,YAAa6O,EACb5O,YAAa,EACbL,QAAS,KACR,KAAD,qCAIe,OAJf,2BAIF3R,QAAQyR,IAAI,EAAD,IAAM,kBACV4I,GAAkB,EAAD,GAAMre,IAAS,6GAI1C,qDA9DsB,IAsEZ+kB,GAAiBlQ,aAC5B,4BAA2B,iDAE3B,+GAAuD,GAA9C6P,EAAM,EAANA,OAAQhkB,EAAO,EAAPA,QAA8BV,EAAQ,EAARA,UAEzC8U,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QACzB5Q,WACA+Q,GAAGH,KAAQrU,QAAQyU,MAAMrX,GAAeC,eAAe,KAAD,EAFzDqX,EAAY,cAMkB,OAA9BwP,EAAcpnB,SAASknB,GAAQ,EAAD,iBAEhBtP,EACb4P,QAAQJ,GACRhP,KAAK,CAAEC,SAAU,MAAa,KAAD,GAFhCiB,EAAO,OAIHvL,EAAU,KAAK,KAAD,MACC,WAAZA,GAAmC,MAAXA,EAAe,qBACxCuJ,OAAOC,QAAQ,CAAD,iCACUD,OAAOC,QAAQiC,IAAIC,eAAeH,GAAS,KAAD,GAA9DI,EAAW,OACjB3L,EAAU2L,EAAYC,IAAI,GAAGC,YAAY,WAE3B,WAAZ7L,EAAoB,kCAChB,IAAIwL,SAAQ,SAACtc,GAAO,OAAKmM,WAAWnM,EAAS,IAAK,IAAE,KAAD,4CAIvD8Z,GAASuB,KAAK,uBAAwB,CAC1CpV,QAASA,EACTqV,aAA4B,EAAf6O,EACb5O,YAAa,EACbL,QAAS,KACR,KAAD,qCAIe,OAJf,0BAIF3R,QAAQyR,IAAI,EAAD,IAAM,kBACV4I,GAAkB,EAAD,GAAMre,IAAS,4GAI1C,qDA3C0B,IAqFdilB,GAjCIpS,aAAY,CAC7B5W,KAAM,QACN6W,aARmB,CACnBzP,SAAS,GAQT0P,SAAU,CACRkG,gBAAe,SAACzZ,EAAOkQ,GACrB,GAGJwJ,cAAe,SAACC,GACdA,EACGC,QAAQqL,GAAanZ,SAAS,SAAC9L,EAAOkQ,GACrClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQqL,GAAapL,WAAW,SAAC7Z,EAAOkQ,GACvClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQqL,GAAanL,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MACxC/D,EAAM6D,SAAU,CAClB,IACC+V,QAAQ2L,GAAezZ,SAAS,SAAC9L,EAAOkQ,GACvClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQ2L,GAAe1L,WAAW,SAAC7Z,EAAOkQ,GACzClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQ2L,GAAezL,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC1C/D,EAAM6D,SAAU,CAClB,GACJ,IAK+B,QCtK3B6hB,IDwKqB1L,cAJV,SAACha,GAAgB,OAAKA,EAAM2lB,KAAM,IAIC,SAACA,GAAK,OAAKA,CAAK,ICxK7C,CACrB3mB,MAAO,UACPwM,SAAU,CAAEiF,GAAI,OAAQC,GAAI,QAC5BtC,GAAI,IAGAwX,GAAe,CACnB5mB,MAAO,QACPwM,SAAU,CAAEiF,GAAI,OAAQC,GAAI,SAGxBmV,GAAmB,CACvB3K,SAAU,CAAEzK,GAAI,MAAOC,GAAI,OAC3BoU,SAAU,CAAErU,GAAI,MAAOC,GAAI,QAC3BlF,SAAU,CAAEiF,GAAI,OAAQC,GAAI,QAC5B1R,MAAO,QACPgP,gBAAiB,UACjBoE,WAAY,YACZ,WAAY,CAAEpE,gBAAiB,UAAW8X,QAAS,KA4MtCC,GAzMG,WAChB,IAAQtoB,EAAY2R,cAAZ3R,QACR,EAAoCuJ,mBAAS,IAAG,mBAAzCgf,EAAW,KAAEC,EAAY,KAChC,EAAuCjf,mBAAS,IAAG,mBAA5Ckf,EAAa,KAAEC,EAAa,KAC7B3lB,EAAWC,cAEb8V,EAAsBxW,aACxB,SAACC,GAAK,OAAKA,EAAMmc,OAAO5F,WAAW,IAE/ByF,EAAgBjc,aACpB,SAACC,GAAK,OAAKA,EAAMic,QAAQvD,aAAa,IAEpCG,EAAqB9Y,aACvB,SAACC,GAAK,OAAKA,EAAMmc,OAAOtD,UAAU,IAE9BuN,EAAoBrmB,aACxB,SAACC,GAAK,OAAKA,EAAMic,QAAQmK,SAAS,IAGd,aAWrB,OAXqB,kCAAtB,6FACMpoB,SAASooB,GAAapoB,SAASgoB,IAAY,gBACmB,OAAhEjN,MAAM,0DAA0D,0CAG5DvY,EACJykB,GAAa,CACXC,OAAQc,EACR9kB,QAASzD,KAEX,KAAD,uCACF,sBAEuB,aAWvB,OAXuB,kCAAxB,6FACM8Y,EAAcvY,SAASkoB,IAAc,gBACe,OAAtDnN,MAAM,gDAAgD,0CAGlDvY,EACJ+kB,GAAe,CACbL,OAAQgB,EACRhlB,QAASzD,KAEX,KAAD,uCACF,sBAED,OACE,gBAAC8L,EAAA,EAAG,CACFC,GAAI,CACFE,MAAO,CAAE+G,GAAI,QAASC,GAAI,QAASC,GAAI,SACvC0V,QAAS,QACT,UAEF,gBAAC9c,EAAA,EAAG,CACFC,GAAI,CACFwE,gBAAiB,UACjB+O,GAAI,CAAEtM,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,GAC/BJ,GAAI,GACJ,UAEF,eAACvR,EAAA,EAAU,CACT+G,WAAW,YACX+I,UAAU,SACVnc,MAAM,UACNwK,GAAI,CACFgC,SAAU,CAAEiF,GAAI,OAAQC,GAAI,OAAQC,GAAI,OAAQqM,GAAI,QACpDL,GAAI,EACJC,GAAI,CAAEnM,GAAI,EAAGC,GAAI,GACjBmM,GAAI,OACJpP,GAAI,GACJ,SACH,eAGD,eAACpC,EAAA,EAAU,CACT7B,GAAIoc,GAAa,SAClB,gEAGD,eAACva,EAAA,EAAU,CACT+G,WAAW,YACX5I,GAAI,CACFxK,MAAO,UACPwM,SAAU,CAAEiF,GAAI,OAAQC,GAAI,QAC5BiM,GAAI,CAAElM,GAAI,GACV6V,GAAI,CAAE7V,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,IAC/B,SACH,iCAGD,eAAC3R,EAAA,EAAU,CACT7B,GAAIoc,GAAa,SAClB,wHAID,eAACva,EAAA,EAAU,CACT7B,GAAIoc,GAAa,SAClB,uBAIH,gBAACrc,EAAA,EAAG,CACFC,GAAI,CACF4C,QAAS,OACTC,eAAgB,gBAChByQ,SAAU,OACVxQ,WAAY,aACZqQ,GAAI,CAAElM,GAAI,EAAGC,GAAI,GACjBkM,GAAI,CAAEnM,GAAI,EAAGC,GAAI,GACjB1C,gBAAiB,WACjB,UAEF,gBAACzE,EAAA,EAAG,WACF,eAAC+D,EAAA,EAAM,CACL9D,GAAIqc,GACJ3a,QAlGR,WAEoB,gCAgGK,SAClB,eAGD,wBACA,eAACkS,GAAA,EAAS,CACR7P,QAAQ,WACR3R,KAAK,SACLwP,KAAK,QACL5B,GAAI,CAAExK,MAAO,QAAS0K,MAAO,OAAQ0E,GAAI,GACzCnJ,MAAO+gB,EACP3I,SAAU,SAACziB,GACTqrB,EAAarrB,EAAEsR,OAAOjH,MACxB,IAEF,gBAACoG,EAAA,EAAU,CAAC7B,GAAIkc,GAAe,UAAC,gBAChBnP,GAA4B,EAAE,oBAGhD,gBAAChN,EAAA,EAAG,WACF,eAAC+D,EAAA,EAAM,CACL9D,GAAIqc,GACJ3a,QA3GT,WAEuB,gCAyGK,SACpB,iBAGD,wBACA,eAACkS,GAAA,EAAS,CACR7P,QAAQ,WACRnC,KAAK,QACLxP,KAAK,SACL4N,GAAI,CAAExK,MAAO,QAAS0K,MAAO,OAAQ0E,GAAI,GACzCnJ,MAAOihB,EACP7I,SAAU,SAACziB,GACTurB,EAAcvrB,EAAEsR,OAAOjH,MACzB,IAEF,gBAACoG,EAAA,EAAU,CAAC7B,GAAIkc,GAAe,UAAC,mBACbU,WAIvB,gBAAC7c,EAAA,EAAG,CAACC,GAAI,CAAEgD,EAAG,EAAGwB,gBAAiB,WAAY,UAC5C,gBAAC3C,EAAA,EAAU,CACT7B,GAAIoc,GAAa,UAClB,kCACiC/M,GAA0B,EAAE,iBAG9D,gBAACxN,EAAA,EAAU,CACT7B,GAAIoc,GAAa,UAClB,0BACyB,IACvB5J,EAA2C,EAA1Bhe,SAASge,GAAsB,EAAI,EAAE,eA+BjE,EC7JeuK,GAtEG,WAChB,OACE,gBAAChd,EAAA,EAAG,CACLC,GAAI,CACHE,MAAO,CAAC+G,GAAI,QAASC,GAAI,QAASC,GAAI,SACtCvC,GAAI,CAACqC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,IAC9BqJ,QAAS,QACR,UAEF,gBAAC9c,EAAA,EAAG,CAACC,GAAI,CACRwE,gBAAiB,UACjB+O,GAAI,CAACtM,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,GAC9BJ,GAAI,GACH,UACD,eAACvR,EAAA,EAAU,CACV+G,WAAW,YACX5I,GACE,CACAxK,MAAO,QAASwM,SAAU,CAAEiF,GAAI,OAAQC,GAAI,OAAQC,GAAI,OAAQqM,GAAI,MACpEL,GAAI,EAAGC,GAAI,CAACnM,GAAI,EAAGC,GAAI,GACvByK,UAAW,SACX0B,GAAI,OACJpP,GAAI,GACH,SACH,cAGD,eAACpC,EAAA,EAAU,CAAC7B,GAAI,CAAEgC,SAAU,CAACiF,GAAI,OAAQC,GAAI,QAAS1R,MAAO,QAAS2d,GAAI,GAAG,SAAC,2EAG9E,eAACtR,EAAA,EAAU,CAAC7B,GAAI,CAAEgC,SAAU,CAACiF,GAAI,OAAQC,GAAI,QAAS1R,MAAO,QAASwnB,GAAI,GAAG,SAAC,uEAG9E,eAACnb,EAAA,EAAU,CAAC7B,GAAI,CAAEgC,SAAU,CAACiF,GAAI,OAAQC,GAAI,QAAS1R,MAAO,QAASwnB,GAAI,GAAG,SAAC,sEAG9E,eAACnb,EAAA,EAAU,CAAC7B,GAAI,CAAEgC,SAAU,CAACiF,GAAI,OAAQC,GAAI,QAAS1R,MAAO,UAAWwnB,GAAI,GAAG,SAAC,2DAGhF,eAACnb,EAAA,EAAU,CAAC7B,GAAI,CAACxK,MAAO,UAAWwM,SAAU,CAACiF,GAAI,OAAQC,GAAI,OAAQ8V,GAAI,IAAI,SAAC,kCAG/E,eAACnb,EAAA,EAAU,CAAC7B,GAAI,CAACxK,MAAO,UAAWwM,SAAU,CAACiF,GAAI,OAAQC,GAAI,OAAQ8V,GAAI,IAAI,SAAC,uEAG/E,eAACnb,EAAA,EAAU,CAAC7B,GAAI,CAACxK,MAAO,UAAWwM,SAAU,CAACiF,GAAI,OAAQC,GAAI,OAAQ8V,GAAI,IAAI,SAAC,mCAIhF,gBAACjd,EAAA,EAAG,CAACC,GAAI,CAACmT,GAAI,CAAClM,GAAI,EAAGC,GAAI,GAAI1C,gBAAiB,UAAW4O,GAAI,GAAG,UAChE,eAACvR,EAAA,EAAU,CAAC7B,GAAI,CAACxK,MAAO,UAAWwM,SAAU,CAACiF,GAAI,OAAQC,GAAI,SAAS,SAAC,oCAGxE,eAACrF,EAAA,EAAU,CAAC7B,GAAI,CAACxK,MAAO,UAAWwM,SAAU,CAACiF,GAAI,OAAQC,GAAI,QAAS+V,GAAI,GAAG,SAAC,+BAG/E,eAACpb,EAAA,EAAU,CAAC7B,GAAI,CAACxK,MAAO,UAAWwM,SAAU,CAACiF,GAAI,OAAQC,GAAI,QAAS+V,GAAI,GAAG,SAAC,0CAG/E,eAACpb,EAAA,EAAU,CAAC7B,GAAI,CAACxK,MAAO,UAAWwM,SAAU,CAACiF,GAAI,OAAQC,GAAI,QAAS+V,GAAI,GAAG,SAAC,uDAG/E,eAACpb,EAAA,EAAU,CAAC7B,GAAI,CAACxK,MAAO,UAAWwM,SAAU,CAACiF,GAAI,OAAQC,GAAI,QAAS+V,GAAI,GAAG,SAAC,oCAMnF,ECjCeC,GA/BD,WACZ,IAAM1K,EAAgBjc,aACpB,SAACC,GAAK,OAAKA,EAAMic,QAAQvD,aAAa,IAGxC,OACE,gBAACnP,EAAA,EAAG,CACFC,GAAI,CAAEwE,gBAAiB,UAAW2O,GAAI,CAAElM,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGqM,GAAI,IAAM,UAEvE,gBAAC3R,EAAA,EAAU,CACT+G,WAAW,YACX5I,GAAI,CACFxK,MAAO,UACPwM,SAAU,CAAEiF,GAAI,OAAQC,GAAI,OAAQC,GAAI,OAAQqM,GAAI,MACpDL,GAAI,EACJC,GAAI,CAAEnM,GAAI,EAAGC,GAAI,GACjB1C,gBAAiB,UACjBtE,MAAO,CAAE+G,GAAI,QAASC,GAAI,QAASC,GAAI,QAASqM,GAAI,UACpD7B,UAAW,SACX0B,GAAI,OACJpP,GAAI,GACJ,UACH,sBACqBuO,GAAgC,EAAE,WAExD,eAAC,GAAS,IACV,eAAC,GAAS,MAGhB,EC1Ba2K,GAAqBtR,aAChC,6BAA4B,iDAC5B,iGAAkC,OAAzBuR,EAAW,EAAXA,YAAaC,EAAY,EAAZA,aAAY,SAC1B9R,GACHc,IAAI,gBACJC,MAAK,SAACC,GACL6Q,EAAc7Q,EAAS3T,IACzB,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,kBAEEgR,GACHc,IAAI,iBACJC,MAAK,SAACC,GACL8Q,EAAe9Q,EAAS3T,IAC1B,IACCgO,OAAM,SAACrM,GACNS,QAAQyR,IAAIlS,EACd,IAAG,KAAD,2BAEG,CACL6iB,cACAC,iBACD,2CACF,mDAxB2B,IA2DfC,GArBMzT,aAAY,CAC/B5W,KAAM,UACN6W,aAbmB,CACnBzP,SAAS,EACT+iB,YAAa,GACbC,aAAc,IAWdtT,SAAU,CAAC,EACXmG,cAAe,SAACC,GACdA,EACGC,QAAQ+M,GAAmB7a,SAAS,SAAC9L,EAAOkQ,GAC3ClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQ+M,GAAmB9M,WAAW,SAAC7Z,EAAOkQ,GAC7C6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQ+M,GAAmB7M,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC9C/D,EAAM6D,SAAU,CAClB,GACJ,IAKiC,Q,IAERmW,cAJV,SAACha,GAAgB,OAAKA,EAAM+mB,OAAQ,IAID,SAACA,GAAO,OAAKA,CAAO,I,gDCpDlE3L,GAAQ,CACZrJ,SAAU,WACVsJ,IAAK,MACLC,KAAM,MACNC,UAAW,wBACX7R,MAAO,IACPsE,gBAAiB,iBACjBG,OAAQ,OACRqN,UAAW,GACXhP,EAAG,EACHJ,QAAS,OACTqP,cAAe,SACfnP,WAAY,UAmSC0a,OAhSf,WACE,IAAMC,EAAkBlnB,aACtB,SAACC,GAAK,OAAKA,EAAM+mB,QAAQH,WAAW,IAEtC,EAAwBjL,IAAM3U,UAAS,GAAM,mBAAtCzG,EAAI,KAAEqb,EAAO,KACpB,EAA8BD,IAAM3U,SAAS,IAAG,mBAAzC9F,EAAO,KAAEgmB,EAAU,KAC1B,EAAwBvL,IAAM3U,SAAS,IAAG,mBAAnCvK,EAAI,KAAE0qB,EAAO,KACpB,EAA4BxL,IAAM3U,SAAS,IAAG,mBAAvC2T,EAAM,KAAEyM,EAAS,KACxB,EAA8BzL,IAAM3U,SAAS,IAAG,mBAAzCqgB,EAAO,KAAEC,EAAU,KAGpBvL,EAAc,WAAH,OAASH,GAAQ,EAAO,EACnCpb,EAAWC,cAEX8mB,EAAgB7mB,sBAAW,iDAAC,WAAOQ,EAAiBzE,EAAcke,GAAc,2FAC9Ena,EAASqa,GAAW,CAAE3Z,QAASA,EAASzE,KAAMA,EAAMke,OAAQA,KAAW,KAAD,EAC5Ena,EAASmmB,GAAmB,CAC1BC,YAAa,GACbC,aAAc,MACZ,2CACL,uDANgC,GAM9B,IAEGW,EAAgB9mB,sBAAW,iDAAC,WAAOQ,GAAe,2FAChDV,EAASua,GAAc,CAAE7Z,QAASA,KAAY,KAAD,EACnDV,EAASmmB,GAAmB,CAC1BC,YAAa,GACbC,aAAc,MACZ,2CACL,mDANgC,GAM9B,IAEH,OACE,gBAACtd,EAAA,EAAG,WACF,eAAC8B,EAAA,EAAU,CACTG,SAAS,OACT2R,WAAW,MACXne,MAAM,QACNmc,UAAU,SACVqL,GAAG,OACHzJ,GAAG,OAAM,SACV,iBAGD,eAACxT,EAAA,EAAG,UACF,eAACke,GAAA,EAAK,CAACje,GAAI,CAAEke,SAAU,KAAO,aAAW,eAAc,SAChC,IAApBT,EAAS5jB,OACR,uCACE,eAACskB,GAAA,EAAS,UACR,gBAACC,GAAA,EAAQ,WACP,eAACC,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQC,GAAI,eAE7BoX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,SAE5B,eAAC6oB,GAAA,EAAS,CAACC,MAAM,SAAQ,SACvB,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,cAE5B,eAAC6oB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQE,GAAI,eAE7BmX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,WAE5B,eAAC6oB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQE,GAAI,eAE7BmX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,aAE5B,eAAC6oB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQkN,GAAI,eAE7BmK,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,iBAE5B,eAAC6oB,GAAA,EAAS,CAACC,MAAM,SAAQ,SACvB,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,mBAIhC,eAAC+oB,GAAA,EAAS,UACPd,EAAS5sB,KAAI,SAAC0sB,EAASzH,GAAK,OAC3B,gBAACsI,GAAA,EAAQ,CAEPpe,GAAI,CAAE,mCAAoC,CAAE2E,OAAQ,IAAM,UAE1D,eAAC0Z,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQC,GAAI,eAE7BpF,UAAU,KACV0c,MAAM,MACNF,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAEsgB,EAAQ,MAErC,eAACuI,GAAA,EAAS,CAACC,MAAM,SAAQ,SACvB,eAACzc,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,aAEbjpB,MAAM,QAAO,SAEZ+nB,EAAQ7lB,YAGb,eAAC2mB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQE,GAAI,eAE7BmX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,aAEbjpB,MAAM,QAAO,SAEZ+nB,EAAQtqB,SAGb,eAACorB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQE,GAAI,eAE7BmX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,aAEbjpB,MAAM,QAAO,SAEZ+nB,EAAQpM,WAGb,eAACkN,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQkN,GAAI,eAE7BmK,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAE+nB,EAAQmB,cAErC,gBAACL,GAAA,EAAS,CAACC,MAAM,SAAQ,UACvB,eAACxa,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACFyD,GAAI,OACJb,QAAS,CAAEqE,GAAI,OAAQC,GAAI,gBAE7BxF,QAAS,WACPqc,EAAcR,EAAQ7lB,QAAS6lB,EAAQtqB,KAAMsqB,EAAQpM,OACvD,EAAE,SACH,YAGD,eAACrN,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACF2e,UAAW,CAAE1X,GAAI,MAAOC,GAAI,OAC5BtE,QAAS,CAAEqE,GAAI,OAAQC,GAAI,gBAE7BxF,QAAS,WACPsc,EAAcT,EAAQ7lB,QACxB,EAAE,SACH,YAGD,eAACoM,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACFyD,GAAI,OACJb,QAAS,CAAEqE,GAAI,QAASC,GAAI,SAE9BxF,QAAS,WAhLN0Q,GAAQ,GAkLTsL,EAAWH,EAAQ7lB,SACnBimB,EAAQJ,EAAQtqB,MAChB2qB,EAAUL,EAAQpM,QAClB2M,EAAWP,EAAQmB,UACrB,EAAE,SACH,sBAtGE5I,EA0GI,SAKjB,eAACjU,EAAA,EAAU,CAACrM,MAAM,QAAQwM,SAAS,OAAO2P,UAAU,SAAQ,SAAC,sDAMnE,eAAC+B,GAAA,EAAK,CACJ3c,KAAMA,EACNgQ,QAASwL,EACT,kBAAgB,oBAChB,mBAAiB,0BAAyB,SAE1C,gBAACxS,EAAA,EAAG,CAACC,GAAI4R,GAAM,UACb,gBAAC/P,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,aAEbjpB,MAAM,QACNmc,UAAU,SAAQ,UACnB,YACWja,KAEZ,gBAACmK,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,YACX7Z,GAAI,QAENpP,MAAM,QACNmc,UAAU,SAAQ,UACnB,SACQ1e,KAET,gBAAC4O,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,YACX7Z,GAAI,QAENpP,MAAM,QACNmc,UAAU,SAAQ,UACnB,WACUR,KAEX,gBAACtP,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,YACX7Z,GAAI,QAENpP,MAAM,QACNmc,UAAU,SAAQ,UACnB,cACakM,KAEd,eAAC/Z,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACF4E,GAAI,OACJ1E,MAAO,OAETwB,QAAS,WACPqc,EAAcrmB,EAASzE,EAAMke,GAC7BoB,GACF,EAAE,SACH,YAGD,eAACzO,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACF4E,GAAI,OACJ1E,MAAO,OAETwB,QAAS,WACPsc,EAActmB,GACd6a,GACF,EAAE,SACH,mBAOX,EC7SQX,GAAQ,CACZrJ,SAAU,WACVsJ,IAAK,MACLC,KAAM,MACNC,UAAW,wBACX7R,MAAO,IACPsE,gBAAiB,iBACjBG,OAAQ,OACRqN,UAAW,GACXhP,EAAG,EACHJ,QAAS,OACTqP,cAAe,SACfnP,WAAY,UAgQC0a,OA7Pf,WACE,IAAMoB,EAAkBroB,aACtB,SAACC,GAAK,OAAKA,EAAM+mB,QAAQF,YAAY,IAEvC,EAAwBlL,IAAM3U,UAAS,GAAM,mBAAtCzG,EAAI,KAAEqb,EAAO,KACpB,EAA8BD,IAAM3U,SAAS,IAAG,mBAAzC9F,EAAO,KAAEgmB,EAAU,KAC1B,EAAwBvL,IAAM3U,SAAS,IAAG,mBAAnCvK,EAAI,KAAE0qB,EAAO,KACpB,EAA4BxL,IAAM3U,SAAS,IAAG,mBAAvC2T,EAAM,KAAEyM,EAAS,KACxB,EAA8BzL,IAAM3U,SAAS,IAAG,mBAAzCqgB,EAAO,KAAEC,EAAU,KAGpBvL,EAAc,WAAH,OAASH,GAAQ,EAAO,EACnCpb,EAAWC,cAEX+mB,EAAgB9mB,sBAAW,iDAAC,WAAOQ,GAAe,2FAChDV,EAASwa,GAAe,CAAE9Z,QAASA,KAAY,KAAD,EACpDV,EAASmmB,GAAmB,CAC1BC,YAAa,GACbC,aAAc,MACZ,2CACL,mDANgC,GAM9B,IAEH,OACE,gBAACtd,EAAA,EAAG,WACF,eAAC8B,EAAA,EAAU,CACTG,SAAS,OACT2R,WAAW,MACXne,MAAM,QACNmc,UAAU,SACVqL,GAAG,OACHzJ,GAAG,OAAM,SACV,kBAGD,eAACxT,EAAA,EAAG,UACF,eAACke,GAAA,EAAK,CAACje,GAAI,CAAEke,SAAU,KAAO,aAAW,eAAc,SAChC,IAApBU,EAAS/kB,OACR,uCACE,eAACskB,GAAA,EAAS,UACR,gBAACC,GAAA,EAAQ,WACP,eAACC,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQC,GAAI,eAE7BoX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,SAE5B,eAAC6oB,GAAA,EAAS,CAACC,MAAM,SAAQ,SACvB,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,cAE5B,eAAC6oB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQE,GAAI,eAE7BmX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,WAE5B,eAAC6oB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQE,GAAI,eAE7BmX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,aAE5B,eAAC6oB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQkN,GAAI,eAE7BmK,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,iBAE5B,eAAC6oB,GAAA,EAAS,CAACC,MAAM,SAAQ,SACvB,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAC,mBAIhC,eAAC+oB,GAAA,EAAS,UACPK,EAAS/tB,KAAI,SAAC4kB,EAASK,GAAK,OAC3B,gBAACsI,GAAA,EAAQ,CAEPpe,GAAI,CAAE,mCAAoC,CAAE2E,OAAQ,IAAM,UAE1D,eAAC0Z,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQC,GAAI,eAE7BpF,UAAU,KACV0c,MAAM,MACNF,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAEsgB,EAAQ,MAErC,eAACuI,GAAA,EAAS,CAACC,MAAM,SAAQ,SACvB,eAACzc,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,aAEbjpB,MAAM,QAAO,SAEZigB,EAAQ/d,YAGb,eAAC2mB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQE,GAAI,eAE7BmX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,aAEbjpB,MAAM,QAAO,SAEZigB,EAAQxiB,SAGb,eAACorB,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQE,GAAI,eAE7BmX,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,aAEbjpB,MAAM,QAAO,SAEZigB,EAAQtE,WAGb,eAACkN,GAAA,EAAS,CACRre,GAAI,CACF4C,QAAS,CAAEqE,GAAI,OAAQkN,GAAI,eAE7BmK,MAAM,SAAQ,SAEd,eAACzc,EAAA,EAAU,CAACrM,MAAM,QAAO,SAAEigB,EAAQiJ,cAErC,gBAACL,GAAA,EAAS,CAACC,MAAM,SAAQ,UACvB,eAACxa,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACF2e,UAAW,CAAE1X,GAAI,MAAOC,GAAI,OAC5BtE,QAAS,CAAEqE,GAAI,OAAQC,GAAI,gBAE7BxF,QAAS,WACPsc,EAAcvI,EAAQ/d,QACxB,EAAE,SACH,YAGD,eAACoM,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACFyD,GAAI,OACJb,QAAS,CAAEqE,GAAI,QAASC,GAAI,SAE9BxF,QAAS,WA3JN0Q,GAAQ,GA6JTsL,EAAWjI,EAAQ/d,SACnBimB,EAAQlI,EAAQxiB,MAChB2qB,EAAUnI,EAAQtE,QAClB2M,EAAWrI,EAAQiJ,UACrB,EAAE,SACH,sBAzFE5I,EA6FI,SAKjB,eAACjU,EAAA,EAAU,CAACrM,MAAM,QAAQwM,SAAS,OAAO2P,UAAU,SAAQ,SAAC,sDAMnE,eAAC+B,GAAA,EAAK,CACJ3c,KAAMA,EACNgQ,QAASwL,EACT,kBAAgB,oBAChB,mBAAiB,0BAAyB,SAE1C,gBAACxS,EAAA,EAAG,CAACC,GAAI4R,GAAM,UACb,gBAAC/P,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,aAEbjpB,MAAM,QACNmc,UAAU,SAAQ,UACnB,YACWja,KAEZ,gBAACmK,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,YACX7Z,GAAI,QAENpP,MAAM,QACNmc,UAAU,SAAQ,UACnB,SACQ1e,KAET,gBAAC4O,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,YACX7Z,GAAI,QAENpP,MAAM,QACNmc,UAAU,SAAQ,UACnB,WACUR,KAEX,gBAACtP,EAAA,EAAU,CACT7B,GAAI,CACFye,UAAW,YACX7Z,GAAI,QAENpP,MAAM,QACNmc,UAAU,SAAQ,UACnB,cACakM,KAEd,eAAC/Z,EAAA,EAAM,CACLC,QAAQ,YACRvO,MAAM,UACNwK,GAAI,CACF4E,GAAI,OACJ1E,MAAO,OAETwB,QAAS,WACPsc,EAActmB,GACd6a,GACF,EAAE,SACH,mBAOX,ECxPasM,OA7Bf,WACE,IAAM7nB,EAAWC,cAEX6nB,EAAW5nB,uBAAY,WAC3BF,EACEmmB,GAAmB,CACjBC,YAAa,GACbC,aAAc,KAGpB,GAAG,IAMH,OAJA3jB,qBAAU,WACRolB,GACF,GAAG,IAGD,gBAAC/e,EAAA,EAAG,CACFC,GAAI,CACFwE,gBAAiB,WAEnBua,UAAU,QAAO,UAEjB,eAAC,GAAO,IACR,eAAC,GAAO,MAGd,E,UClBeC,gBANwB,CACrCtoB,YAAa,CAAC,EACduoB,UAAW,GACXpoB,UAAW,OAG8B,SAACsZ,GAAO,OACjDA,EACGC,QAAQna,IAAmB,SAACO,EAAOkQ,GAClC,MAAiCA,EAAOuD,QAAhC/V,EAAO,EAAPA,QAASwC,EAAW,EAAXA,YACyB,kBAA/BF,EAAME,YAAYxC,GAC3BsC,EAAME,YAAYxC,GAAWwC,EAE7BF,EAAME,YAAYxC,GAAWib,KAAK2K,IAAIpjB,EAAaF,EAAME,YAAYxC,GAEzE,IACCkc,QAAQja,IAAc,SAACK,EAAOkQ,GAC7BlQ,EAAMK,UAAY6P,EAAOuD,OAC3B,IACCmG,QAAQha,IAAU,SAACI,EAAM,GAA2D,IAAD,IAAvDyT,QAAWiV,EAAO,EAAPA,QAASplB,EAAG,EAAHA,IAAI,EAAD,EAAEqlB,qBAAa,MAAG,KAAK,EACzE3oB,EAAMyoB,WAAanlB,EAAMtD,EAAMyoB,UAAU3lB,QAAO,SAAC8lB,GAAK,OAAKA,EAAMtlB,MAAQA,CAAG,IAAItD,EAAMyoB,WAAWI,OAAO,CACtG,CACEvlB,IAAKA,GAAOwlB,eACZC,MAAM,EACNL,UACAC,kBAGN,IACC/O,QAAQ/Z,IAAa,SAACG,EAAM,GAA2B,IAAbsD,EAAG,EAAdmQ,QAAWnQ,IACzCtD,EAAMyoB,UAAUxU,SAAQ,SAACzH,GACnBA,EAAElJ,MAAQA,IACZkJ,EAAEuc,MAAO,EAEb,GACF,GAAE,IC1COC,GAAgBtpB,aAAmB,wBCWnCupB,GAAwBvpB,aAA2C,8BACnEwpB,GAAqBxpB,aAAwC,2BAC7DypB,GAAuBzpB,aAA0C,6BACjE0pB,GAA8B1pB,aACzC,oCAEW2pB,GAAqB3pB,aAAuC,2BAC5D4pB,GAAqB5pB,aAAmD,2BACxE6pB,GAAwB7pB,aAAmD,8BAC3E8pB,GAAoB9pB,aAAiD,0BACrE+pB,GAAuB/pB,aAClC,6BAEWgqB,GAAmBhqB,aAAmB,wBCV7CiqB,GAAmB,WAAH,OAAS,IAAI/gB,MAAOC,SAAU,EAkCpD,SAAS+gB,GAAQC,EAAuBC,GACtC,MAAM,GAAN,OAAUD,EAAa,YAAIC,EAC7B,CAEO,IAAMxW,GAA0B,CACrCyW,cAAc,EACdC,iBAAiB,EACjBC,gBAAgB,EAChBC,sBlE3BsC,GkE4BtCC,alE1BuC,KkE2BvCC,OAAQ,CAAC,EACTC,MAAO,CAAC,EACRC,UAAWX,KACXY,mBAAmB,GAGN/B,gBAAclV,IAAc,SAACqG,GAAO,OACjDA,EACGC,QAAQoP,IAAe,SAAChpB,GAGoB,kBAAhCA,EAAMkqB,wBACflqB,EAAMkqB,sBlEzC0B,IkE8CA,kBAAvBlqB,EAAMmqB,eACfnqB,EAAMmqB,alE7C2B,MkEgDnCnqB,EAAMwqB,2BAA6Bb,IACrC,IACC/P,QAAQsP,IAAoB,SAAClpB,EAAOkQ,GACnClQ,EAAM+pB,aAAe7Z,EAAOuD,QAAQsW,aACpC/pB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQqP,IAAuB,SAACjpB,EAAOkQ,GACtClQ,EAAMgqB,gBAAkB9Z,EAAOuD,QAAQuW,gBACvChqB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQuP,IAAsB,SAACnpB,EAAOkQ,GACrClQ,EAAMiqB,eAAiB/Z,EAAOuD,QAAQwW,eACtCjqB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQwP,IAA6B,SAACppB,EAAOkQ,GAC5ClQ,EAAMkqB,sBAAwBha,EAAOuD,QAAQyW,sBAC7ClqB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQyP,IAAoB,SAACrpB,EAAOkQ,GACnClQ,EAAMmqB,aAAeja,EAAOuD,QAAQ0W,aACpCnqB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQ0P,IAAoB,SAACtpB,EAAM,GAAuC,IAAzByqB,EAAe,EAA1BhX,QAAWgX,gBAChDzqB,EAAMoqB,OAAOK,EAAgB/sB,SAAWsC,EAAMoqB,OAAOK,EAAgB/sB,UAAY,CAAC,EAClFsC,EAAMoqB,OAAOK,EAAgB/sB,SAAS+sB,EAAgBvpB,SAAWupB,EACjEzqB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQ2P,IAAuB,SAACvpB,EAAM,GAAwC,IAAD,IAApCyT,QAAWvS,EAAO,EAAPA,QAASxD,EAAO,EAAPA,QAC5DsC,EAAMoqB,OAAO1sB,GAAWsC,EAAMoqB,OAAO1sB,IAAY,CAAC,SAC3CsC,EAAMoqB,OAAO1sB,GAASwD,GAC7BlB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQ4P,IAAmB,SAACxpB,EAAM,GAAsC,IAAxB0qB,EAAc,EAAzBjX,QAAWiX,eAC/C,GACEA,EAAeC,OAAOjtB,UAAYgtB,EAAeE,OAAOltB,SACxDgtB,EAAeC,OAAOzpB,UAAYwpB,EAAeE,OAAO1pB,QACxD,CACA,IAAMxD,EAAUgtB,EAAeC,OAAOjtB,QACtCsC,EAAMqqB,MAAM3sB,GAAWsC,EAAMqqB,MAAM3sB,IAAY,CAAC,EAChDsC,EAAMqqB,MAAM3sB,GAASksB,GAAQc,EAAeC,OAAOzpB,QAASwpB,EAAeE,OAAO1pB,UAAYwpB,CAChG,CACA1qB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQ6P,IAAsB,SAACzpB,EAAM,GAA6D,IAAD,IAAzDyT,QAAW/V,EAAO,EAAPA,QAASmtB,EAAa,EAAbA,cAAeC,EAAa,EAAbA,cACtE9qB,EAAMqqB,MAAM3sB,YAEPsC,EAAMqqB,MAAM3sB,GAASksB,GAAQiB,EAAeC,WAC5C9qB,EAAMqqB,MAAM3sB,GAASksB,GAAQkB,EAAeD,KAErD7qB,EAAMsqB,UAAYX,IACpB,IACC/P,QAAQ8P,IAAkB,SAAC1pB,GAC1BA,EAAMuqB,mBAAqBvqB,EAAMuqB,iBACnC,GAAE,IC/HAQ,GAAM,WAAH,OAAS,IAAIniB,MAAOC,SAAU,EAsBxB2f,gBAF+B,CAAC,GAEJ,SAAC7O,GAAO,OACjDA,EACGC,QAAQxR,IAAgB,SAACK,EAAa,GAAqE,IAAD,QAAjEgL,QAAW/V,EAAO,EAAPA,QAASstB,EAAI,EAAJA,KAAMrf,EAAI,EAAJA,KAAMsf,EAAQ,EAARA,SAAUpf,EAAO,EAAPA,QAASqf,EAAK,EAALA,MAC3F,GAAyB,QAAzB,EAAIziB,EAAa/K,UAAQ,OAArB,EAAwBiO,GAC1B,MAAM9Q,MAAM,0CAEd,IAAMswB,EAA2B,QAAxB,EAAG1iB,EAAa/K,UAAQ,QAAI,CAAC,EACtCytB,EAAIxf,GAAQ,CAAEA,OAAMsf,WAAUpf,UAASqf,QAAOF,OAAMliB,UAAWiiB,MAC/DtiB,EAAa/K,GAAWytB,CAC1B,IACCvR,QAAQvR,IAAsB,SAACI,EAAa,GAA+B,IAAjB/K,EAAO,EAAlB+V,QAAW/V,QACpD+K,EAAa/K,KAClB+K,EAAa/K,GAAW,CAAC,EAC3B,IACCkc,QAAQrR,IAAoB,SAACE,EAAa,GAAkD,IAAD,MAA9CgL,QAAW/V,EAAO,EAAPA,QAASiO,EAAI,EAAJA,KAAMzL,EAAW,EAAXA,YAChEyI,EAA0B,QAAxB,EAAGF,EAAa/K,UAAQ,aAArB,EAAwBiO,GAC9BhD,IAGAA,EAAGyiB,uBAGNziB,EAAGyiB,uBAAyBzS,KAAK2K,IAAIpjB,EAAayI,EAAGyiB,wBAFrDziB,EAAGyiB,uBAAyBlrB,EAIhC,IACC0Z,QAAQtR,IAAqB,SAACG,EAAa,GAA8C,IAAD,MAA1CgL,QAAW9H,EAAI,EAAJA,KAAMjO,EAAO,EAAPA,QAASqO,EAAO,EAAPA,QACjEpD,EAA0B,QAAxB,EAAGF,EAAa/K,UAAQ,aAArB,EAAwBiO,GAC9BhD,IAGLA,EAAGoD,QAAUA,EACbpD,EAAG0iB,cAAgBN,KACrB,GAAE,IC1BSvC,gBAJsB,CACnChmB,YAAa,CAAC,IAG2B,SAACmX,GAAO,OACjDA,EACGC,QAAQxY,IAAuB,SAACpB,EAAM,GAA4E,IAAD,MAAxEyT,QAAWnR,EAAK,EAALA,MAAO5E,EAAO,EAAPA,QAAQ,EAAD,EAAE6E,QAAoC,QAA7B,MAA2B,CAAC,EAAC,GAAzB+oB,sBAAc,MAAG,EAAC,EAC1FC,EAA6CvrB,EAAMwrB,cACrDxrB,EAAMwrB,cACLxrB,EAAMwrB,cAAgB,CAAC,EAC5BD,EAAU7tB,GAA6B,QAArB,EAAG6tB,EAAU7tB,UAAQ,QAAI,CAAC,EAC5C4E,EAAM2R,SAAQ,SAACjT,GAAU,IAAD,IAChBuC,EAAUxC,GAAUC,GAC1BuqB,EAAU7tB,GAAS6F,GAAsC,QAA9B,EAAGgoB,EAAU7tB,GAAS6F,UAAQ,QAAI,CAAC,EAC9DgoB,EAAU7tB,GAAS6F,GAAS+nB,IAA8D,QAA5C,EAACC,EAAU7tB,GAAS6F,GAAS+nB,UAAe,QAAI,GAAK,CACrG,GACF,IACC1R,QACCvY,IACA,SAACrB,EAAM,GAA4E,IAAD,IAAxEyT,QAAW/V,EAAO,EAAPA,QAAS4E,EAAK,EAALA,MAAM,EAAD,EAAEC,QAAoC,QAA7B,MAA2B,CAAC,EAAC,GAAzB+oB,sBAAc,MAAG,EAAC,EAC1DC,EAA6CvrB,EAAMwrB,cACrDxrB,EAAMwrB,cACLxrB,EAAMwrB,cAAgB,CAAC,EAEvBD,EAAU7tB,IACf4E,EAAM2R,SAAQ,SAACjT,GACb,IAAMuC,EAAUxC,GAAUC,GACrBuqB,EAAU7tB,GAAS6F,IACnBgoB,EAAU7tB,GAAS6F,GAAS+nB,KAEmB,IAAhDC,EAAU7tB,GAAS6F,GAAS+nB,UACvBC,EAAU7tB,GAAS6F,GAAS+nB,GAEnCC,EAAU7tB,GAAS6F,GAAS+nB,KAEhC,GACF,IAED1R,QAAQtY,IAA0B,SAACtB,EAAM,GAA2D,IAAD,MAAvDyT,QAAW/V,EAAO,EAAPA,QAAS+tB,EAAmB,EAAnBA,oBAAqBnpB,EAAK,EAALA,MACpFtC,EAAMwC,YAAY9E,GAAqC,QAA7B,EAAGsC,EAAMwC,YAAY9E,UAAQ,QAAI,CAAC,EAC5D4E,EAAM2R,SAAQ,SAACjT,GACb,IAAMuC,EAAUxC,GAAUC,GACpBkI,EAAUlJ,EAAMwC,YAAY9E,GAAS6F,GAC3C,GAAK2F,EAIE,CAAC,IAAD,EACL,IAAgC,QAA5B,EAACA,EAAQuiB,2BAAmB,QAAI,IAAMA,EAAqB,OAC/DzrB,EAAMwC,YAAY9E,GAAS6F,GAASkoB,oBAAsBA,CAC5D,MANEzrB,EAAMwC,YAAY9E,GAAS6F,GAAW,CACpCkoB,sBAMN,GACF,IACC7R,QAAQrY,IAA+B,SAACvB,EAAM,GAA2D,IAAD,MAAvDyT,QAAWgY,EAAmB,EAAnBA,oBAAqB/tB,EAAO,EAAPA,QAAS4E,EAAK,EAALA,MACzFtC,EAAMwC,YAAY9E,GAAqC,QAA7B,EAAGsC,EAAMwC,YAAY9E,UAAQ,QAAI,CAAC,EAC5D4E,EAAM2R,SAAQ,SAACjT,GACb,IAAMuC,EAAUxC,GAAUC,GACpBkI,EAAUlJ,EAAMwC,YAAY9E,GAAS6F,GACtC2F,GACDA,EAAQuiB,sBAAwBA,WAC3BviB,EAAQuiB,oBACfviB,EAAQ9G,KAAO,KACf8G,EAAQhJ,YAAcurB,EAE1B,GACF,IACC7R,QAAQpY,IAAwB,SAACxB,EAAM,GAAqD,IAAD,MAAjDyT,QAAW/V,EAAO,EAAPA,QAASguB,EAAO,EAAPA,QAASxrB,EAAW,EAAXA,YACtEF,EAAMwC,YAAY9E,GAAqC,QAA7B,EAAGsC,EAAMwC,YAAY9E,UAAQ,QAAI,CAAC,EAC5D1C,OAAOD,KAAK2wB,GAASzX,SAAQ,SAAC1Q,GAAa,IAAD,EAClC2F,EAAUlJ,EAAMwC,YAAY9E,GAAS6F,IAClB,QAArB,EAAQ,OAAP2F,QAAO,IAAPA,OAAO,EAAPA,EAAShJ,mBAAW,QAAI,GAAKA,IAClCF,EAAMwC,YAAY9E,GAAS6F,GAAW,CACpCnB,KAAMspB,EAAQnoB,GACdrD,eAEJ,GACF,GAAE,IC7FOyrB,GAAqBtW,aAChC,6BAA4B,iDAC5B,yGAAgB,GAAP5X,EAAO,EAAPA,SAEH6X,OAAO,CAAD,mBACJA,OAAOC,UAAWD,OAAOC,QAAQC,eAAeC,OAAM,gCACnCH,OAAOC,QACzB5Q,WACA+Q,GAAGkW,KAAQ1qB,QAAQyU,MAAMrX,GAAeC,eAAe,KAAD,EAF7C,OAAZqX,EAAY,gBAGcN,OAAOC,QAC9B5Q,WACA+Q,GAAGkW,KAAQ1qB,QAAQyU,MAAMrX,GAAeG,oBAAoB,KAAD,EAF9D0mB,EAAiB,+BAMIvP,EAAaqB,YAAYjW,OAAM,QAAU,OAA5DigB,EAAS,OAA2C4K,WAAW,EAAH,QAEzDjW,EAAa8C,gBAAgB1X,OAAM,QAClC,OADkC,iBAAI2X,KAAKC,IAAI,GAAI,GADvDF,GAAa,WAEjBmT,WAAW,EAAH,QAEF1G,EAAkBpD,UAAUtkB,GAASuD,OAAM,QACtC,OAFPolB,EAAS,OAEbyF,WAAQ,kBACH,CACL5K,YACAvI,gBACA0N,cACD,4CACF,mDA1B2B,IAkEf0F,GA1BMzY,aAAY,CAC/B5W,KAAM,UACN6W,aAbmB,CACnBzP,SAAS,GAaT0P,SAAU,CACRwY,oBAAmB,SAAC/rB,EAAOkQ,GACzB6D,GAAO/T,EAAOkQ,EAAOuD,QAEvB,GAEFiG,cAAe,SAACC,GACdA,EACGC,QAAQ+R,GAAmB7f,SAAS,SAAC9L,EAAOkQ,GAC3ClQ,EAAM6D,SAAU,CAClB,IACC+V,QAAQ+R,GAAmB9R,WAAW,SAAC7Z,EAAOkQ,GAC7C6D,GAAO/T,EAAOkQ,EAAOuD,SACrBzT,EAAM6D,SAAU,CAClB,IACC+V,QAAQ+R,GAAmB7R,UAAU,SAAC9Z,EAAM,GAAQ,EAAL+D,MAC9C/D,EAAM6D,SAAU,CAClB,GACJ,IAKiC,QC1D7BmoB,ID4DqBhS,cAJV,SAACha,GAAgB,OAAKA,EAAMic,OAAQ,IAID,SAACA,GAAO,OAAKA,CAAO,IC5D1DgQ,aAAe,CAC3BC,QAAS,CACPjsB,eACAksB,QACA1jB,gBACAhG,aACAggB,IAAK2J,GACLnS,MAAOoS,GACP1G,MAAO2G,GACP1M,IAAK2M,GACL/R,KAAMgS,GACNrQ,OAAQsQ,GACR7N,SAAU8N,GACVrO,OAAQsO,GACR1Q,QAAS2Q,GACTvI,OAAQwI,GACRlpB,OAAQmpB,GACRC,OAAQC,GACRjG,QAASkG,IAEXC,WAAY,SAAAC,GAAoB,OAAIA,EAAqB,CAAEC,mBAAmB,GAAQ,EACtFC,eAAgBC,gBAAK,CAAEC,OAvBQ,CAAC,OAAQ,eAAgB,cA0B1DvB,GAAMxrB,SAASwoB,MAEAgD,U,OCiBAwB,OA/Cf,WACE,IAAMhtB,EAAWC,cACjB,EAA4B2O,cAApB7P,EAAM,EAANA,OAAQ9B,EAAO,EAAPA,QACVmP,EAAoBjM,KAEpB2nB,EAAW5nB,uBAAY,WAC3BF,EAAS2iB,GAAgB,CAAEX,SAAU,MACrChiB,EAASujB,GAAkB,CAAEC,WAAY,MACzCxjB,EAAS4jB,GAAkB,CAAE3L,WAAY,MACzCjY,EAASikB,GAAkB,CAAExL,WAAY,MACzCzY,EAASmmB,GAAmB,CAC1BC,YAAa,GACbC,aAAc,MAEhBrmB,EAASqhB,GAAe,CAAEpkB,QAASA,KACnC+C,EAASmrB,GAAmB,CAAEluB,QAASA,IACzC,GAAG,CAACA,IAaJ,OAXAyF,qBAAU,WACJ3D,GACF+oB,GAEJ,GAAG,CAAC/oB,IACJ2D,qBAAU,WACH3D,GACHqN,GAEJ,GAAG,CAACrN,IAGF,qCACE,gBAAC,IAAQ,CAACysB,MAAOA,GAAM,UACrB,eAAC,sBAAkB,IACnB,eAAC,GAAM,IACP,gBAAC,IAAM,WACL,eAAC,IAAK,CAACyB,OAAK,EAACC,KAAK,IAAIpiB,UAAWyZ,KACjC,eAAC,IAAK,CAAC0I,OAAK,EAACC,KAAK,SAASpiB,UAAWob,KACtC,eAAC,IAAK,CAAC+G,OAAK,EAACC,KAAK,SAASpiB,UAAW+c,KACtC,eAAC,IAAK,CAACqF,KAAK,IAAG,SACb,eAAC,IAAQ,CAACC,GAAG,eAMzB,E,wCCtDe,SAASC,GAAc,GAIlC,IAHFniB,EAAQ,EAARA,SAIMoiB,EAAQC,aAAY,CACxBC,QAAS,CACPC,KAAM,QACNC,OAAQ,CACNC,MAAO,WAETC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,WAERC,UAAW,CACTH,MAAO,UACPC,KAAM,UACNC,KAAM,cAKZ,OACE,eAACE,GAAA,EAAoB,CAACC,aAAW,WAC/B,gBAAC,KAAgB,CAACZ,MAAOA,EAAM,UAC7B,eAACa,GAAA,EAAW,IACXjjB,MAIT,CC3Ce,SAASkjB,GAAWlzB,GACjC,IAAM6K,EAAU,IAAIsoB,IAAanzB,GAEjC,OADA6K,EAAQuoB,gBAAkB,KACnBvoB,CACT,CCHA,IAYewoB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBlZ,MAAK,YAAkD,IAA/CmZ,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECEMO,GAAsBC,YAAoBrwB,IAEhDswB,IAASC,OACP,eAAC,GAAa,UACV,eAAC,IAAiB,CAACd,WAAYA,GAAW,SACxC,eAACW,GAAmB,CAACX,WAAYA,GAAW,SAC1C,eAAC,IAAQ,CAAC3C,MAAOA,GAAM,SACrB,eAAC,IAAU,UACP,eAAC,GAAG,cAOlB0D,SAASC,eAAe,SAG1Bb,I","file":"static/js/main.68068b61.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Ui_box3.2bc6911b.webp\";","export default __webpack_public_path__ + \"static/media/button.6f4e853a.png\";","export default __webpack_public_path__ + \"static/media/discord-brands.3e07cf0d.svg\";","export default __webpack_public_path__ + \"static/media/ban1.5cb4280a.png\";","export default __webpack_public_path__ + \"static/media/ban2.34f9e0b7.png\";","var map = {\n\t\"./Ui_box3.webp\": 126,\n\t\"./ban1-1.jpg\": 595,\n\t\"./ban1.png\": 236,\n\t\"./ban2-1.jpg\": 596,\n\t\"./ban2.png\": 237,\n\t\"./button.png\": 127,\n\t\"./discord-brands.svg\": 230,\n\t\"./logo.png\": 597,\n\t\"./tronlink.svg\": 598\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 311;","export default __webpack_public_path__ + \"static/media/ban1-1.5cd04bdb.jpg\";","export default __webpack_public_path__ + \"static/media/ban2-1.ec1990ce.jpg\";","export default __webpack_public_path__ + \"static/media/logo.2219dfc0.png\";","export default __webpack_public_path__ + \"static/media/tronlink.d4b98412.svg\";","// all abis...\r\nimport { abi as IntercroneswapV1Router02ABI } from \"@intercroneswap/v2-periphery/build/IIswapV1Router02.json\";\r\n\r\nimport ERC20_ABI from \"../../constants/abis/erc20.json\";\r\n\r\nexport const abis = [...ERC20_ABI, ...IntercroneswapV1Router02ABI];\r\n","import createTronLinkProvider from '@intercroneswap/tronlink-provider';\r\nimport Web3 from 'web3';\r\nimport { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types';\r\nimport { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport { abis } from './tronlink-abis';\r\n\r\nexport class UserRejectedRequestError extends Error {\r\n  public constructor() {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    this.message = 'The user rejected the request.';\r\n  }\r\n}\r\n\r\nexport class InjectedTronConnector extends AbstractConnector {\r\n  public provider: any;\r\n\r\n  constructor(kwargs: AbstractConnectorArguments) {\r\n    super(kwargs);\r\n\r\n    const getFunctionSelector = (abi: any) => {\r\n      return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\r\n    };\r\n    const getParamTypes = (params: any) => {\r\n      return params.map(({ type, components }: { type: any; components: any }) => {\r\n        if (type === 'tuple[]') {\r\n          return (\r\n            '(' +\r\n            components\r\n              .map(({ type }: { type: any }) => {\r\n                return type;\r\n              })\r\n              .join(',') +\r\n            ')[]'\r\n          );\r\n        }\r\n        return type;\r\n      });\r\n    };\r\n    const signs: any = {};\r\n    const web3 = new Web3(\r\n      new Web3.providers.WebsocketProvider('wss://nile.infura.io/ws/v3/7f14d2eb070c41029d687df66b286a09'),\r\n    );\r\n    abis.map((fn: any) => {\r\n      try {\r\n        const sign = web3.eth.abi.encodeFunctionSignature({\r\n          name: fn.name,\r\n          type: fn.type,\r\n          inputs: fn.inputs,\r\n        });\r\n        signs[sign] = getFunctionSelector(fn);\r\n      } catch (err) {\r\n      }\r\n    });\r\n    // TODO(tron): should auto-use same network as one selected in tronlink!\r\n    this.provider = createTronLinkProvider({\r\n      network: process.env.REACT_APP_TRON_NETWORK,\r\n      tronApiUrl: process.env.REACT_APP_NETWORK_URL,\r\n      functionSignatures: abis,\r\n      signs,\r\n    });\r\n    /*\r\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this)\r\n    this.handleChainChanged = this.handleChainChanged.bind(this)\r\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\r\n    this.handleClose = this.handleClose.bind(this)\r\n    */\r\n  }\r\n\r\n  async requestProvider(args: any) {\r\n    const res = await this.provider.request(args);\r\n    return res;\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    const accounts = await this.requestProvider({ method: 'eth_accounts' });\r\n    const account = accounts[0];\r\n    return { provider: this.provider, account };\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.provider;\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    const chainId = await this.requestProvider({ method: 'eth_chainId' });\r\n    return chainId;\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    const accounts = await this.requestProvider({ method: 'eth_accounts' });\r\n    const account = accounts[0];\r\n    return account;\r\n  }\r\n\r\n  public deactivate() {\r\n    return true;\r\n  }\r\n\r\n  public async isAuthorized(): Promise<boolean> {\r\n    // TODO: check if tronlink unlocked?\r\n    return true;\r\n  }\r\n}\r\n","import createJavaTronProvider from '@intercroneswap/java-tron-provider';\r\n\r\nimport { InjectedTronConnector } from './injected-tron-connector';\r\n\r\nexport class NetworkConnector extends InjectedTronConnector {\r\n  constructor(kwargs: any) {\r\n    super(kwargs);\r\n    this.provider = createJavaTronProvider({\r\n      network: process.env.REACT_APP_TRON_NETWORK,\r\n      tronApiUrl: process.env.REACT_APP_NETWORK_URL,\r\n    });\r\n  }\r\n\r\n  async requestProvider(...args: any[]) {\r\n    const res = await this.provider.request(...args);\r\n    // TODO: wrap error with throw new NoEthereumProviderError()?\r\n    return res;\r\n  }\r\n\r\n  public async activate(): Promise<any> {\r\n    return { provider: this.provider };\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.provider;\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return null;\r\n  }\r\n}\r\n","import { Web3Provider } from '@ethersproject/providers';\r\nimport { NetworkConnector } from './NetworkConnector';\r\nimport { InjectedTronConnector } from './injected-tron-connector';\r\n\r\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\r\n\r\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '11111');\r\n\r\nif (typeof NETWORK_URL === 'undefined') {\r\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\r\n}\r\n\r\nexport const network = new NetworkConnector({\r\n  urls: { [NETWORK_CHAIN_ID]: NETWORK_URL },\r\n});\r\n\r\nlet networkLibrary: Web3Provider | undefined;\r\nexport function getNetworkLibrary(): Web3Provider {\r\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any));\r\n}\r\n\r\nexport const injected = new InjectedTronConnector({\r\n  supportedChainIds: [11111, 1],\r\n});\r\n","export const TOKEN_DECIMALS = 9;\r\n\r\nexport enum Networks {\r\n  // AVAX = 43114,\r\n  AVAX = 43113, // for test\r\n  GOERLI = 5,\r\n}\r\n\r\nexport const DEFAULD_NETWORK = Networks.GOERLI;\r\n","import { Networks } from \"./blockchain\";\r\n\r\nexport const SHASTA_TESTNET = {\r\n  MEOW_ADDRESS: \"TNGQyG1BKKrEE4dcwsKR1ycdMXMcyRPqZN\", //\r\n  NFT_ADDRESS: \"TUvR3L8eT3QPDJ18hVUqELzpvVQrGL2gAM\",\r\n  MEOWTOKEN_ADDRESS: \"TDtFwTisg9hdsfmwEGcZcyCTExExsdazFj\",\r\n};\r\n\r\nexport const getAddresses = (networkID: number) => {\r\n  if (networkID === Networks.GOERLI) return SHASTA_TESTNET;\r\n\r\n  throw Error(\"Network don't support\");\r\n};\r\n","import { AbstractConnector } from \"@web3-react/abstract-connector\";\r\n\r\nimport { injected } from \"../connectors\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nexport interface WalletInfo {\r\n  connector?: AbstractConnector;\r\n  name: string;\r\n  iconName: string;\r\n  description: string;\r\n  href: string | null;\r\n  color: string;\r\n  primary?: true;\r\n  mobile?: true;\r\n  mobileOnly?: false;\r\n}\r\n\r\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\r\n  TRONLINK: {\r\n    connector: injected,\r\n    name: \"TronLink\",\r\n    iconName: \"tronlink.svg\",\r\n    description: \"Easy-to-use browser extension.\",\r\n    href: null,\r\n    color: \"#48489b\",\r\n    mobileOnly: false,\r\n  },\r\n};\r\n\r\nexport const NetworkContextName = \"NETWORK\";\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 50;\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;\r\n\r\nexport * from \"./blockchain\";\r\nexport * from \"./addresses\";","import { Web3Provider } from \"@ethersproject/providers\";\r\nimport { ChainId } from \"@intercroneswap/v2-sdk\";\r\nimport { useWeb3React as useWeb3ReactCore } from \"@web3-react/core\";\r\nimport { Web3ReactContextInterface } from \"@web3-react/core/dist/types\";\r\nimport { NetworkContextName } from \"../constants\";\r\n\r\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & {\r\n  chainId?: ChainId;\r\n} {\r\n  const context = useWeb3ReactCore<Web3Provider>();\r\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName);\r\n  return context.active ? context : contextNetwork;\r\n}","import { createAction } from '@reduxjs/toolkit';\r\nimport { TokenList } from '@intercroneswap/token-lists';\r\n\r\nexport type PopupContent =\r\n  | {\r\n      txn: {\r\n        hash: string;\r\n        success: boolean;\r\n        summary?: string;\r\n      };\r\n    }\r\n  | {\r\n      listUpdate: {\r\n        listUrl: string;\r\n        oldList: TokenList;\r\n        newList: TokenList;\r\n        auto: boolean;\r\n      };\r\n    };\r\n\r\nexport enum ApplicationModal {\r\n  WALLET,\r\n  SETTINGS,\r\n  SELF_CLAIM,\r\n  ADDRESS_CLAIM,\r\n  CLAIM_POPUP,\r\n  MENU,\r\n  LEFTMENU,\r\n  DELEGATE,\r\n  VOTE,\r\n}\r\n\r\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>(\r\n  'application/updateBlockNumber',\r\n);\r\nexport const setOpenModal = createAction<ApplicationModal | null>('application/setOpenModal');\r\nexport const addPopup = createAction<{ key?: string; removeAfterMs?: number | null; content: PopupContent }>(\r\n  'application/addPopup',\r\n);\r\nexport const removePopup = createAction<{ key: string }>('application/removePopup');\r\n","import { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { addPopup, ApplicationModal, PopupContent, removePopup, setOpenModal } from './actions';\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const { chainId } = useActiveWeb3React();\r\n\r\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\r\n}\r\n\r\nexport function useModalOpen(modal: ApplicationModal): boolean {\r\n  const openModal = useSelector((state: AppState) => state.application.openModal);\r\n  return openModal === modal;\r\n}\r\n\r\nexport function useToggleModal(modal: ApplicationModal): () => void {\r\n  const open = useModalOpen(modal);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return useCallback(() => dispatch(setOpenModal(open ? null : modal)), [dispatch, modal, open]);\r\n}\r\n\r\nexport function useOpenModal(modal: ApplicationModal): () => void {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return useCallback(() => dispatch(setOpenModal(modal)), [dispatch, modal]);\r\n}\r\n\r\nexport function useCloseModals(): () => void {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return useCallback(() => dispatch(setOpenModal(null)), [dispatch]);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  return useToggleModal(ApplicationModal.WALLET);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  return useToggleModal(ApplicationModal.SETTINGS);\r\n}\r\n\r\nexport function useShowClaimPopup(): boolean {\r\n  return useModalOpen(ApplicationModal.CLAIM_POPUP);\r\n}\r\n\r\nexport function useToggleShowClaimPopup(): () => void {\r\n  return useToggleModal(ApplicationModal.CLAIM_POPUP);\r\n}\r\n\r\nexport function useToggleSelfClaimModal(): () => void {\r\n  return useToggleModal(ApplicationModal.SELF_CLAIM);\r\n}\r\n\r\nexport function useToggleDelegateModal(): () => void {\r\n  return useToggleModal(ApplicationModal.DELEGATE);\r\n}\r\n\r\nexport function useToggleVoteModal(): () => void {\r\n  return useToggleModal(ApplicationModal.VOTE);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({ content, key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({ key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState['application']['popupList'] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Call {\r\n  address: string;\r\n  callData: string;\r\n}\r\n\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\r\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/;\r\nexport function toCallKey(call: Call): string {\r\n  if (!ADDRESS_REGEX.test(call.address)) {\r\n    throw new Error(`Invalid address: ${call.address}`);\r\n  }\r\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\r\n    throw new Error(`Invalid hex: ${call.callData}`);\r\n  }\r\n  return `${call.address}-${call.callData}`;\r\n}\r\n\r\nexport function parseCallKey(callKey: string): Call {\r\n  const pcs = callKey.split('-');\r\n  if (pcs.length !== 2) {\r\n    throw new Error(`Invalid call key: ${callKey}`);\r\n  }\r\n  return {\r\n    address: pcs[0],\r\n    callData: pcs[1],\r\n  };\r\n}\r\n\r\nexport interface ListenerOptions {\r\n  // how often this data should be fetched, by default 1\r\n  readonly blocksPerFetch?: number;\r\n}\r\n\r\nexport const addMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\r\n  'multicall/addMulticallListeners',\r\n);\r\nexport const removeMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\r\n  'multicall/removeMulticallListeners',\r\n);\r\nexport const fetchingMulticallResults = createAction<{ chainId: number; calls: Call[]; fetchingBlockNumber: number }>(\r\n  'multicall/fetchingMulticallResults',\r\n);\r\nexport const errorFetchingMulticallResults = createAction<{\r\n  chainId: number;\r\n  calls: Call[];\r\n  fetchingBlockNumber: number;\r\n}>('multicall/errorFetchingMulticallResults');\r\nexport const updateMulticallResults = createAction<{\r\n  chainId: number;\r\n  blockNumber: number;\r\n  results: {\r\n    [callKey: string]: string | null;\r\n  };\r\n}>('multicall/updateMulticallResults');\r\n","import { Interface, FunctionFragment } from '@ethersproject/abi';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { Contract } from '@ethersproject/contracts';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { useBlockNumber } from '../application/hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport {\r\n  addMulticallListeners,\r\n  Call,\r\n  removeMulticallListeners,\r\n  parseCallKey,\r\n  toCallKey,\r\n  ListenerOptions,\r\n} from './actions';\r\n\r\nexport interface Result extends ReadonlyArray<any> {\r\n  readonly [key: string]: any;\r\n}\r\n\r\ntype MethodArg = string | number | BigNumber;\r\ntype MethodArgs = Array<MethodArg | MethodArg[]>;\r\n\r\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined;\r\n\r\nfunction isMethodArg(x: unknown): x is MethodArg {\r\n  return ['string', 'number'].indexOf(typeof x) !== -1;\r\n}\r\n\r\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\r\n  return (\r\n    x === undefined ||\r\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\r\n  );\r\n}\r\n\r\ninterface CallResult {\r\n  readonly valid: boolean;\r\n  readonly data: string | undefined;\r\n  readonly blockNumber: number | undefined;\r\n}\r\n\r\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined };\r\n\r\n// use this options object\r\nexport const NEVER_RELOAD: ListenerOptions = {\r\n  blocksPerFetch: Infinity,\r\n};\r\n\r\n// the lowest level call for subscribing to contract data\r\nfunction useCallsData(calls: (Call | undefined)[], options?: ListenerOptions): CallResult[] {\r\n  const { chainId } = useActiveWeb3React();\r\n  const callResults = useSelector<AppState, AppState['multicall']['callResults']>(\r\n    (state) => state.multicall.callResults,\r\n  );\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const serializedCallKeys: string = useMemo(\r\n    () =>\r\n      JSON.stringify(\r\n        calls\r\n          ?.filter((c): c is Call => Boolean(c))\r\n          ?.map(toCallKey)\r\n          ?.sort() ?? [],\r\n      ),\r\n    [calls],\r\n  );\r\n\r\n  // update listeners when there is an actual change that persists for at least 100ms\r\n  useEffect(() => {\r\n    const callKeys: string[] = JSON.parse(serializedCallKeys);\r\n    if (!chainId || callKeys.length === 0) return undefined;\r\n    const calls = callKeys.map((key) => parseCallKey(key));\r\n    dispatch(\r\n      addMulticallListeners({\r\n        chainId,\r\n        calls,\r\n        options,\r\n      }),\r\n    );\r\n\r\n    return () => {\r\n      dispatch(\r\n        removeMulticallListeners({\r\n          chainId,\r\n          calls,\r\n          options,\r\n        }),\r\n      );\r\n    };\r\n  }, [chainId, dispatch, options, serializedCallKeys]);\r\n\r\n  return useMemo(\r\n    () =>\r\n      calls.map<CallResult>((call) => {\r\n        if (!chainId || !call) return INVALID_RESULT;\r\n\r\n        const result = callResults[chainId]?.[toCallKey(call)];\r\n        let data;\r\n        if (result?.data && result?.data !== '0x') {\r\n          data = result.data;\r\n        }\r\n\r\n        return { valid: true, data, blockNumber: result?.blockNumber };\r\n      }),\r\n    [callResults, calls, chainId],\r\n  );\r\n}\r\n\r\ninterface CallState {\r\n  readonly valid: boolean;\r\n  // the result, or undefined if loading or errored/no data\r\n  readonly result: Result | undefined;\r\n  // true if the result has never been fetched\r\n  readonly loading: boolean;\r\n  // true if the result is not for the latest block\r\n  readonly syncing: boolean;\r\n  // true if the call was made and is synced, but the return data is invalid\r\n  readonly error: boolean;\r\n}\r\n\r\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false };\r\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false };\r\n\r\nfunction toCallState(\r\n  callResult: CallResult | undefined,\r\n  contractInterface: Interface | undefined,\r\n  fragment: FunctionFragment | undefined,\r\n  latestBlockNumber: number | undefined,\r\n): CallState {\r\n  if (!callResult) return INVALID_CALL_STATE;\r\n  const { valid, data, blockNumber } = callResult;\r\n  if (!valid) return INVALID_CALL_STATE;\r\n  if (valid && !blockNumber) return LOADING_CALL_STATE;\r\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE;\r\n  const success = data && data.length > 2;\r\n  const syncing = (blockNumber ?? 0) < latestBlockNumber;\r\n  let result: Result | undefined = undefined;\r\n  if (success && data) {\r\n    try {\r\n      result = contractInterface.decodeFunctionResult(fragment, data);\r\n    } catch (error) {\r\n      console.debug('Result data parsing failed', fragment, data);\r\n      return {\r\n        valid: true,\r\n        loading: false,\r\n        error: true,\r\n        syncing,\r\n        result,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    valid: true,\r\n    loading: false,\r\n    syncing,\r\n    result: result,\r\n    error: !success,\r\n  };\r\n}\r\n\r\nexport function useSingleContractMultipleData(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  callInputs: OptionalMethodInputs[],\r\n  options?: ListenerOptions,\r\n): CallState[] {\r\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName]);\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      contract && fragment && callInputs && callInputs.length > 0\r\n        ? callInputs.map<Call>((inputs) => {\r\n            return {\r\n              address: contract.address,\r\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n            };\r\n          })\r\n        : [],\r\n    [callInputs, contract, fragment],\r\n  );\r\n\r\n  const results = useCallsData(calls, options);\r\n  const latestBlockNumber = useBlockNumber();\r\n  // console.log(fragment, calls, results, latestBlockNumber, \"multicall\")\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) => toCallState(result, contract?.interface, fragment, latestBlockNumber));\r\n  }, [fragment, contract, results, latestBlockNumber]);\r\n}\r\n\r\nexport function useMultipleContractSingleData(\r\n  addresses: (string | undefined)[],\r\n  contractInterface: Interface,\r\n  methodName: string,\r\n  callInputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions,\r\n): CallState[] {\r\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName]);\r\n  const callData: string | undefined = useMemo(\r\n    () =>\r\n      fragment && isValidMethodArgs(callInputs)\r\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\r\n        : undefined,\r\n    [callInputs, contractInterface, fragment],\r\n  );\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      fragment && addresses && addresses.length > 0 && callData\r\n        ? addresses.map<Call | undefined>((address) => {\r\n            return address && callData\r\n              ? {\r\n                  address,\r\n                  callData,\r\n                }\r\n              : undefined;\r\n          })\r\n        : [],\r\n    [addresses, callData, fragment],\r\n  );\r\n\r\n  const results = useCallsData(calls, options);\r\n\r\n  const latestBlockNumber = useBlockNumber();\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) => toCallState(result, contractInterface, fragment, latestBlockNumber));\r\n  }, [fragment, results, contractInterface, latestBlockNumber]);\r\n}\r\n\r\nexport function useSingleCallResult(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  inputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions,\r\n): CallState {\r\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName]);\r\n\r\n  const calls = useMemo<Call[]>(() => {\r\n    return contract && fragment && isValidMethodArgs(inputs)\r\n      ? [\r\n          {\r\n            address: contract.address,\r\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n          },\r\n        ]\r\n      : [];\r\n  }, [contract, fragment, inputs]);\r\n\r\n  const result = useCallsData(calls, options)[0];\r\n  const latestBlockNumber = useBlockNumber();\r\n\r\n  return useMemo(() => {\r\n    return toCallState(result, contract?.interface, fragment, latestBlockNumber);\r\n  }, [result, contract, fragment, latestBlockNumber]);\r\n}\r\n","import { Contract } from \"@ethersproject/contracts\";\r\nimport { AddressZero } from \"@ethersproject/constants\";\r\nimport { JsonRpcSigner, Web3Provider } from \"@ethersproject/providers\";\r\nimport { ChainId } from \"@intercroneswap/v2-sdk\";\r\nimport { ethAddress, remove0xPrefix } from \"@intercroneswap/java-tron-provider\";\r\nimport { getAddress } from \"ethers/lib/utils\";\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\r\n  11111: \"\",\r\n  1: \"shasta.\",\r\n  201910292: \"nile.\",\r\n};\r\n\r\nexport function getEtherscanLink(\r\n  chainId: ChainId,\r\n  data: string,\r\n  type: \"transaction\" | \"token\" | \"address\" | \"block\"\r\n): string {\r\n  const prefix = `https://${\r\n    ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[11111]\r\n  }tronscan.org`;\r\n\r\n  switch (type) {\r\n    case \"transaction\": {\r\n      return `${prefix}/#/transaction/${remove0xPrefix(data)}`;\r\n    }\r\n    case \"token\": {\r\n      return `${prefix}/#/token20/${ethAddress.toTron(data)}`;\r\n    }\r\n    case \"address\":\r\n    default: {\r\n      return `${prefix}/#/address/${ethAddress.toTron(data)}`;\r\n    }\r\n  }\r\n}\r\n\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  const parsed = isAddress(address);\r\n  if (!parsed) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n  const tronAddress = ethAddress.toTron(parsed);\r\n  return `${tronAddress.substring(0, chars)}...${tronAddress.substr(-chars)}`;\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(\r\n  library: Web3Provider,\r\n  account: string\r\n): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked();\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(\r\n  library: Web3Provider,\r\n  account?: string\r\n): any {\r\n  // return account ? library?.trx.sign : library?.trx\r\n  return account ? getSigner(library, account) : library;\r\n}\r\n\r\n// account is optional\r\nexport function getContract(\r\n  address: string,\r\n  ABI: any,\r\n  library: Web3Provider,\r\n  account?: string\r\n): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n  return new Contract(\r\n    address,\r\n    ABI,\r\n    getProviderOrSigner(library, account) as any\r\n  );\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\r\n}\r\n","import { ChainId } from \"@intercroneswap/v2-sdk\";\r\nimport MULTICALL_ABI from \"./abi.json\";\r\n\r\nconst MULTICALL_NETWORKS: { [chainId in ChainId]: string } = {\r\n  // TODO: TRON: mainnet multicall contract address\r\n  [ChainId.MAINNET]: \"0xD3573a8728A49512A1485D63180Ed5b095e11D5C\",\r\n  [ChainId.NILE]: \"0x04A6730FC23a5f2C3d94F7C7aCb4F92Eab8282c2\",\r\n  [ChainId.SHASTA]: \"0x9037ae53c89147e009d26f7547143544be00f984\",\r\n};\r\n\r\nexport { MULTICALL_ABI, MULTICALL_NETWORKS };\r\n","import { Contract } from \"@ethersproject/contracts\";\r\nimport { ChainId } from \"@intercroneswap/v2-sdk\";\r\nimport { useMemo } from \"react\";\r\nimport ENS_PUBLIC_RESOLVER_ABI from \"../constants/abis/ens-public-resolver.json\";\r\nimport ENS_ABI from \"../constants/abis/ens-registrar.json\";\r\nimport { MULTICALL_ABI, MULTICALL_NETWORKS } from \"../constants/multicall\";\r\nimport { getContract } from \"../utils\";\r\nimport { useActiveWeb3React } from \"./index\";\r\n\r\n// returns null on errors\r\nfunction useContract(\r\n  address: string | undefined,\r\n  ABI: any,\r\n  withSignerIfPossible = true\r\n): Contract | null {\r\n  const { library, account } = useActiveWeb3React();\r\n\r\n  return useMemo(() => {\r\n    if (!address || !ABI || !library) return null;\r\n    try {\r\n      return getContract(\r\n        address,\r\n        ABI,\r\n        library,\r\n        withSignerIfPossible && account ? account : undefined\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Failed to get contract\", error);\r\n      return null;\r\n    }\r\n  }, [address, ABI, library, withSignerIfPossible, account]);\r\n}\r\n\r\nexport function useENSRegistrarContract(\r\n  withSignerIfPossible?: boolean\r\n): Contract | null {\r\n  const { chainId } = useActiveWeb3React();\r\n  let address: string | undefined;\r\n  if (chainId) {\r\n    switch (chainId) {\r\n      // TODO(tron): shasta TNS ?\r\n      case ChainId.MAINNET:\r\n        address = \"0x99fb68F0672E3E16AbB071342eF03355dfcb1797\";\r\n        break;\r\n      // TODO\r\n      case ChainId.NILE:\r\n        address = \"0xD2577ec90C6Fb23EC208B27609867E30D69bDc89\";\r\n        break;\r\n    }\r\n  }\r\n  return useContract(address, ENS_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useENSResolverContract(\r\n  address: string | undefined,\r\n  withSignerIfPossible?: boolean\r\n): Contract | null {\r\n  return useContract(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useMulticallContract(): Contract | null {\r\n  const { chainId } = useActiveWeb3React();\r\n  return useContract(\r\n    chainId && MULTICALL_NETWORKS[chainId],\r\n    MULTICALL_ABI,\r\n    false\r\n  );\r\n}\r\n","import { namehash } from 'ethers/lib/utils';\r\nimport { useMemo } from 'react';\r\nimport { useSingleCallResult } from '../state/multicall/hooks';\r\nimport { isAddress } from '../utils';\r\nimport isZero from '../utils/isZero';\r\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract';\r\nimport useDebounce from './useDebounce';\r\n\r\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\r\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\r\n  const debouncedAddress = useDebounce(address, 200);\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\r\n    try {\r\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined];\r\n    } catch (error) {\r\n      return [undefined];\r\n    }\r\n  }, [debouncedAddress]);\r\n  const registrarContract = useENSRegistrarContract(false);\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\r\n  const resolverAddressResult = resolverAddress.result?.[0];\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false,\r\n  );\r\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\r\n\r\n  const changed = debouncedAddress !== address;\r\n  return {\r\n    ENSName: changed ? null : name.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || name.loading,\r\n  };\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","/**\r\n * Returns true if the string value is zero in hex\r\n * @param hexNumberString\r\n */\r\nexport default function isZero(hexNumberString: string) {\r\n  return /^0x0*$/.test(hexNumberString);\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { ChainId } from '@intercroneswap/v2-sdk';\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  claim?: { recipient: string };\r\n  summary?: string;\r\n}>('transactions/addTransaction');\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>('transactions/finalizeTransaction');\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>('transactions/checkedTransaction');\r\n","import { TransactionResponse } from '@ethersproject/providers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { addTransaction } from './actions';\r\nimport { TransactionDetails } from './reducer';\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: {\r\n    summary?: string;\r\n    approval?: { tokenAddress: string; spender: string };\r\n    claim?: { recipient: string };\r\n  },\r\n) => void {\r\n  const { chainId, account } = useActiveWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      {\r\n        summary,\r\n        approval,\r\n        claim,\r\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {},\r\n    ) => {\r\n      if (!account) return;\r\n      if (!chainId) return;\r\n\r\n      const { hash } = response;\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.');\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }));\r\n    },\r\n    [dispatch, chainId, account],\r\n  );\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useActiveWeb3React();\r\n\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  return chainId ? state[chainId] ?? {} : {};\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions();\r\n\r\n  if (!transactionHash || !transactions[transactionHash]) return false;\r\n\r\n  return !transactions[transactionHash].receipt;\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000;\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions();\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash];\r\n        if (!tx) return false;\r\n        if (tx.receipt) {\r\n          return false;\r\n        } else {\r\n          const approval = tx.approval;\r\n          if (!approval) return false;\r\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\r\n        }\r\n      }),\r\n    [allTransactions, spender, tokenAddress],\r\n  );\r\n}\r\n\r\n// watch for submissions to claim\r\n// return null if not done loading, return undefined if not found\r\nexport function useUserHasSubmittedClaim(account?: string): {\r\n  claimSubmitted: boolean;\r\n  claimTxn: TransactionDetails | undefined;\r\n} {\r\n  const allTransactions = useAllTransactions();\r\n\r\n  // get the txn if it has been submitted\r\n  const claimTxn = useMemo(() => {\r\n    const txnIndex = Object.keys(allTransactions).find((hash) => {\r\n      const tx = allTransactions[hash];\r\n      return tx.claim && tx.claim.recipient === account;\r\n    });\r\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined;\r\n  }, [account, allTransactions]);\r\n\r\n  return { claimSubmitted: Boolean(claimTxn), claimTxn };\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { useActiveWeb3React } from \"hooks\";\r\nimport Jazzicon from \"jazzicon\";\r\n\r\nexport default function Identicon() {\r\n  const ref = useRef<HTMLDivElement>();\r\n\r\n  const { account } = useActiveWeb3React();\r\n\r\n  useEffect(() => {\r\n    if (account && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)));\r\n    }\r\n  }, [account]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: \"16px\",\r\n        width: \"16px\",\r\n        borderRadius: \"50%\",\r\n      }}\r\n      ref={ref as any}\r\n    />\r\n  );\r\n}\r\n","import \"./loader.scss\";\r\n\r\nexport default function Loader({ stroke }: { stroke?: string }) {\r\n  return (\r\n    <svg\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className=\"styled-svg\"\r\n    >\r\n      <path\r\n        d=\"M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 9.27455 20.9097 6.80375 19.1414 5\"\r\n        stroke={stroke ? stroke : \"#fff\"}\r\n        strokeWidth=\"2.5\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { CheckCircle, Copy } from \"react-feather\";\r\nimport useCopyClipboard from \"hooks/useCopyClipboard\";\r\n\r\nexport default function CopyHelper(props: {\r\n  toCopy: string;\r\n  children?: React.ReactNode;\r\n}) {\r\n  const [isCopied, setCopied] = useCopyClipboard();\r\n\r\n  return (\r\n    <Box className=\"copy-icon\" onClick={() => setCopied(props.toCopy)}>\r\n      {isCopied ? (\r\n        <>\r\n          <CheckCircle size={\"16\"} />\r\n          <Typography component=\"span\" ml=\"4px\" fontSize=\"14px\">\r\n            Copied\r\n          </Typography>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Copy size={\"16\"} />\r\n          {props.children}\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import copy from 'copy-to-clipboard';\r\nimport { useCallback, useEffect, useState } from 'react';\r\n\r\nexport default function useCopyClipboard(timeout = 500): [boolean, (toCopy: string) => void] {\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  const staticCopy = useCallback((text: any) => {\r\n    const didCopy = copy(text);\r\n    setIsCopied(didCopy);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isCopied) {\r\n      const hide = setTimeout(() => {\r\n        setIsCopied(false);\r\n      }, timeout);\r\n\r\n      return () => {\r\n        clearTimeout(hide);\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [isCopied, setIsCopied, timeout]);\r\n\r\n  return [isCopied, staticCopy];\r\n}\r\n","import { CheckCircle, Triangle } from \"react-feather\";\r\nimport { Typography, Box, Link } from \"@mui/material\";\r\nimport Loader from \"components/Loader\";\r\nimport { useActiveWeb3React } from \"hooks\";\r\nimport { getEtherscanLink } from \"utils\";\r\nimport { useAllTransactions } from \"state/transactions/hooks\";\r\n\r\nexport default function Transaction({ hash }: { hash: string }) {\r\n  const { chainId } = useActiveWeb3React();\r\n  const allTransactions = useAllTransactions();\r\n\r\n  const tx = allTransactions?.[hash];\r\n  const summary = tx?.summary;\r\n  const pending = !tx?.receipt;\r\n  const success =\r\n    !pending &&\r\n    tx &&\r\n    (tx.receipt?.status === 1 || typeof tx.receipt?.status === \"undefined\");\r\n\r\n  if (!chainId) return null;\r\n\r\n  return (\r\n    <div>\r\n      <Link\r\n        href={getEtherscanLink(chainId, hash, \"transaction\")}\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          textDecoration: \"none\",\r\n          p: \"4px 0\",\r\n          \"&:hover\": {\r\n            textDecoration: \"underline\",\r\n          },\r\n        }}\r\n      >\r\n        <Typography color=\"primary\" fontSize=\"14px\">\r\n          {summary ?? hash} ↗\r\n        </Typography>\r\n        <Box>\r\n          {pending ? (\r\n            <Loader stroke=\"#6164ff\" />\r\n          ) : success ? (\r\n            <CheckCircle size=\"16\" color=\"#2e7d32\" />\r\n          ) : (\r\n            <Triangle size=\"16\" color=\"#d32f2f\" />\r\n          )}\r\n        </Box>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ExternalLink as LinkIcon } from \"react-feather\";\r\nimport { Box, Typography, Button, Link, IconButton } from \"@mui/material\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { ethAddress } from \"@intercroneswap/java-tron-provider\";\r\nimport Identicon from \"components/Identicon\";\r\nimport Copy from \"./Copy\";\r\nimport Transaction from \"./Transaction\";\r\nimport { SUPPORTED_WALLETS } from \"../../constants\";\r\nimport { injected } from \"connectors\";\r\nimport { useActiveWeb3React } from \"hooks\";\r\nimport { AppDispatch } from \"state\";\r\nimport { clearAllTransactions } from \"state/transactions/actions\";\r\nimport { shortenAddress, getEtherscanLink } from \"utils\";\r\n\r\nfunction renderTransactions(transactions: string[]) {\r\n  return (\r\n    <Box>\r\n      {transactions.map((hash, i) => {\r\n        return <Transaction key={i} hash={hash} />;\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n\r\ninterface AccountDetailsProps {\r\n  toggleWalletModal: () => void;\r\n  pendingTransactions: string[];\r\n  confirmedTransactions: string[];\r\n  ENSName?: string;\r\n  openOptions: () => void;\r\n}\r\n\r\nexport default function AccountDetails({\r\n  toggleWalletModal,\r\n  pendingTransactions,\r\n  confirmedTransactions,\r\n  ENSName,\r\n  openOptions,\r\n}: AccountDetailsProps) {\r\n  const { chainId, account, connector } = useActiveWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  function formatConnectorName() {\r\n    const name = Object.keys(SUPPORTED_WALLETS).map(\r\n      (k) => SUPPORTED_WALLETS[k].name\r\n    )[0];\r\n    return (\r\n      <Typography color=\"#888d9b\" fontSize=\"14px\">\r\n        Connected with {name}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  function getStatusIcon() {\r\n    if (connector === injected) {\r\n      return (\r\n        <Box mr=\"8px\">\r\n          <Identicon />\r\n        </Box>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const clearAllTransactionsCallback = useCallback(() => {\r\n    if (chainId) dispatch(clearAllTransactions({ chainId }));\r\n  }, [dispatch, chainId]);\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        <IconButton className=\"close-icon\" onClick={toggleWalletModal}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n        <Typography p=\"16px\">Account</Typography>\r\n        <Box p=\"0 16px 24px 16px\">\r\n          <Box className=\"info-card\" p=\"16px\">\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              {formatConnectorName()}\r\n              <Button\r\n                variant=\"outlined\"\r\n                sx={{ fontSize: \"12px\", lineHeight: \"1.5\", p: \"4px 6px\" }}\r\n                onClick={() => {\r\n                  openOptions();\r\n                }}\r\n              >\r\n                Change\r\n              </Button>\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {ENSName ? (\r\n                  <>\r\n                    {getStatusIcon()}\r\n                    <Typography fontSize=\"20px\"> {ENSName}</Typography>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {getStatusIcon()}\r\n                    <Typography fontSize=\"20px\">\r\n                      {\" \"}\r\n                      {account && shortenAddress(account)}\r\n                    </Typography>\r\n                  </>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {account && (\r\n                  <Copy toCopy={ethAddress.toTron(account)}>\r\n                    <Typography component=\"span\" ml=\"4px\" fontSize=\"14px\">\r\n                      Copy Address\r\n                    </Typography>\r\n                  </Copy>\r\n                )}\r\n                {chainId && account && (\r\n                  <Link\r\n                    className=\"address-link\"\r\n                    href={getEtherscanLink(\r\n                      chainId,\r\n                      ENSName ? ENSName : account,\r\n                      \"address\"\r\n                    )}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                  >\r\n                    <LinkIcon size={16} />\r\n                    <Typography component=\"span\" ml=\"4px\" fontSize=\"14px\">\r\n                      View on Tronscan\r\n                    </Typography>\r\n                  </Link>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      {!!pendingTransactions.length || !!confirmedTransactions.length ? (\r\n        <Box p=\"16px 24px\">\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n            mb=\"16px\"\r\n          >\r\n            <Typography>Recent Transactions</Typography>\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"text\"\r\n              onClick={clearAllTransactionsCallback}\r\n              sx={{ textTransform: \"lowercase\" }}\r\n            >\r\n              (clear all)\r\n            </Button>\r\n          </Box>\r\n          {renderTransactions(pendingTransactions)}\r\n          {renderTransactions(confirmedTransactions)}\r\n        </Box>\r\n      ) : (\r\n        <Typography p=\"16px 24px\">\r\n          Your transactions will appear here...\r\n        </Typography>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\n\r\nexport default function Option({\r\n  clickable = true,\r\n  onClick = null,\r\n  color,\r\n  header,\r\n  subheader = null,\r\n  icon,\r\n  active = false,\r\n  id,\r\n}: {\r\n  clickable?: boolean;\r\n  onClick?: null | (() => void);\r\n  color: string;\r\n  header: React.ReactNode;\r\n  subheader: React.ReactNode | null;\r\n  icon: string;\r\n  active?: boolean;\r\n  id: string;\r\n}) {\r\n  const content = (\r\n    <Box\r\n      className=\"option-card-clickable\"\r\n      onClick={onClick ? onClick : () => {}}\r\n      sx={{\r\n        backgroundColor: active ? \"#EDEEF2\" : \"#ffffff\",\r\n        borderColor: active ? \"transparent\" : \"#EDEEF2\",\r\n        \"&:hover\": {\r\n          cursor: clickable ? \"pointer\" : \"\",\r\n          border: clickable ? `1px solid #6164ff` : ``,\r\n        },\r\n      }}\r\n    >\r\n      <Box>\r\n        <Box\r\n          sx={{\r\n            color,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          {!active && <Box className=\"green-circle\" />}\r\n          {header}\r\n        </Box>\r\n        {subheader && (\r\n          <Typography fontSize=\"12px\" mt=\"10px\">\r\n            {subheader}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n      <Box\r\n        component=\"img\"\r\n        src={icon}\r\n        alt={\"Icon\"}\r\n        sx={{ width: \"24px\", height: \"24px\" }}\r\n      />\r\n    </Box>\r\n  );\r\n\r\n  return content;\r\n}\r\n","import { AbstractConnector } from \"@web3-react/abstract-connector\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport Loader from \"components/Loader\";\r\nimport Option from \"./Option\";\r\nimport { SUPPORTED_WALLETS } from \"../../constants\";\r\n\r\nexport default function PendingView({\r\n  connector,\r\n  error = false,\r\n  setPendingError,\r\n  tryActivation,\r\n}: {\r\n  connector?: AbstractConnector;\r\n  error?: boolean;\r\n  setPendingError: (error: boolean) => void;\r\n  tryActivation: (connector: AbstractConnector) => void;\r\n}) {\r\n  return (\r\n    <Box>\r\n      <Box\r\n        mb=\"20px\"\r\n        sx={{\r\n          borderRadius: \"12px\",\r\n          border: `1px solid ${error ? \"#FF6871\" : \"#C3C5CB\"}`,\r\n        }}\r\n      >\r\n        <Box sx={{ display: \"flex\", alignItems: \"center\" }} p=\"16px\">\r\n          {error ? (\r\n            <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <Typography color=\"#FF6871\">Error connecting.</Typography>\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"contained\"\r\n                sx={{\r\n                  backgroundColor: \"#ced0d9\",\r\n                  color: \"#000000\",\r\n                  lineHeight: \"1.5\",\r\n                  ml: \"8px\",\r\n                  \"&:hover\": {\r\n                    backgroundColor: \"#a8abb3\",\r\n                  },\r\n                }}\r\n                onClick={() => {\r\n                  setPendingError(false);\r\n                  connector && tryActivation(connector);\r\n                }}\r\n              >\r\n                Try Again\r\n              </Button>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              <Loader stroke=\"#000\" />\r\n              <Typography ml=\"8px\">Initializing...</Typography>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      {Object.keys(SUPPORTED_WALLETS).map((key) => {\r\n        const option = SUPPORTED_WALLETS[key];\r\n        if (option.connector === connector) {\r\n          return (\r\n            <Option\r\n              id={`connect-${key}`}\r\n              key={key}\r\n              clickable={false}\r\n              color={option.color}\r\n              header={option.name}\r\n              subheader={option.description}\r\n              icon={require(\"../../assets/images/\" + option.iconName).default}\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// modified from https://usehooks.com/usePrevious/\r\nexport default function usePrevious<T>(value: T) {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = useRef<T>();\r\n\r\n  // Store current value in ref\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); // Only re-run if value changes\r\n\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current;\r\n}\r\n","import { AbstractConnector } from \"@web3-react/abstract-connector\";\r\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Dialog, Typography, Box, IconButton } from \"@mui/material\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport ReactGA from \"react-ga\";\r\nimport AccountDetails from \"components/AccountDetails\";\r\nimport Option from \"./Option\";\r\nimport PendingView from \"./PendingView\";\r\nimport { SUPPORTED_WALLETS } from \"../../constants\";\r\nimport usePrevious from \"hooks/usePrevious\";\r\nimport { ApplicationModal } from \"state/application/actions\";\r\nimport { useModalOpen, useWalletModalToggle } from \"state/application/hooks\";\r\n\r\nconst WALLET_VIEWS = {\r\n  OPTIONS: \"options\",\r\n  OPTIONS_SECONDARY: \"options_secondary\",\r\n  ACCOUNT: \"account\",\r\n  PENDING: \"pending\",\r\n};\r\n\r\nexport default function WalletModal({\r\n  pendingTransactions,\r\n  confirmedTransactions,\r\n  ENSName,\r\n}: {\r\n  pendingTransactions: string[]; // hashes of pending\r\n  confirmedTransactions: string[]; // hashes of confirmed\r\n  ENSName?: string;\r\n}) {\r\n  // important that these are destructed from the account-specific web3-react context\r\n  const { active, account, connector, activate, error } = useWeb3React();\r\n\r\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\r\n\r\n  const [pendingWallet, setPendingWallet] = useState<\r\n    AbstractConnector | undefined\r\n  >();\r\n\r\n  const [pendingError, setPendingError] = useState<boolean>();\r\n\r\n  const walletModalOpen = useModalOpen(ApplicationModal.WALLET);\r\n  const toggleWalletModal = useWalletModalToggle();\r\n\r\n  const previousAccount = usePrevious(account);\r\n\r\n  // close on connection, when logged out before\r\n  useEffect(() => {\r\n    if (account && !previousAccount && walletModalOpen) {\r\n      toggleWalletModal();\r\n    }\r\n  }, [account, previousAccount, toggleWalletModal, walletModalOpen]);\r\n\r\n  // always reset to account view\r\n  useEffect(() => {\r\n    if (walletModalOpen) {\r\n      setPendingError(false);\r\n      setWalletView(WALLET_VIEWS.ACCOUNT);\r\n    }\r\n  }, [walletModalOpen]);\r\n\r\n  // close modal when a connection is successful\r\n  const activePrevious = usePrevious(active);\r\n  const connectorPrevious = usePrevious(connector);\r\n  useEffect(() => {\r\n    if (\r\n      walletModalOpen &&\r\n      ((active && !activePrevious) ||\r\n        (connector && connector !== connectorPrevious && !error))\r\n    ) {\r\n      setWalletView(WALLET_VIEWS.ACCOUNT);\r\n    }\r\n  }, [\r\n    setWalletView,\r\n    active,\r\n    error,\r\n    connector,\r\n    walletModalOpen,\r\n    activePrevious,\r\n    connectorPrevious,\r\n  ]);\r\n\r\n  const tryActivation = async (connector: AbstractConnector | undefined) => {\r\n    let name = \"\";\r\n    Object.keys(SUPPORTED_WALLETS).map((key) => {\r\n      if (connector === SUPPORTED_WALLETS[key].connector) {\r\n        return (name = SUPPORTED_WALLETS[key].name);\r\n      }\r\n      return true;\r\n    });\r\n    // log selected wallet\r\n    ReactGA.event({\r\n      category: \"Wallet\",\r\n      action: \"Change Wallet\",\r\n      label: name,\r\n    });\r\n    setPendingWallet(connector); // set wallet for pending view\r\n    setWalletView(WALLET_VIEWS.PENDING);\r\n\r\n    connector &&\r\n      activate(connector, undefined, true).catch((error) => {\r\n        if (error instanceof UnsupportedChainIdError) {\r\n          activate(connector); // a little janky...can't use setError because the connector isn't set\r\n        } else {\r\n          console.error(error);\r\n          setPendingError(true);\r\n        }\r\n      });\r\n  };\r\n\r\n  // get wallets user can switch too, depending on device/browser\r\n  function getOptions() {\r\n    return Object.keys(SUPPORTED_WALLETS).map((key) => {\r\n      const option = SUPPORTED_WALLETS[key];\r\n      return (\r\n        <Option\r\n          id={`connect-${key}`}\r\n          onClick={() => {\r\n            option.connector === connector\r\n              ? setWalletView(WALLET_VIEWS.ACCOUNT)\r\n              : !option.href && tryActivation(option.connector);\r\n          }}\r\n          key={key}\r\n          active={option.connector === connector}\r\n          color={option.color}\r\n          header={option.name}\r\n          subheader={null} //use option.descriptio to bring back multi-line\r\n          icon={require(\"../../assets/images/\" + option.iconName).default}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  function getModalContent() {\r\n    if (error) {\r\n      return (\r\n        <Box>\r\n          <IconButton className=\"close-icon\" onClick={toggleWalletModal}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography p=\"16px\">\r\n            {error instanceof UnsupportedChainIdError\r\n              ? \"Wrong Network\"\r\n              : \"Error connecting\"}\r\n          </Typography>\r\n          {error instanceof UnsupportedChainIdError ? (\r\n            <Typography\r\n              color=\"warning.main\"\r\n              sx={{ p: { xs: \"16px\", md: \"32px\" } }}\r\n            >\r\n              Please connect to the appropriate TRON network.\r\n            </Typography>\r\n          ) : (\r\n            <Typography color=\"error\" sx={{ p: { xs: \"16px\", md: \"32px\" } }}>\r\n              Error connecting. Try refreshing the page.\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      );\r\n    }\r\n    if (account && walletView === WALLET_VIEWS.ACCOUNT) {\r\n      return (\r\n        <AccountDetails\r\n          toggleWalletModal={toggleWalletModal}\r\n          pendingTransactions={pendingTransactions}\r\n          confirmedTransactions={confirmedTransactions}\r\n          ENSName={ENSName}\r\n          openOptions={() => setWalletView(WALLET_VIEWS.OPTIONS)}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <Box>\r\n        <IconButton className=\"close-icon\" onClick={toggleWalletModal}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n        {walletView !== WALLET_VIEWS.ACCOUNT ? (\r\n          <Typography\r\n            color=\"primary.main\"\r\n            p=\"16px\"\r\n            sx={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setPendingError(false);\r\n              setWalletView(WALLET_VIEWS.ACCOUNT);\r\n            }}\r\n          >\r\n            Back\r\n          </Typography>\r\n        ) : (\r\n          <Typography p=\"16px\" sx={{ cursor: \"pointer\" }}>\r\n            Connect to a wallet\r\n          </Typography>\r\n        )}\r\n        <Box sx={{ p: { xs: \"16px\", md: \"32px\" } }}>\r\n          {walletView === WALLET_VIEWS.PENDING ? (\r\n            <PendingView\r\n              connector={pendingWallet}\r\n              error={pendingError}\r\n              setPendingError={setPendingError}\r\n              tryActivation={tryActivation}\r\n            />\r\n          ) : (\r\n            <Box>{getOptions()}</Box>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={walletModalOpen}\r\n      onClose={toggleWalletModal}\r\n      sx={{\r\n        \"> .MuiDialog-container\": {\r\n          \"> .MuiPaper-root\": {\r\n            maxWidth: \"420px\",\r\n            width: { xs: \"100%\", sm: \"70%\", md: \"50%\" },\r\n          },\r\n        },\r\n      }}\r\n    >\r\n      {getModalContent()}\r\n    </Dialog>\r\n  );\r\n}\r\n","import { AbstractConnector } from \"@web3-react/abstract-connector\";\r\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\r\nimport { useMemo } from \"react\";\r\nimport { Activity } from \"react-feather\";\r\nimport { Button, Typography } from \"@mui/material\";\r\nimport { injected } from \"connectors\";\r\nimport useENSName from \"hooks/useENSName\";\r\nimport { useWalletModalToggle } from \"state/application/hooks\";\r\nimport {\r\n  isTransactionRecent,\r\n  useAllTransactions,\r\n} from \"state/transactions/hooks\";\r\nimport { TransactionDetails } from \"state/transactions/reducer\";\r\nimport { shortenAddress } from \"utils\";\r\nimport Identicon from \"components/Identicon\";\r\nimport Loader from \"components/Loader\";\r\nimport WalletModal from \"components/WalletModal\";\r\nimport \"./web3-status.scss\";\r\n\r\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\r\n  return b.addedTime - a.addedTime;\r\n}\r\n\r\nconst SOCK = (\r\n  <span\r\n    role=\"img\"\r\n    aria-label=\"has socks emoji\"\r\n    style={{ marginTop: -4, marginBottom: -4 }}\r\n  >\r\n    🧦\r\n  </span>\r\n);\r\n\r\nfunction StatusIcon({ connector }: { connector: AbstractConnector }) {\r\n  if (connector === injected) {\r\n    return <Identicon />;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction Web3StatusInner() {\r\n  const { account, connector, error } = useWeb3React();\r\n  const { ENSName } = useENSName(account ?? undefined);\r\n\r\n  const allTransactions = useAllTransactions();\r\n\r\n  const sortedRecentTransactions = useMemo(() => {\r\n    const txs = Object.values(allTransactions);\r\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\r\n  }, [allTransactions]);\r\n\r\n  const pending = sortedRecentTransactions\r\n    .filter((tx) => !tx.receipt)\r\n    .map((tx) => tx.hash);\r\n\r\n  const hasPendingTransactions = !!pending.length;\r\n  const hasSocks = null;\r\n  const toggleWalletModal = useWalletModalToggle();\r\n\r\n  if (account) {\r\n    return (\r\n      <Button variant=\"contained\" color=\"primary\" onClick={toggleWalletModal}>\r\n        {hasPendingTransactions ? (\r\n          <>\r\n            <Typography mr=\"8px\">{pending?.length} Pending</Typography>{\" \"}\r\n            <Loader />\r\n          </>\r\n        ) : (\r\n          <>\r\n            {hasSocks ? SOCK : null}\r\n            <Typography mr=\"8px\" ml=\"4px\">\r\n              {ENSName || shortenAddress(account)}\r\n            </Typography>\r\n          </>\r\n        )}\r\n        {!hasPendingTransactions && connector && (\r\n          <StatusIcon connector={connector} />\r\n        )}\r\n      </Button>\r\n    );\r\n  } else if (error) {\r\n    return (\r\n      <Button variant=\"contained\" color=\"error\" onClick={toggleWalletModal}>\r\n        <Activity className=\"network-icon\" />\r\n        <Typography ml=\"4px\">\r\n          {error instanceof UnsupportedChainIdError ? \"Wrong Network\" : \"Error\"}\r\n        </Typography>\r\n      </Button>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={toggleWalletModal}>\r\n          Connect Wallet\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function Web3Status() {\r\n  const { account } = useWeb3React();\r\n\r\n  const { ENSName } = useENSName(account ?? undefined);\r\n\r\n  const allTransactions = useAllTransactions();\r\n\r\n  const sortedRecentTransactions = useMemo(() => {\r\n    const txs = Object.values(allTransactions);\r\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\r\n  }, [allTransactions]);\r\n\r\n  const pending = sortedRecentTransactions\r\n    .filter((tx) => !tx.receipt)\r\n    .map((tx) => tx.hash);\r\n  const confirmed = sortedRecentTransactions\r\n    .filter((tx) => tx.receipt)\r\n    .map((tx) => tx.hash);\r\n\r\n  // if (!contextNetwork.active && !active) {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <Web3StatusInner />\r\n      <WalletModal\r\n        ENSName={ENSName ?? undefined}\r\n        pendingTransactions={pending}\r\n        confirmedTransactions={confirmed}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Link,\r\n  Box,\r\n  Button,\r\n  Menu,\r\n  MenuItem,\r\n  Container,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport TelegramIcon from \"@mui/icons-material/Telegram\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport DiscordIcon from \"assets/images/discord-brands.svg\";\r\nimport \"./header.scss\";\r\n\r\nimport Web3Status from \"components/Web3Status\";\r\n\r\nconst menuLists = [\r\n  {\r\n    link: \"/play\",\r\n    text: \"Play War\",\r\n  },\r\n  {\r\n    link: \"/stake\",\r\n    text: \"Meow Staking\",\r\n  },\r\n];\r\n\r\n\r\n\r\nconst Header = () => {\r\n  const history = useHistory();\r\n\r\n  const [anchorElUser, setAnchorElUser] = useState<null | HTMLElement>(null);\r\n\r\n  const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  const handleClickMenu = (link: string) => {\r\n    handleCloseUserMenu();\r\n    history.push(link);\r\n  };\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"static\"\r\n      className=\"appbar\"\r\n      sx={{ backgroundColor: \"rgba(9,9,10,1)\" }}\r\n    >\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar\r\n          disableGutters\r\n          sx={{ justifyContent: \"space-between\", columnGap: \"8px\" }}\r\n        >\r\n          <Link href=\"/\" className=\"logo\" sx={{ textDecoration: \"none\" }}>\r\n            {/* <Box component=\"img\" src={LogoImage} alt=\"logo\" /> */}\r\n            <Typography\r\n              fontFamily=\"Audiowide\"\r\n              sx={{ fontSize: { xs: \"24px\", sm: \"36px\", md: \"40px\" } }}\r\n            >\r\n              Catz Fight\r\n            </Typography>\r\n          </Link>\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\", columnGap: \"8px\" }}>\r\n            <Box\r\n              className=\"social-buttons\"\r\n              sx={{ display: { xs: \"none\", sm: \"flex\" } }}\r\n            >\r\n              <Button\r\n                href=\"https://twitter.com/CryptoMoonCatz\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"social-button\"\r\n                variant=\"contained\"\r\n                sx={{\r\n                  backgroundColor: \"transparent\",\r\n                  \"&: hover\": {\r\n                    backgroundColor: \"rgba(38,40,42,0.95)\",\r\n                  },\r\n                }}\r\n              >\r\n                <TwitterIcon sx={{ color: \"#fff\" }} />\r\n              </Button>\r\n              <Button\r\n                href=\"https://t.me/CryptoMoonCatz\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"social-button\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={{\r\n                  backgroundColor: \"transparent\",\r\n                  \"&: hover\": {\r\n                    backgroundColor: \"rgba(38,40,42,0.95)\",\r\n                  },\r\n                }}\r\n              >\r\n                <TelegramIcon sx={{ color: \"#fff\" }} />\r\n              </Button>\r\n              <Button\r\n                href=\"https://discord.gg/warchest\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"social-button\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={{\r\n                  backgroundColor: \"transparent\",\r\n                  \"&: hover\": {\r\n                    backgroundColor: \"rgba(38,40,42,0.95)\",\r\n                  },\r\n                }}\r\n              >\r\n                <Box component=\"img\" src={DiscordIcon} alt=\"\" />\r\n              </Button>\r\n            </Box>\r\n            <Web3Status />\r\n            <Button\r\n              onClick={handleOpenUserMenu}\r\n              className=\"menu-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={{\r\n                backgroundColor: \"rgba(101,230,255,0.12)\",\r\n                \"&: hover\": {\r\n                  backgroundColor: \"rgba(101,230,255,0.15)\",\r\n                },\r\n              }}\r\n            >\r\n              <MenuIcon\r\n                sx={{\r\n                  color: \"rgba(101,230,255,0.9)\",\r\n                  \"&: hover\": {\r\n                    color: \"rgba(101,230,255,1)\",\r\n                  },\r\n                }}\r\n              />\r\n            </Button>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElUser}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              open={Boolean(anchorElUser)}\r\n              onClose={handleCloseUserMenu}\r\n              sx={{\r\n                mt: \"45px\",\r\n              }}\r\n            >\r\n              <MenuItem\r\n                component=\"a\"\r\n                href=\"https://www.cryptomooncatz.com\"\r\n                sx={{\r\n                  backgroundColor: \"rgba(101,230,255,0.12)\",\r\n                  color: \"rgba(101,230,255,0.9)\",\r\n                }}\r\n              >\r\n                Home\r\n              </MenuItem>\r\n              {menuLists.map((list, key) => (\r\n                <MenuItem\r\n                  key={key}\r\n                  sx={{\r\n                    backgroundColor: \"rgba(101,230,255,0.12)\",\r\n                    color: \"rgba(101,230,255,0.9)\",\r\n                  }}\r\n                  onClick={() => handleClickMenu(list.link)}\r\n                >\r\n                  {list.text}\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default Header;\r\n","import { Box } from \"@mui/material\";\r\nimport \"./banner.scss\";\r\nimport BannerImage1 from \"assets/images/ban1.png\";\r\nimport BannerImage2 from \"assets/images/ban2.png\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <>\r\n      <Box className=\"banner-container\">\r\n        <Box\r\n          component=\"img\"\r\n          sx={{\r\n            width: { xs: \"150px\", sm: \"200px\" },\r\n            mr: { xs: 1, sm: 2, md: 3 },\r\n          }}\r\n          src={BannerImage1}\r\n          alt=\"Banner Image\"\r\n        />\r\n        <Box\r\n          component=\"img\"\r\n          sx={{ width: { xs: \"150px\", sm: \"200px\" } }}\r\n          src={BannerImage2}\r\n          alt=\"Banner Image\"\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface IPendingTxn {\r\n  readonly txnHash: string;\r\n  readonly text: string;\r\n  readonly type: string;\r\n}\r\n\r\nconst initialState: Array<IPendingTxn> = [];\r\n\r\nconst pendingTxnsSlice = createSlice({\r\n  name: \"pendingTransactions\",\r\n  initialState,\r\n  reducers: {\r\n    fetchPendingTxns(state, action: PayloadAction<IPendingTxn>) {\r\n      state.push(action.payload);\r\n    },\r\n    clearPendingTxn(state, action: PayloadAction<string>) {\r\n      const target = state.find((x) => x.txnHash === action.payload);\r\n      if (target) {\r\n        state.splice(state.indexOf(target), 1);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const getStakingTypeText = (action: string) => {\r\n  return action.toLowerCase() === \"stake\"\r\n    ? \"Staking KANDY\"\r\n    : \"Unstaking SKANDY\";\r\n};\r\n\r\nexport const getWrapingTypeText = (isWrap: boolean) => {\r\n  return isWrap ? \"Wrap SKANDY\" : \"Unwrap wSKANDY\";\r\n};\r\n\r\nexport const isPendingTxn = (\r\n  pendingTransactions: IPendingTxn[],\r\n  type: string\r\n) => {\r\n  return pendingTransactions.map((x) => x.type).includes(type);\r\n};\r\n\r\nexport const txnButtonText = (\r\n  pendingTransactions: IPendingTxn[],\r\n  type: string,\r\n  defaultText: string\r\n) => {\r\n  return isPendingTxn(pendingTransactions, type) ? \"Pending...\" : defaultText;\r\n};\r\n\r\nexport const { fetchPendingTxns, clearPendingTxn } = pendingTxnsSlice.actions;\r\n\r\nexport default pendingTxnsSlice.reducer;\r\n","export const setAll = (state: any, properties: any) => {\r\n    const props = Object.keys(properties);\r\n    props.forEach(key => {\r\n        state[key] = properties[key];\r\n    });\r\n};\r\n","import { Store } from 'react-notifications-component';\r\n\r\ninterface INotification {\r\n    title: string,\r\n    message? : string,\r\n    type: 'success' | 'danger' | 'info' | 'default' | 'warning'\r\n}\r\n\r\nexport const notification = ({ title, message=\"\", type }: INotification) => {\r\n    return Store.addNotification({\r\n        title: title,\r\n        message: message,\r\n        type: type,\r\n        insert: \"bottom\",\r\n        container: \"bottom-right\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n        }\r\n    });\r\n}","import axios from \"axios\";\r\n\r\nexport const baseURL = \"http://35.91.17.10\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: baseURL,\r\n});\r\n\r\nexport default instance;","import {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport { clearPendingTxn } from \"./pending-txns-slice\";\r\nimport { setAll } from \"helpers/set-all\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\nimport tronWeb from \"tronweb\";\r\nimport io from \"socket.io-client\";\r\nimport { notification } from \"utils/notification\";\r\nimport instance from \"constants/axios\";\r\nimport { baseURL } from 'constants/axios'\r\n\r\ndeclare var window: any;\r\nconst socket = io(baseURL);\r\n\r\ninterface IWidrawNFT {\r\n  address: any;\r\n}\r\n\r\nexport const widrawNFT = createAsyncThunk(\r\n  \"widrawNFT/widrawNFT\",\r\n\r\n  async ({ address }: IWidrawNFT) => {\r\n    let meowContract: any;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    let usersData: any;\r\n    await instance\r\n      .get(`/api/userinfo/find?address=${address}`)\r\n      .then((response) => {\r\n        usersData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    try {\r\n      await meowContract\r\n        .claimNFT(usersData.ownNfts)\r\n        .send({ feeLimit: 100000000 });\r\n\r\n      await instance.post(\"/api/userinfo/create\", {\r\n        address: address,\r\n        stakeAmount: 0,\r\n        claimAmount: 0,\r\n        ownNfts: [-1],\r\n      });\r\n      notification({ title: \"Successfully Withdrew!\", type: \"success\" });\r\n      socket.emit(\"enter\");\r\n      return;\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n      return;\r\n    } finally {\r\n    }\r\n  }\r\n);\r\n\r\ninterface IClaimMoney {\r\n  address: any;\r\n}\r\n\r\nexport const claimMoney = createAsyncThunk(\r\n  \"claimMoney/claimMoney\",\r\n\r\n  async ({ address }: IClaimMoney) => {\r\n    let meowContract: any;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    let usersData: any;\r\n    await instance\r\n      .get(`/api/userinfo/find?address=${address}`)\r\n      .then((response) => {\r\n        usersData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    try {\r\n      await meowContract\r\n        .claimMoney(usersData.claimAmount)\r\n        .send({ feeLimit: 100000000 });\r\n      await instance.post(\"/api/userinfo/create\", {\r\n        address: address,\r\n        stakeAmount: 0,\r\n        claimAmount: -1,\r\n        ownNfts: [],\r\n      });\r\n\r\n      notification({ title: \"Successfully Withdrew!\", type: \"success\" });\r\n      socket.emit(\"enter\");\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n      return;\r\n    } finally {\r\n    }\r\n  }\r\n);\r\n\r\ninterface IclaimFightMeow {\r\n  tokenId: number;\r\n  fightRoom: number;\r\n  whichroom: number;\r\n  url: string;\r\n  waitingRandom: number;\r\n  address: any;\r\n  gamePrice: number;\r\n}\r\n\r\nexport const ClaimFight = createAsyncThunk(\r\n  \"claimfight/claimfightMeow\",\r\n\r\n  async (\r\n    {\r\n      tokenId,\r\n      fightRoom,\r\n      whichroom,\r\n      url,\r\n      waitingRandom,\r\n      address,\r\n      gamePrice,\r\n    }: IclaimFightMeow,\r\n    { dispatch }\r\n  ) => {\r\n    let meowContract: any;\r\n    console.log('claimFight Data: ', tokenId, fightRoom, whichroom, url, waitingRandom, address, gamePrice);\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n\r\n    let enterTx;\r\n    let random1: number[] = [];\r\n    let random2: number[] = [];\r\n    try {\r\n      enterTx = await meowContract\r\n        .claimFight(tokenId, fightRoom)\r\n        .send({ feeLimit: 200000000, callValue: gamePrice });\r\n\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          if (transaction && transaction.ret && transaction.ret.length > 0) {\r\n            receipt = transaction.ret[0].contractRet;\r\n          }\r\n          console.log(\"receipt: \", receipt, enterTx);\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      const random_tmp = (\r\n        await meowContract.randoms(fightRoom, 1).call()\r\n      ).toNumber();\r\n      console.log('whichroom: ', whichroom);\r\n      await instance.post(\"/api/betting/update\", {\r\n        roomNum: whichroom,\r\n        secondNFT: url,\r\n        secondAddress: address,\r\n        secondRandom: random_tmp,\r\n        secondId: tokenId,\r\n      });\r\n\r\n      let firstRandom = waitingRandom;\r\n      let secondRandom = random_tmp;\r\n      random1[whichroom] = firstRandom;\r\n      random2[whichroom] = secondRandom;\r\n\r\n      let winnerData: any;\r\n      let flag: boolean = false;\r\n      let resultData: any;\r\n      let usersData: any;\r\n      await instance.post(\"/api/random/create\", {\r\n        randomNumber1: firstRandom,\r\n        randomNumber2: secondRandom,\r\n        roomNum: fightRoom,\r\n      });\r\n\r\n      await instance\r\n        .get(`/api/betting/find?fightRoom=${fightRoom}`)\r\n        .then((response) => {\r\n          resultData = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n\r\n      const jackpotAmount =\r\n        (await meowContract.jackpotAmount().call()).toNumber() /\r\n        Math.pow(10, 6);\r\n\r\n      await instance\r\n        .get(`/api/userinfo`)\r\n        .then((response) => {\r\n          usersData = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n\r\n      let totalStake = 0;\r\n      for (let i = 0; i < usersData.length; i++) {\r\n        totalStake += usersData[i].stakeAmount;\r\n      }\r\n      if (firstRandom === 77777) {\r\n        if (secondRandom === 77777) {\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: resultData.firstAddress,\r\n            stakeAmount: 0,\r\n            claimAmount: (jackpotAmount * 5) / 20,\r\n            ownNfts: [],\r\n          });\r\n\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: address,\r\n            stakeAmount: 0,\r\n            claimAmount: (jackpotAmount * 5) / 20,\r\n            ownNfts: [],\r\n          });\r\n        } else {\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: resultData.firstAddress,\r\n            stakeAmount: 0,\r\n            claimAmount: (jackpotAmount * 4) / 10,\r\n            ownNfts: [],\r\n          });\r\n\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: address,\r\n            stakeAmount: 0,\r\n            claimAmount: (jackpotAmount * 1) / 10,\r\n            ownNfts: [],\r\n          });\r\n        }\r\n\r\n        for (let i = 0; i < usersData.length; i++) {\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: usersData[i].address,\r\n            stakeAmount: 0,\r\n            claimAmount:\r\n              (jackpotAmount * usersData[i].stakeAmount * 4) / totalStake / 10,\r\n            ownNfts: [],\r\n          });\r\n        }\r\n        alert(\"You hit the Jackpot. Receive the award!!!!!\");\r\n        await meowContract.setJackpot(jackpotAmount / 10);\r\n      }\r\n\r\n      if (secondRandom === 77777) {\r\n        if (firstRandom === 77777) {\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: resultData.firstAddress,\r\n            stakeAmount: 0,\r\n            claimAmount: (jackpotAmount * 5) / 20,\r\n            ownNfts: [],\r\n          });\r\n\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: address,\r\n            stakeAmount: 0,\r\n            claimAmount: (jackpotAmount * 5) / 20,\r\n            ownNfts: [],\r\n          });\r\n        } else {\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: address,\r\n            stakeAmount: 0,\r\n            claimAmount: (jackpotAmount * 4) / 20,\r\n            ownNfts: [],\r\n          });\r\n\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: resultData.firstAddress,\r\n            stakeAmount: 0,\r\n            claimAmount: (jackpotAmount * 1) / 20,\r\n            ownNfts: [],\r\n          });\r\n        }\r\n        for (let i = 0; i < usersData.length; i++) {\r\n          await instance.post(\"/api/userinfo/create\", {\r\n            address: usersData[i].address,\r\n            stakeAmount: 0,\r\n            claimAmount:\r\n              (jackpotAmount * usersData[i].stakeAmount * 4) / totalStake / 10,\r\n            ownNfts: [],\r\n          });\r\n        }\r\n        alert(\"You hit the Jackpot. Receive the award!!!!!\");\r\n        await meowContract.setJackpot(jackpotAmount / 10);\r\n      }\r\n\r\n      if (firstRandom > secondRandom) {\r\n        await instance\r\n          .get(`/api/winner/find?address=${resultData.firstAddress}`)\r\n          .then((response) => {\r\n            winnerData = response.data;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n\r\n        await instance.post(\"/api/userinfo/create\", {\r\n          address: resultData.firstAddress,\r\n          stakeAmount: 0,\r\n          claimAmount: whichroom < 3 ? (gamePrice * 6) / 5 : gamePrice * 6,\r\n          ownNfts: [tokenId, resultData.tokenId],\r\n        });\r\n      } else if (firstRandom < secondRandom) {\r\n        await instance\r\n          .get(`/api/winner/find?address=${address}`)\r\n          .then((response) => {\r\n            winnerData = response.data;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n\r\n        await instance.post(\"/api/userinfo/create\", {\r\n          address: address,\r\n          stakeAmount: 0,\r\n          claimAmount: whichroom < 3 ? (gamePrice * 6) / 5 : gamePrice * 6,\r\n          ownNfts: [tokenId, resultData.tokenId],\r\n        });\r\n      } else {\r\n        await instance.post(\"/api/userinfo/create\", {\r\n          address: resultData.firstAddress,\r\n          stakeAmount: 0,\r\n          claimAmount: whichroom < 3 ? gamePrice : gamePrice * 5,\r\n          ownNfts: [resultData.tokenId],\r\n        });\r\n\r\n        await instance.post(\"/api/userinfo/create\", {\r\n          address: address,\r\n          stakeAmount: 0,\r\n          claimAmount: whichroom < 3 ? gamePrice : gamePrice * 5,\r\n          ownNfts: [tokenId],\r\n        });\r\n        flag = true;\r\n      }\r\n\r\n      if (winnerData) {\r\n        await instance.post(\"/api/winner/update\", {\r\n          address: winnerData.address,\r\n          winCount: winnerData.winCount + 1,\r\n        });\r\n      } else {\r\n        if (!flag) {\r\n          if (firstRandom > secondRandom) {\r\n            await instance.post(\"/api/winner/create\", {\r\n              address: winnerData.address,\r\n              winCount: 1,\r\n            });\r\n          } else if (firstRandom < secondRandom) {\r\n            await instance.post(\"/api/winner/create\", {\r\n              address: address,\r\n              winCount: 1,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      await instance.post(\"/api/result/create\", {\r\n        randomNumber1: firstRandom,\r\n        randomNumber2: secondRandom,\r\n        nftUrl1: resultData.firstNFT,\r\n        nftUrl2: resultData.secondNFT,\r\n        address1: resultData.firstAddress,\r\n        address2: resultData.secondAddress,\r\n        roomNum: fightRoom\r\n      });\r\n\r\n      notification({ title: \"Successfully Entered!\", type: \"success\" });\r\n      return {\r\n        random1,\r\n        random2,\r\n      };\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n    } finally {\r\n      if (enterTx) {\r\n        dispatch(clearPendingTxn(enterTx));\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nexport interface IWinSlice {\r\n  random1: number[];\r\n  random2: number[];\r\n}\r\n\r\nconst fightSlice = createSlice({\r\n  name: \"fight\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(ClaimFight.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(ClaimFight.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(ClaimFight.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.fight;\r\n\r\nexport default fightSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (fight) => fight);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\n\r\ninterface IwalletInfo {\r\n  account: any;\r\n}\r\n\r\nexport const walletInfo = createAsyncThunk(\r\n  \"nft/walletInfo\",\r\n  async ({ account }: IwalletInfo) => {\r\n    let tmpData: any;\r\n    let usersData: any;\r\n    await instance\r\n      .get(`/api/userinfo`)\r\n      .then((response) => {\r\n        usersData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    let totalStake = 0;\r\n    for (let i = 0; i < usersData.length; i++) {\r\n      totalStake += usersData[i].stakeAmount;\r\n    }\r\n\r\n    await instance\r\n      .get(`/api/userinfo/find?address=${account}`)\r\n      .then((response) => {\r\n        tmpData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    let nftCount = tmpData?.ownNfts.length;\r\n    let nftInfo: number[] = tmpData?.ownNfts;\r\n    let trxAmount = tmpData?.claimAmount / 1000000;\r\n    let stakeAmount = tmpData?.stakeAmount;\r\n    return {\r\n      nftCount,\r\n      trxAmount,\r\n      stakeAmount,\r\n      totalStake,\r\n      nftInfo,\r\n    };\r\n  }\r\n);\r\n\r\nexport interface IWalletInfoDetail {\r\n  nftCount: number;\r\n  trxAmount: number;\r\n  stakeAmount: number;\r\n  totalStake: number;\r\n  nftInfo: number[];\r\n}\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nconst nftSlice = createSlice({\r\n  name: \"nft\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(walletInfo.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(walletInfo.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(walletInfo.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.nfts;\r\n\r\nexport default nftSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (nfts) => nfts);\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport instance from \"constants/axios\";\r\nimport { notification } from \"utils/notification\";\r\nimport tronWeb from \"tronweb\";\r\n\r\ndeclare var window: any;\r\n\r\ninterface IAddNft {\r\n  address: string;\r\n}\r\n\r\nexport const AddNft = createAsyncThunk(\r\n  \"nftadd/AddNft\",\r\n  async ({ address }: IAddNft) => {\r\n    let nftContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        nftContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(address));\r\n      }\r\n    }\r\n    let nftName = await nftContract.name().call();\r\n    let nftSymbol = await nftContract.symbol().call();\r\n\r\n    await instance.post(`/api/waiting/create`, {\r\n      address: address,\r\n      name: nftName,\r\n      symbol: nftSymbol,\r\n    });\r\n\r\n    notification({ title: \"Successfully Sent!\", type: \"success\" });\r\n  }\r\n);\r\n\r\ninterface IApproveNft {\r\n  address: string;\r\n  name: string;\r\n  symbol: string;\r\n}\r\n\r\nexport const ApproveNft = createAsyncThunk(\r\n  \"nftapprove/ApproveNft\",\r\n  async ({ address, name, symbol }: IApproveNft) => {\r\n    await instance.post(`/api/approved/create`, {\r\n      address: address,\r\n      name: name,\r\n      symbol: symbol,\r\n    });\r\n    await instance.delete(`/api/waiting/delete/${address}`);\r\n\r\n    notification({ title: \"Successfully Approved!\", type: \"success\" });\r\n  }\r\n);\r\n\r\ninterface IDeleteWaiting {\r\n  address: string;\r\n}\r\n\r\nexport const DeleteWaiting = createAsyncThunk(\r\n  \"deletewaiting/DeleteWaiting\",\r\n  async ({ address }: IDeleteWaiting) => {\r\n    await instance.delete(`/api/waiting/delete/${address}`);\r\n\r\n    notification({ title: \"Successfully Deleted!\", type: \"success\" });\r\n  }\r\n);\r\n\r\ninterface IDeleteApproved {\r\n  address: string;\r\n}\r\n\r\nexport const DeleteApproved = createAsyncThunk(\r\n  \"DeleteApproved/DeleteApproved\",\r\n  async ({ address }: IDeleteApproved) => {\r\n    await instance.delete(`/api/approved/delete/${address}`);\r\n\r\n    notification({ title: \"Successfully Deleted!\", type: \"success\" });\r\n  }\r\n);\r\n","import { Box, Button, Modal, TextField, Typography } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { claimMoney, widrawNFT } from \"store/slices/play-slice\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { walletInfo } from \"store/slices/walletInfo-slice\";\r\nimport React from \"react\";\r\nimport { AddNft } from \"store/slices/addnft-slice\";\r\n\r\nconst availableStyle = {\r\n  paddingY: \"4px\",\r\n  textAlign: \"center\",\r\n  fontSize: \"18px\",\r\n  color: \"#F39B33\",\r\n};\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 500,\r\n  backgroundColor: \"rgba(38,40,42)\",\r\n  border: \"none\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst Jackpot = () => {\r\n  const { account } = useWeb3React();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [walletAddress, setWalletAddress] = React.useState(\"\");\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const JackpotAmount = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.jackpotAmount\r\n  );\r\n  let contractNFTs: number = useSelector<IReduxState, number>(\r\n    (state) => state.wallet.nftCount\r\n  );\r\n  let widrawAmount: number = useSelector<IReduxState, number>(\r\n    (state) => state.wallet.trxAmount\r\n  );\r\n\r\n  const history = useHistory();\r\n  const handleClickStake = (link: string) => {\r\n    history.push(link);\r\n  };\r\n\r\n  const getAvailableData = useCallback(() => {\r\n    dispatch(walletInfo({ account: account }));\r\n  }, [account]);\r\n\r\n  const onWidrawNFT = useCallback(async () => {\r\n    let widrawState = await dispatch(widrawNFT({ address: account }));\r\n    if (widrawState.meta.requestStatus === \"fulfilled\") {\r\n      getAvailableData();\r\n    }\r\n  }, [account]);\r\n\r\n  const onClaimMoney = useCallback(async () => {\r\n    let claimState = await dispatch(claimMoney({ address: account }));\r\n    if (claimState.meta.requestStatus === \"fulfilled\") {\r\n      getAvailableData();\r\n    }\r\n  }, [account]);\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      getAvailableData();\r\n    }\r\n  }, [account]);\r\n\r\n  const handleRequest = useCallback(async () => {\r\n    await dispatch(AddNft({ address: walletAddress }));\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: \"rgba(230,239,237, 0.1)\",\r\n        paddingY: \"3px\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          color: \"#FF1E1E\",\r\n          fontSize: { xs: \"24px\", sm: \"30px\" },\r\n          py: 1,\r\n          px: { xs: 1, sm: 3 },\r\n          backgroundColor: \"rgba(38,40,42,0.64)\",\r\n          width: { xs: \"320px\", sm: \"615px\" },\r\n          textAlign: \"center\",\r\n          mx: \"auto\",\r\n        }}\r\n      >\r\n        War Chest Jackpot: {JackpotAmount} TRX\r\n      </Typography>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          flexWrap: \"wrap\",\r\n          alignItems: \"self-start\",\r\n          pb: 6,\r\n          mt: \"12px\",\r\n        }}\r\n      >\r\n        <Box sx={{ mr: 3, textAlign: \"center\" }}>\r\n          <Button onClick={handleOpen} variant=\"contained\" color=\"success\">\r\n            NFT Request\r\n          </Button>\r\n        </Box>\r\n        <Box sx={{ mr: 3, textAlign: \"center\" }}>\r\n          <Button variant=\"contained\" color=\"info\" onClick={onWidrawNFT}>\r\n            Withdraw NFTs\r\n          </Button>\r\n          <Typography sx={availableStyle}>\r\n            Available NFTs: {contractNFTs ? contractNFTs : 0} NFTs\r\n          </Typography>\r\n        </Box>\r\n        <Box sx={{ mr: 3, textAlign: \"center\" }}>\r\n          <Button variant=\"contained\" color=\"info\" onClick={onClaimMoney}>\r\n            Withdraw TRX\r\n          </Button>\r\n          <Typography sx={availableStyle}>\r\n            Available TRX: {widrawAmount ? widrawAmount : 0} TRX\r\n          </Typography>\r\n        </Box>\r\n        <Box sx={{ mr: 3, textAlign: \"center\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              handleClickStake(\"stake\");\r\n            }}\r\n          >\r\n            Meow Staking\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          color: \"#fff\",\r\n          fontSize: { xs: \"20px\", xl: \"24px\" },\r\n          py: 1,\r\n          px: { xs: 1, xl: 2 },\r\n          backgroundColor: \"rgba(38,40,42,0.64)\",\r\n          width: { xs: \"320px\", sm: \"450px\", xl: \"600px\" },\r\n          textAlign: \"center\",\r\n          position: { md: \"absolute\" },\r\n          mx: \"auto\",\r\n          left: \"6px\",\r\n          bottom: \"6px\",\r\n        }}\r\n      >\r\n        MEOW left to be mined: 99,999,980\r\n      </Typography>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Typography\r\n            color=\"white\"\r\n            fontFamily=\"Georgia\"\r\n            fontWeight=\"700\"\r\n            fontSize=\"30px\"\r\n          >\r\n            Please insert NFT Address\r\n          </Typography>\r\n          <TextField\r\n            sx={{\r\n              mt: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n            value={walletAddress}\r\n            onChange={(e) => {\r\n              setWalletAddress(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"info\"\r\n            sx={{\r\n              mt: \"20px\",\r\n              width: \"50%\",\r\n            }}\r\n            onClick={() => {\r\n              handleRequest();\r\n              handleClose();\r\n            }}\r\n          >\r\n            Send Reqeust\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Jackpot;\r\n","export const fightStyle = {\r\n  fontSize: { xs: \"32px\", sm: \"34px\", md: \"50px\" },\r\n  fontFamily: \"Georgia\",\r\n  fontWeight: \"900\",\r\n  color: \"white\",\r\n  lineHeight: { xs: \"32px\", sm: \"40px\", md: \"64px\" },\r\n  textAlign: \"center\",\r\n};\r\n\r\nexport const randomNumberStyle = {\r\n  fontSize: { xs: \"12px\", sm: \"16px\", md: \"20px\" },\r\n  color: \"white\",\r\n  fontWeight: \"900\",\r\n  fontFamily: \"Georgia\",\r\n};\r\n\r\nexport const roomStyleAvatar = {\r\n  width: { xs: \"120px\", sm: \"120px\", md: \"200px\" },\r\n  height: { xs: \"110px\", sm: \"140px\", md: \"200px\" },\r\n  borderRadius: \"12px\",\r\n};\r\n\r\nexport const buttonStyle = {\r\n  fontSize: { xs: \"15px\", sm: \"18px\" },\r\n  textAlign: \"center\",\r\n  position: \"absolute\",\r\n};\r\n\r\nexport const roomStyleBack = {\r\n  width: { xs: \"180px\", sm: \"240px\", md: \"300px\" },\r\n  height: { xs: \"240px\", sm: \"300px\", md: \"400px\" },\r\n};\r\n\r\nexport const style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: { xs: \"400px\", sm: \"500px\", md: \"700px\", lg: \"1000px\" },\r\n  height: \"600px\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n  backgroundColor: \"rgba(38,40,42)\",\r\n  borderRadius: 8,\r\n  overflowY: \"scroll\",\r\n  \"&::-webkit-scrollbar\": {\r\n    width: \"8px\",\r\n    backgroundColor: \"#555\",\r\n  },\r\n  \"&::-webkit-scrollbar-thumb\": {\r\n    borderRadius: \"8px\",\r\n    backgroundColor: \"#333\",\r\n  },\r\n};\r\n\r\nexport const avatarsStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-around\",\r\n  flexWrap: \"wrap\",\r\n}\r\n\r\nexport const modalAvatarStyle = {\r\n  width: {\r\n    sx: \"60px\",\r\n    sm: \"100px\",\r\n    md: \"150px\",\r\n    lg: \"230px\",\r\n  },\r\n  height: {\r\n    sx: \"60px\",\r\n    sm: \"100px\",\r\n    md: \"150px\",\r\n    lg: \"230px\",\r\n  },\r\n  borderRadius: \"12px\",\r\n};\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\n\r\ninterface IBattleDetails {\r\n  openState: boolean,\r\n  claimState: boolean,\r\n  whichroom: number,\r\n  whichfight: number,\r\n  waitingRandom: number,\r\n  decide: boolean,\r\n}\r\n\r\nexport const loadBattleDetails = createAsyncThunk(\r\n  \"app/loadBattleDetails\",\r\n  async ({ openState, claimState, whichfight, whichroom, waitingRandom, decide }: IBattleDetails ) => {\r\n    return {\r\n      openState,\r\n      claimState,\r\n      whichfight,\r\n      whichroom,\r\n      waitingRandom,\r\n      decide,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  openState: false,\r\n  claimState: false,\r\n  whichroom: 0,\r\n  whichfight: 0,\r\n  waitingRandom: 0,\r\n  decide: false,\r\n};\r\n\r\nexport interface IBattleSlice {\r\n  loading: boolean,\r\n  openState: boolean,\r\n  claimState: boolean,\r\n  whichroom: number,\r\n  whichfight: number,\r\n  waitingRandom: number,\r\n  decide: boolean,\r\n}\r\n\r\nconst battleSlice = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadBattleDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadBattleDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadBattleDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.battle;\r\n\r\nexport default battleSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (battle) => battle);\r\n","import { Color } from \"@material-ui/lab/Alert\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport type Message = IMessage & {\r\n  severity: Color;\r\n};\r\n\r\nexport interface MessagesState {\r\n  message: Message | null;\r\n}\r\n\r\ninterface IMessage {\r\n  text: string;\r\n  error?: any;\r\n}\r\n\r\n// Adds a message to the store\r\nconst createMessage = function (\r\n  state: MessagesState,\r\n  severity: Color,\r\n  text: IMessage\r\n) {\r\n  const message: Message = {\r\n    severity,\r\n    ...text,\r\n  };\r\n  state.message = message;\r\n};\r\nconst initialState: MessagesState = {\r\n  message: null,\r\n};\r\nconst messagesSlice = createSlice({\r\n  name: \"messages\",\r\n  initialState,\r\n  reducers: {\r\n    // Creates an error message\r\n    error(state, action: PayloadAction<IMessage>) {\r\n      createMessage(state, \"error\", action.payload);\r\n    },\r\n    // Creates an information message\r\n    info(state, action: PayloadAction<IMessage>) {\r\n      createMessage(state, \"info\", action.payload);\r\n    },\r\n    warning(state, action: PayloadAction<IMessage>) {\r\n      createMessage(state, \"warning\", action.payload);\r\n    },\r\n    success(state, action: PayloadAction<IMessage>) {\r\n      createMessage(state, \"success\", action.payload);\r\n    },\r\n    // Closes a message\r\n    close(state) {\r\n      state.message = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { error, info, close, warning, success } = messagesSlice.actions;\r\n\r\nexport default messagesSlice.reducer;\r\n","export const messages = {\r\n  please_connect:\r\n    \"Please connect your wallet to the Ether network to use Warchest.\",\r\n  please_connect_wallet: \"Please connect your wallet.\",\r\n  try_mint_more: (value: string) =>\r\n    `You're trying to mint more than the maximum payout available! The maximum mint payout is ${value} KANDY.`,\r\n  before_minting: \"Before minting, enter a value.\",\r\n  existing_mint:\r\n    \"You have an existing mint. Minting will reset your vesting period and forfeit any pending claimable rewards. We recommend claiming rewards first or using a fresh wallet. Do you still wish to proceed?\",\r\n  before_stake: \"Before staking, enter a value.\",\r\n  before_unstake: \"Before un staking, enter a value.\",\r\n  tx_successfully_send: \"Your transaction was successfully sent\",\r\n  your_balance_updated: \"Your balance was successfully updated\",\r\n  nothing_to_claim: \"You have nothing to claim\",\r\n  something_wrong: \"Something went wrong\",\r\n  switch_to_avalanche: \"Switch to the Avalanche network?\",\r\n  slippage_too_small: \"Slippage too small\",\r\n  slippage_too_big: \"Slippage too big\",\r\n  your_balance_update_soon: \"Your balance will update soon\",\r\n  before_wrap: \"Before wraping, enter a value.\",\r\n  before_unwrap: \"Before un wraping, enter a value.\",\r\n};\r\n","import { Dispatch } from \"redux\";\r\nimport { error } from \"../store/slices/messages-slice\";\r\nimport { messages } from \"../constants/messages\";\r\n\r\nexport const metamaskErrorWrap = (err: any, dispatch: Dispatch) => {\r\n    let text = messages.something_wrong;\r\n\r\n    if (err.code && err.code === -32603) {\r\n        if (err.message.indexOf(\"ds-math-sub-underflow\") >= 0) {\r\n            text = \"You may be trying to bond more than your balance! Error code: 32603. Message: ds-math-sub-underflow\";\r\n        }\r\n\r\n        if (err.data && err.data.message) {\r\n            text = err.data.message.includes(\":\") ? err.data.message.split(\":\")[1].trim() : err.data.data || err.data.message;\r\n        }\r\n\r\n        if (err.data && err.data.message && err.data.message.includes(\"gas required exceeds allowance\")) {\r\n            text = \"Insufficient balance to make a transaction\";\r\n        }\r\n\r\n        if (err.data && err.data.message && err.data.message.includes(\"Bond too small\")) {\r\n            text = \"Bond too small\";\r\n        }\r\n    }\r\n\r\n    if (err.code && err.code === 4001) {\r\n        if (err.message.includes(\"User denied transaction signature\")) {\r\n            text = \"User denied transaction signature\";\r\n        }\r\n    }\r\n\r\n    return dispatch(error({ text, error: err }));\r\n};\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport { metamaskErrorWrap } from \"helpers/metamask-error-wrap\";\r\nimport { SHASTA_TESTNET } from 'constants/addresses';\r\nimport tronWeb from 'tronweb';\r\nimport { notification } from \"utils/notification\";\r\n\r\ninterface IapproveNFT {\r\n  tokenId: Number;\r\n}\r\n\r\ndeclare var window: any\r\n\r\nexport const approveNFT = createAsyncThunk(\r\n  \"NFT/approveMFT\",\r\n  //@ts-ignore\r\n  async ({ tokenId }: IapproveNFT, { dispatch }) => {\r\n    let nftContract;\r\n    if(window) {\r\n      if(window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        nftContract = await window.tronWeb.contract().at(tronWeb.address.toHex(SHASTA_TESTNET.NFT_ADDRESS));\r\n      }\r\n    }\r\n    try {\r\n      let enterTx = await nftContract.approve(\r\n        SHASTA_TESTNET.MEOW_ADDRESS,\r\n        tokenId\r\n      ).send({ feeLimit: 100000000 });\r\n\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          if (transaction && transaction.ret && transaction.ret.length > 0) {\r\n            receipt = transaction.ret[0].contractRet;\r\n          }\r\n          console.log(\"receipt: \", receipt, enterTx);\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      notification({ title: \"Successfully approved!\", type: \"success\"});\r\n      return;\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\"});\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n    }\r\n  }\r\n);\r\n\r\ninterface IloadNftAllowance {\r\n  tokenIds: Number[];\r\n}\r\n\r\nexport const loadNftAllowance = createAsyncThunk(\r\n  \"app/loadNftAllowance\",\r\n  //@ts-ignore\r\n  async ({ tokenIds }: IloadNftAllowance) => {\r\n    let nftContract: any;\r\n    if(window) {\r\n      if(window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        nftContract = await window.tronWeb.contract().at(tronWeb.address.toHex(SHASTA_TESTNET.NFT_ADDRESS));\r\n      }\r\n    }\r\n    let allowtmp: String[] = [];\r\n    await Promise.all(\r\n      tokenIds.map(async (tokenId, index) => {\r\n        allowtmp[index] = await nftContract.getApproved(tokenId).call();\r\n      })\r\n    );\r\n    let allows: boolean[] = [];\r\n    allowtmp.map((allow, index) => {\r\n      allows[index] = allow === tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS);\r\n    });\r\n    return {\r\n      allowances: allows,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nexport interface INFTSlice {\r\n  allowances: boolean[];\r\n  loading: boolean;\r\n}\r\n\r\nconst nftSlice = createSlice({\r\n  name: \"nft\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n    .addCase(loadNftAllowance.pending, (state, action) => {\r\n      state.loading = true;\r\n    })\r\n    .addCase(loadNftAllowance.fulfilled, (state, action) => {\r\n      setAll(state, action.payload);\r\n      state.loading = false;\r\n    })\r\n    .addCase(loadNftAllowance.rejected, (state, { error }) => {\r\n      state.loading = false;\r\n    });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.nft;\r\n\r\nexport default nftSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (nft) => nft);\r\n","export const getDate = () => {\r\n  let date = new Date();\r\n  let year = date.getFullYear();\r\n  let month = date.getMonth() + 1;\r\n  let day = date.getDate();\r\n  let hour = date.getHours();\r\n  let minute = date.getMinutes();\r\n  let second = date.getSeconds();\r\n  let number =\r\n    year * Math.pow(10, 10) +\r\n    month * Math.pow(10, 8) +\r\n    day * Math.pow(10, 6) +\r\n    hour * Math.pow(10, 4) +\r\n    minute * Math.pow(10, 2) +\r\n    second;\r\n  return number;\r\n};\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { metamaskErrorWrap } from \"helpers/metamask-error-wrap\";\r\nimport { clearPendingTxn } from \"./pending-txns-slice\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\nimport tronWeb from \"tronweb\";\r\nimport { notification } from \"utils/notification\";\r\nimport instance from \"constants/axios\";\r\n\r\ninterface IenterRoomMeow {\r\n  tokenId: number;\r\n  fightRoom: number;\r\n  whichroom: number;\r\n  url: string;\r\n  address: any;\r\n  gamePrice: number;\r\n}\r\n\r\ndeclare var window: any;\r\n\r\nexport const EnterRoom = createAsyncThunk(\r\n  \"enterRoom/enterRoomMeow\",\r\n  async (\r\n    { tokenId, fightRoom, whichroom, url, address, gamePrice }: IenterRoomMeow,\r\n    { dispatch }\r\n  ) => {\r\n    console.log('enterRoom data: ', tokenId, fightRoom, whichroom, url, address, gamePrice);\r\n    let meowContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    let enterTx;\r\n    try {\r\n      enterTx = await meowContract\r\n        .enterRoom(tokenId, fightRoom)\r\n        .send({ feeLimit: 1000000000, callValue: gamePrice });\r\n\r\n      let receipt = null;\r\n      let attempts = 0;\r\n      while ((receipt === \"REVERT\" || receipt == null) && attempts < 1000) {\r\n        // give up after 10 attempts\r\n        if (window.tronWeb) {\r\n          await new Promise((resolve) => setTimeout(resolve, 2000));\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          if (transaction && transaction.ret && transaction.ret.length > 0) {\r\n            receipt = transaction.ret[0].contractRet;\r\n          }\r\n          console.log(\"receipt: \", receipt, enterTx);\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n        attempts++;\r\n      }\r\n      const random_tmp = (\r\n        await meowContract.randoms(fightRoom, 0).call()\r\n      ).toNumber();\r\n      await instance.post(\"/api/betting/create\", {\r\n        roomNum: whichroom,\r\n        firstNFT: url,\r\n        firstAddress: address,\r\n        fightRoom: fightRoom,\r\n        firstRandom: random_tmp,\r\n        tokenId: tokenId,\r\n      });\r\n      notification({ title: \"Successfully Entered!\", type: \"success\" });\r\n      return;\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n      if (enterTx) {\r\n        dispatch(clearPendingTxn(enterTx.hash));\r\n      }\r\n    }\r\n  }\r\n);\r\n","import { Box, Button, Skeleton } from \"@mui/material\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { avatarsStyle, modalAvatarStyle, style } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { approveNFT, loadNftAllowance } from \"store/slices/NFt-slice\";\r\nimport { getDate } from \"./getDate\";\r\nimport { EnterRoom } from \"store/slices/enter-room-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nexport function SampleModal() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { account } = useWeb3React();\r\n  const nftids: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nftids\r\n  );\r\n  const nfturis: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nfturis\r\n  );\r\n  const isLoading: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.nft.loading\r\n  );\r\n  const allowFlg: boolean[] = useSelector<IReduxState, boolean[]>(\r\n    (state) => state.nft.allowances\r\n  );\r\n  const openState: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.battle.openState\r\n  );\r\n  const whichroom: number = useSelector<IReduxState, number>(\r\n    (state) => state.battle.whichroom\r\n  );\r\n  const gamePrice: string = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.gameprice\r\n  );\r\n  const nftInfo: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.wallet.nftInfo\r\n  );\r\n  const baseUri: string = useSelector<IReduxState, string>(\r\n    (state) => state.nfts.nfturl\r\n  );\r\n\r\n  const approve = useCallback(async (id: Number) => {\r\n    await dispatch(\r\n      approveNFT({\r\n        tokenId: id,\r\n      })\r\n    );\r\n    await dispatch(loadNftAllowance({ tokenIds: nftids }));\r\n  }, [nftids]);\r\n\r\n  const closeModal = useCallback(async () => {\r\n    dispatch(\r\n      loadBattleDetails({\r\n        openState: false,\r\n        claimState: false,\r\n        whichroom: 0,\r\n        whichfight: 0,\r\n        waitingRandom: 0,\r\n        decide: false,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const onEnterRoom = useCallback(\r\n    async (id: number) => {\r\n      let fightRoomNum = getDate();\r\n      await dispatch(\r\n        EnterRoom({\r\n          tokenId: id,\r\n          fightRoom: fightRoomNum,\r\n          whichroom: whichroom,\r\n          url: `https://ipfs.io/ipfs/${baseUri?.slice(7, 53)}/${id}.png`,\r\n          address: account,\r\n          gamePrice: Number(gamePrice),\r\n        })\r\n      );\r\n    }, [gamePrice, baseUri, account, whichroom]);\r\n\r\n  return (\r\n    <Modal\r\n      open={openState}\r\n      onClose={() => {\r\n        closeModal();\r\n      }}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box sx={style}>\r\n        <Box sx={avatarsStyle}>\r\n          {nftInfo &&\r\n            nftInfo.map((id: number, index) => {\r\n              return (\r\n                <Box\r\n                  sx={{ m: 2, display: \"flex\", flexDirection: \"column\" }}\r\n                  key={index}\r\n                >\r\n                  <Box sx={{ mb: 2, display: \"flex\", flexDirection: \"column\" }}>\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={`https://ipfs.io/ipfs/${baseUri?.slice(7,53)}/${id}.png`}\r\n                      alt=\"NFT_avatar\"\r\n                      sx={modalAvatarStyle}\r\n                    />\r\n                  </Box>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                      onEnterRoom(id);\r\n                      closeModal();\r\n                    }}\r\n                  >\r\n                    Fight\r\n                  </Button>\r\n                </Box>\r\n              );\r\n            })}\r\n        </Box>\r\n        <Box sx={avatarsStyle}>\r\n          {nftids &&\r\n            nftids.map((id: number, index) => {\r\n              return (\r\n                <Box\r\n                  sx={{ m: 2, display: \"flex\", flexDirection: \"column\" }}\r\n                  key={index}\r\n                >\r\n                  <Box sx={{ mb: 2, display: \"flex\", flexDirection: \"column\" }}>\r\n                    {nfturis ? (\r\n                      <Box\r\n                        component=\"img\"\r\n                        src={nfturis?.[index]}\r\n                        alt=\"NFT_avatar\"\r\n                        sx={modalAvatarStyle}\r\n                      />\r\n                    ) : (\r\n                      <Skeleton sx={modalAvatarStyle} />\r\n                    )}\r\n                  </Box>\r\n                  {isLoading ? (\r\n                    <Skeleton height=\"36px\" />\r\n                  ) : (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={\r\n                        allowFlg?.[index]\r\n                          ? () => {\r\n                              onEnterRoom(id);\r\n                              closeModal();\r\n                            }\r\n                          : () => approve(id)\r\n                      }\r\n                    >\r\n                      {allowFlg?.[index] ? \"Fight\" : \"Approve\"}\r\n                    </Button>\r\n                  )}\r\n                </Box>\r\n              );\r\n            })}\r\n        </Box>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n}\r\n","import { Box, Button, Skeleton } from \"@mui/material\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { avatarsStyle, modalAvatarStyle, style } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useCallback } from \"react\";\r\nimport { approveNFT, loadNftAllowance } from \"store/slices/NFt-slice\";\r\nimport { ClaimFight } from \"store/slices/play-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nexport function BigRoomModal() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { account } = useWeb3React();\r\n  const nftids: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nftids\r\n  );\r\n  const nfturis: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nfturis\r\n  );\r\n  const isLoading: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.nft.loading\r\n  );\r\n  const allowFlg: boolean[] = useSelector<IReduxState, boolean[]>(\r\n    (state) => state.nft.allowances\r\n  );\r\n  const whichroom: number = useSelector<IReduxState, number>(\r\n    (state) => state.battle.whichroom\r\n  );\r\n  const gamePrice: string = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.gameprice\r\n  );\r\n  const claimState: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.battle.claimState\r\n  );\r\n  const whichfight: number = useSelector<IReduxState, number>(\r\n    (state) => state.battle.whichfight\r\n  );\r\n  const waitingRandom: number = useSelector<IReduxState, number>(\r\n    (state) => state.battle.waitingRandom\r\n  );\r\n  const nftInfo: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.wallet.nftInfo\r\n  );\r\n  const baseUri: string = useSelector<IReduxState, string>(\r\n    (state) => state.nfts.nfturl\r\n  );\r\n\r\n  const approve = useCallback(async (id: Number) => {\r\n    await dispatch(\r\n      approveNFT({\r\n        tokenId: id,\r\n      })\r\n    );\r\n    await dispatch(loadNftAllowance({ tokenIds: nftids }));\r\n  }, [dispatch, nftids]);\r\n\r\n  const closeModal = useCallback(async () => {\r\n    dispatch(\r\n      loadBattleDetails({\r\n        openState: false,\r\n        claimState: false,\r\n        whichroom: 0,\r\n        whichfight: 0,\r\n        waitingRandom: 0,\r\n        decide: false,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const onClaimFight = useCallback(\r\n    async (id: number) => {\r\n      await dispatch(\r\n        ClaimFight({\r\n          tokenId: id,\r\n          fightRoom: whichfight,\r\n          whichroom: whichroom,\r\n          url: `https://ipfs.io/ipfs/${baseUri?.slice(7, 53)}/${id}.png`,\r\n          waitingRandom: waitingRandom,\r\n          address: account,\r\n          gamePrice: Number(gamePrice),\r\n        })\r\n      );\r\n    },\r\n    [gamePrice, baseUri, account, whichroom, whichfight, waitingRandom]\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      open={claimState}\r\n      onClose={() => {\r\n        closeModal();\r\n      }}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box sx={style}>\r\n      <Box sx={avatarsStyle}>\r\n          {nftInfo &&\r\n            nftInfo.map((id: number, index) => {\r\n              return (\r\n                <Box\r\n                  sx={{ m: 2, display: \"flex\", flexDirection: \"column\" }}\r\n                  key={index}\r\n                >\r\n                  <Box sx={{ mb: 2, display: \"flex\", flexDirection: \"column\" }}>\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={`https://ipfs.io/ipfs/${baseUri?.slice(7,53)}/${id}.png`}\r\n                      alt=\"NFT_avatar\"\r\n                      sx={modalAvatarStyle}\r\n                    />\r\n                  </Box>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                      onClaimFight(id);\r\n                      closeModal();\r\n                    }}\r\n                  >\r\n                    Fight\r\n                  </Button>\r\n                </Box>\r\n              );\r\n            })}\r\n        </Box>\r\n        <Box sx={avatarsStyle}>\r\n          {nftids &&\r\n            nftids.map((id: number, index) => {\r\n              return (\r\n                <Box\r\n                  sx={{ m: 2, display: \"flex\", flexDirection: \"column\" }}\r\n                  key={index}\r\n                >\r\n                  <Box sx={{ mb: 2, display: \"flex\", flexDirection: \"column\" }}>\r\n                    {nfturis ? (\r\n                      <Box\r\n                        component=\"img\"\r\n                        src={`https://ipfs.io/ipfs/${baseUri?.slice(7,53)}/${id}.png`}\r\n                        alt=\"NFT_avatar\"\r\n                        sx={modalAvatarStyle}\r\n                      />\r\n                    ) : (\r\n                      <Skeleton sx={modalAvatarStyle} />\r\n                    )}\r\n                  </Box>\r\n                  {isLoading ? (\r\n                    <Skeleton height=\"36px\" />\r\n                  ) : (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={\r\n                        allowFlg?.[index]\r\n                          ? () => {\r\n                              onClaimFight(id);\r\n                              closeModal();\r\n                            }\r\n                          : () => approve(id)\r\n                      }\r\n                    >\r\n                      {allowFlg?.[index] ? \"Fight\" : \"Approve\"}\r\n                    </Button>\r\n                  )}\r\n                </Box>\r\n              );\r\n            })}\r\n        </Box>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n}\r\n","export const Datas = [\r\n    {\r\n      roomNum: 1,\r\n      firstNFT: \"\",\r\n      secondNFT: \"\",\r\n      firstAddress: \"\",\r\n      secondAddress: \"\",\r\n      firstRandom: 0,\r\n      secondRandom: 0,\r\n      tokenId: 0,\r\n      fightRoom: 0,\r\n      whichfight: 0,\r\n    },\r\n    {\r\n      roomNum: 2,\r\n      firstNFT: \"\",\r\n      secondNFT: \"\",\r\n      firstAddress: \"\",\r\n      secondAddress: \"\",\r\n      firstRandom: 0,\r\n      secondRandom: 0,\r\n      tokenId: 0,\r\n      fightRoom: 0,\r\n      whichfight: 0,\r\n    },\r\n    {\r\n      roomNum: 3,\r\n      firstNFT: \"\",\r\n      secondNFT: \"\",\r\n      firstAddress: \"\",\r\n      secondAddress: \"\",\r\n      firstRandom: 0,\r\n      secondRandom: 0,\r\n      tokenId: 0,\r\n      whichfight: 0,\r\n      fightRoom: 0,\r\n    },\r\n    {\r\n      roomNum: 4,\r\n      firstNFT: \"\",\r\n      secondNFT: \"\",\r\n      firstAddress: \"\",\r\n      secondAddress: \"\",\r\n      firstRandom: 0,\r\n      secondRandom: 0,\r\n      tokenId: 0,\r\n      fightRoom: 0,\r\n      whichfight: 0,\r\n    },\r\n    {\r\n      roomNum: 5,\r\n      firstNFT: \"\",\r\n      secondNFT: \"\",\r\n      firstAddress: \"\",\r\n      secondAddress: \"\",\r\n      firstRandom: 0,\r\n      secondRandom: 0,\r\n      tokenId: 0,\r\n      fightRoom: 0,\r\n      whichfight: 0,\r\n    },\r\n    {\r\n      roomNum: 6,\r\n      firstNFT: \"\",\r\n      secondNFT: \"\",\r\n      firstAddress: \"\",\r\n      secondAddress: \"\",\r\n      firstRandom: 0,\r\n      secondRandom: 0,\r\n      tokenId: 0,\r\n      fightRoom: 0,\r\n      whichfight: 0,\r\n    },\r\n    {\r\n      roomNum: 7,\r\n      firstNFT: \"\",\r\n      secondNFT: \"\",\r\n      firstAddress: \"\",\r\n      secondAddress: \"\",\r\n      firstRandom: 0,\r\n      secondRandom: 0,\r\n      tokenId: 0,\r\n      fightRoom: 0,\r\n      whichfight: 0,\r\n    },\r\n    {\r\n      roomNum: 8,\r\n      firstNFT: \"\",\r\n      secondNFT: \"\",\r\n      firstAddress: \"\",\r\n      secondAddress: \"\",\r\n      firstRandom: 0,\r\n      secondRandom: 0,\r\n      tokenId: 0,\r\n      fightRoom: 0,\r\n      whichfight: 0,\r\n    },\r\n  ];","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport { SHASTA_TESTNET } from 'constants/addresses';\r\nimport tronWeb from 'tronweb';\r\n\r\ndeclare var window: any\r\n\r\ninterface IloadNftDetails {\r\n  account: any;\r\n}\r\n\r\nexport const loadNftDetails = createAsyncThunk(\r\n  'nft/loadNftDetails',\r\n  async ({ account }: IloadNftDetails) => {\r\n    let nftContract;\r\n    if(window) {\r\n      if(window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        nftContract = await window.tronWeb.contract().at(tronWeb.address.toHex(SHASTA_TESTNET.NFT_ADDRESS));\r\n      }\r\n    }\r\n    let nftids: any[] = [];\r\n    let nfturl: string;\r\n    let nfturis: any[] = [];\r\n    nfturl = await nftContract.tokenURI(1).call();\r\n    const nft_counts = await nftContract.balanceOf(account).call();\r\n    for (let i = 0; i < Math.min(nft_counts, 6); i++) {\r\n      let tmptokenID = await nftContract.tokenOfOwnerByIndex(account, i).call();\r\n      nftids[i] = tronWeb.toDecimal(tmptokenID);\r\n    }\r\n    for (let i = 0; i < Math.min(nft_counts, 6); i++) {\r\n      nfturis[i] = `https://ipfs.io/ipfs/${nfturl.slice(7, 53)}/${\r\n        nftids[i]\r\n      }.png`;\r\n    }\r\n    return {\r\n      nftids,\r\n      nfturis,\r\n      nfturl,\r\n    };\r\n  }\r\n)\r\n\r\nexport interface INftDetailSlice {\r\n  nftids: any[];\r\n  nfturis: any[];\r\n  nfturl: string;\r\n  // contractNFTs: number;\r\n}\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nconst nftSlice = createSlice({\r\n  name: \"nft\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n    .addCase(loadNftDetails.pending, (state, action) => {\r\n      state.loading = true;\r\n    })\r\n    .addCase(loadNftDetails.fulfilled, (state, action) => {\r\n      setAll(state, action.payload);\r\n      state.loading = false;\r\n    })\r\n    .addCase(loadNftDetails.rejected, (state, { error }) => {\r\n      state.loading = false;\r\n    });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.nfts;\r\n\r\nexport default nftSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (nfts) => nfts);\r\n","import { useCallback } from \"react\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport roomPic from \"assets/images/Ui_box3.webp\";\r\nimport buttonBack from \"assets/images/button.png\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport { Datas } from \"./Datas\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport { loadNftDetails } from \"store/slices/Nftinfo-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport {\r\n  fightStyle,\r\n  randomNumberStyle,\r\n  roomStyleAvatar,\r\n  roomStyleBack,\r\n  buttonStyle,\r\n} from \"./style\";\r\nimport { loadNftAllowance } from \"store/slices/NFt-slice\";\r\nimport { gameDataStyle } from \"@types\";\r\n\r\nexport function SmallRooms() {\r\n  const { account } = useWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const firRandomData: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.fight.random1\r\n  );\r\n  const secRandomData: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.fight.random2\r\n  );\r\n  const gameData: gameDataStyle[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.app.gameData\r\n  );\r\n  const decide: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.battle.decide\r\n  );\r\n  const nftids: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nftids\r\n  );\r\n\r\n  const onEnterModal = useCallback(\r\n    async (index: number) => {\r\n      await dispatch(loadNftDetails({ account: account }));\r\n      await dispatch(loadNftAllowance({ tokenIds: nftids }));\r\n      await dispatch(\r\n        loadBattleDetails({\r\n          openState: true,\r\n          whichroom: index + 1,\r\n          claimState: false,\r\n          whichfight: 0,\r\n          waitingRandom: 0,\r\n          decide: false,\r\n        })\r\n      );\r\n    },\r\n    [account, nftids]\r\n  );\r\n\r\n  const onClaimModal = useCallback(\r\n    async (index: number, fightRoom: number, firstRandom: number) => {\r\n      await dispatch(loadNftDetails({ account: account }));\r\n      await dispatch(loadNftAllowance({ tokenIds: nftids }));\r\n      await dispatch(\r\n        loadBattleDetails({\r\n          openState: false,\r\n          whichroom: index + 1,\r\n          claimState: true,\r\n          whichfight: fightRoom,\r\n          waitingRandom: firstRandom,\r\n          decide: false,\r\n        })\r\n      );\r\n    },\r\n    [account, nftids]\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        flexWrap: \"wrap\",\r\n      }}\r\n    >\r\n      {(gameData.length !== 0 ? gameData : Datas)?.map((data, index) => {\r\n        return (\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-start\"\r\n            sx={{\r\n              mr: { xs: 1, sm: 2 },\r\n              ml: { xs: 1, sm: 2 },\r\n              mb: { xs: 1, sm: 2 },\r\n            }}\r\n            border=\"1px solid white\"\r\n            bgcolor=\"RGB(255,255,255,0.1)\"\r\n            padding={2}\r\n            key={index}\r\n          >\r\n            <Box\r\n              sx={{\r\n                mr: { xs: \"6px\", sm: \"8px\", md: \"12px\", xl: \"16px\" },\r\n              }}\r\n              position=\"relative\"\r\n              display=\"flex\"\r\n              flexDirection=\"column\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Box component=\"img\" src={roomPic} sx={roomStyleBack} />\r\n              <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n                position=\"absolute\"\r\n                top=\"30px\"\r\n              >\r\n                {data.firstNFT !== \"\" ? (\r\n                  <Box\r\n                    component=\"img\"\r\n                    src={data.firstNFT}\r\n                    sx={roomStyleAvatar}\r\n                  />\r\n                ) : (\r\n                  <Box sx={roomStyleAvatar} alignItems=\"center\" display=\"flex\">\r\n                    <Typography sx={fightStyle}>Let's FIGHT</Typography>\r\n                  </Box>\r\n                )}\r\n                <Box\r\n                  sx={{\r\n                    height: { xs: \"36px\", sm: \"50px\", md: \"72px\" },\r\n                  }}\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  {data.firstNFT !== \"\" && data.firstNFT !== undefined ? (\r\n                    <Typography sx={randomNumberStyle}>\r\n                      {data.firstRandom}\r\n                    </Typography>\r\n                  ) : (\r\n                    <Typography sx={randomNumberStyle}>\r\n                      Random Number\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n                <Button\r\n                  onClick={() => {\r\n                    onEnterModal(index);\r\n                  }}\r\n                  disabled={data.firstNFT !== \"\" ? true : false}\r\n                  sx={{\r\n                    position: \"relative\",\r\n                    width: \"62%\",\r\n                  }}\r\n                >\r\n                  <Box component=\"img\" src={buttonBack} width=\"100%\" />\r\n                  <Typography\r\n                    sx={buttonStyle}\r\n                    color={data.firstNFT ? \"white\" : \"yellow\"}\r\n                  >\r\n                    {firRandomData &&\r\n                    decide &&\r\n                    !(\r\n                      firRandomData[index + 1] === undefined ||\r\n                      firRandomData[index + 1] === 0\r\n                    )\r\n                      ? firRandomData[index + 1] > secRandomData[index + 1]\r\n                        ? \"Winner\"\r\n                        : firRandomData[index + 1] === secRandomData[index + 1]\r\n                        ? \"Draw\"\r\n                        : \"Loser\"\r\n                      : data.secondAddress === \"\" ||\r\n                        data.secondAddress === null ||\r\n                        data.secondAddress === undefined\r\n                      ? data.firstAddress === \"\"\r\n                        ? \"Fight\"\r\n                        : `${data.firstAddress?.slice(\r\n                            0,\r\n                            4\r\n                          )}...${data.firstAddress?.slice(-4)}`\r\n                      : \"Fighting...\"}\r\n                  </Typography>\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n            <Box\r\n              position=\"relative\"\r\n              display=\"flex\"\r\n              flexDirection=\"column\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Box component=\"img\" src={roomPic} sx={roomStyleBack} />\r\n              <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n                position=\"absolute\"\r\n                top=\"30px\"\r\n              >\r\n                {data.secondNFT !== \"\" && data.secondNFT !== undefined ? (\r\n                  <Box\r\n                    component=\"img\"\r\n                    src={data.secondNFT}\r\n                    sx={roomStyleAvatar}\r\n                  />\r\n                ) : (\r\n                  <Box sx={roomStyleAvatar} display=\"flex\" alignItems=\"center\">\r\n                    <Typography sx={fightStyle}>Let's FIGHT</Typography>\r\n                  </Box>\r\n                )}\r\n                <Box\r\n                  sx={{\r\n                    height: { xs: \"36px\", sm: \"50px\", md: \"72px\" },\r\n                  }}\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  {data.secondNFT !== \"\" && data.secondNFT !== undefined ? (\r\n                    <Typography sx={randomNumberStyle}>\r\n                      {data.secondRandom}\r\n                    </Typography>\r\n                  ) : (\r\n                    <Typography sx={randomNumberStyle}>\r\n                      Random Number\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n                <Button\r\n                  disabled={\r\n                    !(\r\n                      data.firstNFT !== \"\" ||\r\n                      data.secondAddress !== null ||\r\n                      data.secondAddress === undefined\r\n                    )\r\n                      ? true\r\n                      : false\r\n                  }\r\n                  onClick={() => {\r\n                    onClaimModal(index, data.fightRoom, data.firstRandom);\r\n                  }}\r\n                  sx={{\r\n                    position: \"relative\",\r\n                    width: \"62%\",\r\n                  }}\r\n                >\r\n                  <Box component=\"img\" src={buttonBack} width=\"100%\" />\r\n                  <Typography\r\n                    sx={buttonStyle}\r\n                    color={\r\n                      secRandomData && secRandomData[index + 1]\r\n                        ? \"white\"\r\n                        : \"yellow\"\r\n                    }\r\n                  >\r\n                    {secRandomData &&\r\n                    decide &&\r\n                    !(\r\n                      secRandomData[index + 1] === undefined ||\r\n                      secRandomData[index + 1] === 0\r\n                    )\r\n                      ? firRandomData[index + 1] > secRandomData[index + 1]\r\n                        ? \"Loser\"\r\n                        : firRandomData[index + 1] === secRandomData[index + 1]\r\n                        ? \"Draw\"\r\n                        : \"Winner\"\r\n                      : data.secondAddress === \"\" ||\r\n                        data.secondAddress === null ||\r\n                        data.secondAddress === undefined\r\n                      ? \"Fight\"\r\n                      : \"Fighting...\"}\r\n                  </Typography>\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n","import { useCallback } from \"react\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport roomPic from \"assets/images/Ui_box3.webp\";\r\nimport { Timeline } from \"react-gsap\";\r\nimport buttonBack from \"assets/images/button.png\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport { loadNftDetails } from \"store/slices/Nftinfo-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { AppDispatch } from \"state\";\r\nimport { Datas } from \"./Datas\";\r\nimport {\r\n  fightStyle,\r\n  randomNumberStyle,\r\n  roomStyleAvatar,\r\n  roomStyleBack,\r\n  buttonStyle,\r\n} from \"./style\";\r\nimport { loadNftAllowance } from \"store/slices/NFt-slice\";\r\nimport { gameDataStyle } from \"@types\";\r\n\r\nexport function BigRoom() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { account } = useWeb3React();\r\n\r\n  const firRandomData: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.fight.random1\r\n  );\r\n  const secRandomData: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.fight.random2\r\n  );\r\n  const gameData: gameDataStyle[] = useSelector<IReduxState, gameDataStyle[]>(\r\n    (state) => state.app.gameData\r\n  );\r\n  const decide: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.battle.decide\r\n  );\r\n  const nftids: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nftids\r\n  );\r\n\r\n  const onEnterModal = useCallback(async (index: number) => {\r\n    await dispatch(\r\n      loadBattleDetails({\r\n        openState: true,\r\n        whichroom: index + 1,\r\n        claimState: false,\r\n        whichfight: 0,\r\n        waitingRandom: 0,\r\n        decide: false,\r\n      })\r\n    );\r\n    await dispatch(loadNftDetails({ account: account }));\r\n    await dispatch(loadNftAllowance({ tokenIds: nftids }));\r\n  }, [account, nftids]);\r\n\r\n  const onClaimModal = useCallback(\r\n    async (index: number, fightRoom: number, firstRandom: number) => {\r\n      await dispatch(\r\n        loadBattleDetails({\r\n          openState: false,\r\n          whichroom: index + 1,\r\n          claimState: true,\r\n          whichfight: fightRoom,\r\n          waitingRandom: firstRandom,\r\n          decide: false,\r\n        })\r\n      );\r\n      await dispatch(loadNftDetails({ account: account }));\r\n      await dispatch(loadNftAllowance({ tokenIds: nftids }));\r\n    },\r\n    [account, nftids]\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        flexWrap: \"wrap\",\r\n      }}\r\n    >\r\n      {Datas &&\r\n        Datas.map((data, index) => {\r\n          if (index < 4) return;\r\n          return (\r\n            <Box\r\n              display=\"flex\"\r\n              justifyContent=\"flex-start\"\r\n              sx={{\r\n                mr: { xs: 1, sm: 2 },\r\n                ml: { xs: 1, sm: 2 },\r\n                mb: { xs: 1, sm: 2 },\r\n              }}\r\n              border='1px solid white'\r\n              bgcolor='RGB(255,255,255,0.1)'\r\n              padding={2}\r\n              key={index}\r\n            >\r\n              <Box\r\n                sx={{\r\n                  mr: { xs: \"6px\", sm: \"8px\", md: \"12px\", xl: \"16px\" },\r\n                }}\r\n                position=\"relative\"\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Box component=\"img\" src={roomPic} sx={roomStyleBack} />\r\n                <Box\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  position=\"absolute\"\r\n                  top=\"30px\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  {data.firstNFT !== \"\" ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={data.firstNFT}\r\n                      sx={roomStyleAvatar}\r\n                    />\r\n                  ) : (\r\n                    <Box\r\n                      sx={roomStyleAvatar}\r\n                      alignItems=\"center\"\r\n                      display=\"flex\"\r\n                    >\r\n                      <Timeline\r\n                        target={\r\n                          <Typography sx={fightStyle}>Let's FIGHT</Typography>\r\n                        }\r\n                        repeat={10000}\r\n                      >\r\n                        {/* <Tween\r\n                          from={{ scaleX: 1.1, scaleY: 1.1 }}\r\n                          to={{ scaleX: 1, scaleY: 1 }}\r\n                          duration={1.5}\r\n                        />\r\n                        <Tween\r\n                          from={{ scaleX: 1, scaleY: 1 }}\r\n                          to={{ scaleX: 1.1, scaleY: 1.1 }}\r\n                          duration={1.5}\r\n                        /> */}\r\n                      </Timeline>\r\n                    </Box>\r\n                  )}\r\n                  <Box\r\n                    sx={{\r\n                      height: { xs: \"36px\", sm: \"50px\", md: \"72px\" },\r\n                    }}\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    {data.firstNFT !== \"\" && data.firstNFT !== undefined ? (\r\n                      <Typography sx={randomNumberStyle}>\r\n                        {/* {random[index * 2]} */}\r\n                      </Typography>\r\n                    ) : (\r\n                      <Typography sx={randomNumberStyle}>\r\n                        Random Number\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                  <Button\r\n                    onClick={() => {\r\n                      onEnterModal(index);\r\n                    }}\r\n                    disabled={data.firstNFT !== \"\" ? true : false}\r\n                    sx={{\r\n                      position: \"relative\",\r\n                      width: \"62%\",\r\n                    }}\r\n                  >\r\n                    <Box component=\"img\" src={buttonBack} width=\"100%\" />\r\n                    <Typography\r\n                      sx={buttonStyle}\r\n                      color={data.firstNFT ? \"white\" : \"yellow\"}\r\n                    >\r\n                      {firRandomData &&\r\n                      decide &&\r\n                      !(\r\n                        firRandomData[index + 1] === undefined ||\r\n                        firRandomData[index + 1] === 0\r\n                      )\r\n                        ? firRandomData[index + 1] > secRandomData[index + 1]\r\n                          ? \"Winner\"\r\n                          : firRandomData[index + 1] === secRandomData[index + 1]\r\n                          ? \"Draw\"\r\n                          : \"Loser\"\r\n                        : data.secondAddress === \"\" ||\r\n                          data.secondAddress === null ||\r\n                          data.secondAddress === undefined\r\n                        ? data.firstAddress === \"\"\r\n                          ? \"Fight\"\r\n                          : `${data.firstAddress?.slice(\r\n                              0,\r\n                              4\r\n                            )}...${data.firstAddress?.slice(-4)}`\r\n                        : \"Fighting...\"}\r\n                    </Typography>\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n              <Box\r\n                position=\"relative\"\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Box component=\"img\" src={roomPic} sx={roomStyleBack} />\r\n                <Box\r\n                  display=\"flex\"\r\n                  alignItems=\"center\"\r\n                  flexDirection=\"column\"\r\n                  position=\"absolute\"\r\n                  top=\"30px\"\r\n                >\r\n                  {data.secondNFT !== \"\" && data.secondNFT !== undefined ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={data.secondNFT}\r\n                      sx={roomStyleAvatar}\r\n                    />\r\n                  ) : (\r\n                    <Box\r\n                      sx={roomStyleAvatar}\r\n                      display=\"flex\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Timeline\r\n                        target={\r\n                          <Typography sx={fightStyle}>Let's FIGHT</Typography>\r\n                        }\r\n                        repeat={10000}\r\n                      >\r\n                        {/* <Tween\r\n                          from={{ scaleX: 1.1, scaleY: 1.1 }}\r\n                          to={{ scaleX: 1, scaleY: 1 }}\r\n                          duration={1.5}\r\n                        />\r\n                        <Tween\r\n                          from={{ scaleX: 1, scaleY: 1 }}\r\n                          to={{ scaleX: 1.1, scaleY: 1.1 }}\r\n                          duration={1.5}\r\n                        /> */}\r\n                      </Timeline>\r\n                    </Box>\r\n                  )}\r\n                  <Box\r\n                    sx={{\r\n                      height: { xs: \"36px\", sm: \"50px\", md: \"72px\" },\r\n                    }}\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Typography sx={randomNumberStyle}>\r\n                      Random Number\r\n                    </Typography>\r\n                  </Box>\r\n                  <Button\r\n                    disabled={\r\n                      !(\r\n                        data.firstNFT !== \"\" ||\r\n                        data.secondAddress !== null ||\r\n                        data.secondAddress === undefined\r\n                      )\r\n                        ? true\r\n                        : false\r\n                    }\r\n                    onClick={() => {\r\n                      onClaimModal(index, data.fightRoom, data.firstRandom);\r\n                    }}\r\n                    sx={{\r\n                      position: \"relative\",\r\n                      width: \"62%\",\r\n                    }}\r\n                  >\r\n                    <Box component=\"img\" src={buttonBack} width=\"100%\" />\r\n                    <Typography\r\n                      sx={buttonStyle}\r\n                      color={\r\n                        secRandomData && secRandomData[index + 1]\r\n                          ? \"white\"\r\n                          : \"yellow\"\r\n                      }\r\n                    >\r\n                      {secRandomData &&\r\n                      decide &&\r\n                      !(\r\n                        secRandomData[index + 1] === undefined ||\r\n                        secRandomData[index + 1] === 0\r\n                      )\r\n                        ? firRandomData[index + 1] > secRandomData[index + 1]\r\n                          ? \"Loser\"\r\n                          : firRandomData[index + 1] === secRandomData[index + 1]\r\n                          ? \"Draw\"\r\n                          : \"Winner\"\r\n                        : data.secondAddress === \"\" ||\r\n                          data.secondAddress === null ||\r\n                          data.secondAddress === undefined\r\n                        ? \"Fight\"\r\n                        : \"Fighting...\"}\r\n                    </Typography>\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            </Box>\r\n          );\r\n        })}\r\n    </Box>\r\n  );\r\n}\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { gameDataStyle } from \"@types\";\r\n\r\nexport const loadGameDetails = createAsyncThunk(\r\n  \"game/loadGameDetails\",\r\n  async ({ gameData }: IAppSlice) => {\r\n    let tmpgameData: gameDataStyle[] = [];\r\n    await instance\r\n      .get(\"/api/betting\")\r\n      .then((response) => {\r\n        tmpgameData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    let maxRoomNum = 0;\r\n    for (let i = 0; i < tmpgameData.length; i++) {\r\n      maxRoomNum = Math.max(tmpgameData[i].roomNum, maxRoomNum);\r\n    }\r\n    for (let i = 0; i < Math.max(4, maxRoomNum + 2); i++) {\r\n      let newGameData: gameDataStyle = {\r\n        roomNum: 0,\r\n        firstNFT: \"\",\r\n        secondNFT: \"\",\r\n        firstAddress: \"\",\r\n        secondAddress: \"\",\r\n        firstRandom: 0,\r\n        secondRandom: 0,\r\n        tokenId: 0,\r\n        fightRoom: 0,\r\n        flag: false\r\n      };\r\n      gameData.push(newGameData);\r\n    }\r\n    let tmpcnt = 0;\r\n    for (let i = 0; i < Math.max(4, maxRoomNum + 2); i++) {\r\n      if(i + 1 === tmpgameData[tmpcnt]?.roomNum) {\r\n        gameData[i].roomNum = tmpgameData[tmpcnt].roomNum;\r\n        gameData[i].firstNFT = tmpgameData[tmpcnt]?.firstNFT;\r\n        gameData[i].firstAddress = tmpgameData[tmpcnt]?.firstAddress;\r\n        gameData[i].firstRandom = tmpgameData[tmpcnt]?.firstRandom;\r\n        gameData[i].fightRoom = tmpgameData[tmpcnt]?.fightRoom;\r\n        gameData[i].tokenId = tmpgameData[tmpcnt]?.tokenId;\r\n        gameData[i].secondNFT = tmpgameData[tmpcnt]?.secondNFT;\r\n        gameData[i].secondAddress = tmpgameData[tmpcnt]?.secondAddress;\r\n        gameData[i].secondRandom = tmpgameData[tmpcnt]?.secondRandom;\r\n        tmpcnt ++;\r\n      }\r\n    }\r\n    return {\r\n      gameData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean;\r\n  gameData: gameDataStyle[];\r\n} = {\r\n  loading: true,\r\n  gameData: [],\r\n};\r\n\r\nexport interface IAppSlice {\r\n  gameData: gameDataStyle[];\r\n}\r\n\r\nconst gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState,\r\n  reducers: {\r\n    updateGameData(state, action) {\r\n      let updatedData: gameDataStyle = {\r\n        roomNum: 0,\r\n        firstNFT: \"\",\r\n        secondNFT: \"\",\r\n        firstAddress: \"\",\r\n        secondAddress: \"\",\r\n        firstRandom: 0,\r\n        secondRandom: 0,\r\n        tokenId: 0,\r\n        fightRoom: 0,\r\n        flag: false\r\n      };\r\n      if(action.payload.delRoomNum > 0) {\r\n        updatedData.roomNum = action.payload.delRoomNum;\r\n      } else {\r\n        updatedData = action.payload;\r\n      }\r\n      const index = state.gameData.findIndex(\r\n        (data) => data.roomNum === updatedData.roomNum\r\n      );\r\n      if(index < 0) {\r\n        state.gameData[updatedData.roomNum - 1] = updatedData;\r\n      } else {\r\n        state.gameData[index] = updatedData;\r\n      }\r\n\r\n      let maxRoomNum = 0;\r\n      let emptyData: gameDataStyle = {\r\n        roomNum: 0,\r\n        firstNFT: \"\",\r\n        secondNFT: \"\",\r\n        firstAddress: \"\",\r\n        secondAddress: \"\",\r\n        firstRandom: 0,\r\n        secondRandom: 0,\r\n        tokenId: 0,\r\n        fightRoom: 0,\r\n        flag: false\r\n      };\r\n      for(let i = 0; i < state.gameData.length; i ++) {\r\n        maxRoomNum = Math.max(state.gameData[i].roomNum, maxRoomNum);\r\n      }\r\n      for(let i = 0; i < Math.max(4, maxRoomNum + 2); i ++) {\r\n        if(state.gameData[i] === undefined) {\r\n          state.gameData[i] = emptyData;\r\n        }\r\n      }\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadGameDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadGameDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadGameDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.app;\r\n\r\nexport default gameSlice.reducer;\r\n\r\nexport const { updateGameData } = gameSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (app) => app);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { randomDataStyle } from \"@types\";\r\n\r\nexport const loadRandomDetails = createAsyncThunk(\r\n  \"random/loadRandomDetails\",\r\n  async ({ randomData }: IRandomSlice) => {\r\n    await instance\r\n      .get(\"/api/random\")\r\n      .then((response) => {\r\n        randomData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return {\r\n      randomData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean;\r\n  randomData: randomDataStyle[];\r\n} = {\r\n  loading: true,\r\n  randomData: [],\r\n};\r\n\r\nexport interface IRandomSlice {\r\n  randomData: randomDataStyle[];\r\n}\r\n\r\nconst randomSlice = createSlice({\r\n  name: \"random\",\r\n  initialState,\r\n  reducers: {\r\n    updateRandomData(state, action) {\r\n      let updatedData: randomDataStyle = action.payload;\r\n\r\n      state.randomData.unshift(updatedData);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadRandomDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadRandomDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadRandomDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.random;\r\n\r\nexport default randomSlice.reducer;\r\n\r\nexport const { updateRandomData } = randomSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (random) => random);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { resultDataStyle } from \"@types\";\r\n\r\nexport const loadResultDetails = createAsyncThunk(\r\n  \"result/loadResultDetails\",\r\n  async ({ resultData }: IResultSlice) => {\r\n    await instance\r\n      .get(\"/api/result\")\r\n      .then((response) => {\r\n        resultData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return {\r\n      resultData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean,\r\n  resultData: resultDataStyle[],\r\n} = {\r\n  loading: true,\r\n  resultData: [],\r\n};\r\n\r\nexport interface IResultSlice {\r\n  resultData: resultDataStyle[];\r\n}\r\n\r\nconst resultSlice = createSlice({\r\n  name: \"result\",\r\n  initialState,\r\n  reducers: {\r\n    updateResultData(state, action) {\r\n      let updatedData: resultDataStyle = action.payload;\r\n\r\n      state.resultData.unshift(updatedData);\r\n      state.resultData.pop();\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadResultDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadResultDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadResultDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.result;\r\n\r\nexport default resultSlice.reducer;\r\n\r\nexport const { updateResultData } = resultSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (result) => result);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { winnerDataStyle } from \"@types\";\r\n\r\nexport const loadWinnerDetails = createAsyncThunk(\r\n  \"winner/loadWinnerDetails\",\r\n  async ({ winnerData } : IWinnerSlice) => {\r\n    await instance\r\n      .get(\"/api/winner\")\r\n      .then((response) => {\r\n        winnerData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    return {\r\n      winnerData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean,\r\n  winnerData: winnerDataStyle[]\r\n} = {\r\n  loading: true,\r\n  winnerData: [],\r\n};\r\n\r\nexport interface IWinnerSlice {\r\n  winnerData: winnerDataStyle[];\r\n}\r\n\r\nconst winnerSlice = createSlice({\r\n  name: \"winner\",\r\n  initialState,\r\n  reducers: {\r\n    updateWinnerData(state, action) {\r\n      let updatedData: winnerDataStyle = action.payload;\r\n      \r\n      const index = state.winnerData.findIndex(\r\n        (data) => data.address === updatedData.address\r\n      );\r\n      if(index < 0) {\r\n        state.winnerData.push(updatedData);\r\n      } else {\r\n        state.winnerData[index] = updatedData;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadWinnerDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadWinnerDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadWinnerDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.app;\r\n\r\nexport default winnerSlice.reducer;\r\n\r\nexport const { updateWinnerData } = winnerSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (app) => app);\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { AppDispatch } from \"state\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { SampleModal } from \"components/Current/modal\";\r\nimport { BigRoomModal } from \"components/Current/bigRoomModal\";\r\nimport { SmallRooms } from \"components/Current/SmallRoom\";\r\nimport { BigRoom } from \"components/Current/BigRoom\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport instance from \"constants/axios\";\r\nimport io from \"socket.io-client\";\r\nimport { baseURL } from \"constants/axios\";\r\nimport { updateGameData } from \"store/slices/game-slice\";\r\nimport { updateRandomData } from \"store/slices/random-slice\";\r\nimport { updateResultData } from \"store/slices/result-slice\";\r\nimport { gameDataStyle } from \"@types\";\r\nimport { updateWinnerData } from \"store/slices/winner-slice\";\r\n\r\nconst CurrentBattle = () => {\r\n  const secRandomData: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.fight.random2\r\n  );\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  useEffect(() => {\r\n    if (secRandomData) {\r\n      dispatch(\r\n        loadBattleDetails({\r\n          decide: true,\r\n          openState: false,\r\n          claimState: false,\r\n          whichroom: 0,\r\n          whichfight: 0,\r\n          waitingRandom: 0,\r\n        })\r\n      );\r\n      setTimeout(async () => {\r\n        instance.delete(`/api/betting/delete/${secRandomData.length - 1}`);\r\n\r\n        await dispatch(\r\n          loadBattleDetails({\r\n            decide: false,\r\n            openState: false,\r\n            claimState: false,\r\n            whichroom: 0,\r\n            whichfight: 0,\r\n            waitingRandom: 0,\r\n          })\r\n        );\r\n      }, 4000);\r\n    }\r\n  }, [secRandomData]);\r\n\r\n  var socket = io(baseURL);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedRoom\", (data: gameDataStyle) => {\r\n      dispatch(updateGameData(data));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedRandom\", (data: gameDataStyle) => {\r\n      dispatch(updateRandomData(data));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedResult\", (data: gameDataStyle) => {\r\n      dispatch(updateResultData(data));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedWinner\", (data: gameDataStyle) => {\r\n      dispatch(updateWinnerData(data));\r\n    });\r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: \"rgba(230,239,237, 0.1)\",\r\n        paddingX: \"6px\",\r\n        mt: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n        pb: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n      }}\r\n    >\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          fontSize: { xs: \"24px\", sm: \"30px\" },\r\n          color: \"white\",\r\n          textAlign: \"center\",\r\n          py: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n        }}\r\n      >\r\n        50 TRX Battle (1 Roll & 1 Meow)\r\n      </Typography>\r\n      <SmallRooms />\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          fontSize: { xs: \"24px\", sm: \"30px\" },\r\n          color: \"white\",\r\n          textAlign: \"center\",\r\n          py: { xs: 2, sm: 3, md: 4, xl: 5 },\r\n        }}\r\n      >\r\n        250 TRX Battle (5 Rolls & 5 Meow)\r\n      </Typography>\r\n      <BigRoom />\r\n\r\n      <SampleModal />\r\n      <BigRoomModal />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CurrentBattle;\r\n","import { Box, Typography } from \"@mui/material\";\r\n// import ActionFeed from \"./components/ActionFeed\";\r\nimport Banner from \"./components/Banner\";\r\nimport Jackpot from \"./components/Jackpot\";\r\nimport Role from \"./components/Role\";\r\nimport Winner from \"./components/Winner\";\r\nimport CurrentBattle from \"./components/CurrentBattle\";\r\nimport FinishedBattle from \"./components/FinishedBattle\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Box sx={{ backgroundColor: \"rgba(38,40,42,0.95)\" }}>\r\n      <Banner />\r\n      <Typography\r\n        variant=\"h2\"\r\n        textAlign=\"center\"\r\n        fontFamily=\"Audiowide\"\r\n        color=\"white\"\r\n        sx={{\r\n          fontSize: { xs: \"24px\", md: \"48px\", xl: \"60px\" },\r\n          mt: \"16px\",\r\n          mb: \"16px\",\r\n        }}\r\n      >\r\n        Crypto Moon Catz War!\r\n      </Typography>\r\n      <Jackpot />\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: { xs: \"column\", lg: \"row\" },\r\n          justifyContent: \"space-around\",\r\n          my: { xs: 1, sm: 2 },\r\n        }}\r\n      >\r\n        <Box>\r\n          <CurrentBattle />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport { metamaskErrorWrap } from \"helpers/metamask-error-wrap\";\r\nimport tronWeb from \"tronweb\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\nimport instance from \"constants/axios\";\r\n\r\ninterface IStackingMeow {\r\n  address: any;\r\n  amount: string;\r\n}\r\n\r\ndeclare var window: any;\r\n\r\nexport const stackingMeow = createAsyncThunk(\r\n  \"stacking/stackingMeow\",\r\n\r\n  async ({ address, amount }: IStackingMeow, { dispatch }) => {\r\n    let meowContract, meowTokenContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n        meowTokenContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOWTOKEN_ADDRESS));\r\n      }\r\n    }\r\n    let enterTx, approveTx;\r\n    let stakeamount = parseInt(amount);\r\n    try {\r\n      console.log(stakeamount);\r\n      approveTx = await meowTokenContract\r\n        .approve(SHASTA_TESTNET.MEOW_ADDRESS, stakeamount)\r\n        .send({ feeLimit: 100000000 });\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          const transaction = await window.tronWeb.trx.getTransaction(\r\n            approveTx\r\n          );\r\n          receipt = transaction.ret[0].contractRet;\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      enterTx = await meowContract\r\n        .stake(stakeamount)\r\n        .send({ feeLimit: 100000000 });\r\n\r\n      receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          receipt = transaction.ret[0].contractRet;\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n      await instance.post(\"/api/userinfo/create\", {\r\n        address: address,\r\n        stakeAmount: stakeamount,\r\n        claimAmount: 0,\r\n        ownNfts: [],\r\n      });\r\n\r\n      return;\r\n    } catch (err: any) {\r\n      console.log(err);\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n      return;\r\n    }\r\n  }\r\n);\r\n\r\ninterface IunstackingMeow {\r\n  address: any;\r\n  amount: string;\r\n}\r\n\r\nexport const unstackingMeow = createAsyncThunk(\r\n  \"claimfight/claimfightMeow\",\r\n\r\n  async ({ amount, address }: IunstackingMeow, { dispatch }) => {\r\n    let meowContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    let enterTx;\r\n    let stakeamount = parseInt(amount);\r\n    try {\r\n      enterTx = await meowContract\r\n        .unStake(stakeamount)\r\n        .send({ feeLimit: 100000000 });\r\n\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          receipt = transaction.ret[0].contractRet;\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      await instance.post(\"/api/userinfo/create\", {\r\n        address: address,\r\n        stakeAmount: stakeamount * -1,\r\n        claimAmount: 0,\r\n        ownNfts: [],\r\n      });\r\n\r\n      return;\r\n    } catch (err: any) {\r\n      console.log(err);\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n      return;\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nexport interface IAppSlice {}\r\n\r\nconst stakeSlice = createSlice({\r\n  name: \"fight\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(stackingMeow.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(stackingMeow.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(stackingMeow.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(unstackingMeow.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(unstackingMeow.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(unstackingMeow.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.stack;\r\n\r\nexport default stakeSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (stack) => stack);\r\n","import { Box, Button, Typography } from \"@mui/material\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { AppDispatch } from \"state\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { stackingMeow, unstackingMeow } from \"store/slices/staking-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\n\r\nconst meowTokenStyle = {\r\n  color: \"#BADA55\",\r\n  fontSize: { xs: \"12px\", sm: \"16px\" },\r\n  mt: 1,\r\n};\r\n\r\nconst jackpotStyle = {\r\n  color: \"white\",\r\n  fontSize: { xs: \"12px\", sm: \"16px\" }\r\n}\r\n\r\nconst stakeButtonStyle = {\r\n  paddingY: { xs: \"4px\", sm: \"6px\" },\r\n  paddingX: { xs: \"8px\", sm: \"16px\" },\r\n  fontSize: { xs: \"12px\", sm: \"16px\" },\r\n  color: \"black\",\r\n  backgroundColor: \"#BADA55\",\r\n  fontFamily: \"Audiowide\",\r\n  \"&: hover\": { backgroundColor: \"#BADA55\", opacity: 0.9 },\r\n}\r\n\r\nconst MeowToken = () => {\r\n  const { account } = useWeb3React();\r\n  const [stackAmount, changesStack] = useState(\"\");\r\n  const [unstackAmount, changeUnstack] = useState(\"\");\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  let stakeAmount: number = useSelector<IReduxState, number>(\r\n    (state) => state.wallet.stakeAmount\r\n  );\r\n  const JackpotAmount = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.jackpotAmount\r\n  );\r\n  let totalStake: number = useSelector<IReduxState, number>(\r\n    (state) => state.wallet.totalStake\r\n  );\r\n  const meowCount: string = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.meowCount\r\n  );\r\n\r\n  async function onStack() {\r\n    if (parseInt(meowCount) < parseInt(stackAmount)) {\r\n      alert(\"You don't have enough balance of Meow Token for stake!\");\r\n      return;\r\n    }\r\n    await dispatch(\r\n      stackingMeow({\r\n        amount: stackAmount,\r\n        address: account,\r\n      })\r\n    );\r\n  }\r\n\r\n  async function onUnstack() {\r\n    if (stakeAmount < parseInt(unstackAmount)) {\r\n      alert(\"You don't have enough Meow Token to unstake!\");\r\n      return;\r\n    }\r\n    await dispatch(\r\n      unstackingMeow({\r\n        amount: unstackAmount,\r\n        address: account,\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: { xs: \"320px\", sm: \"540px\", md: \"640px\" },\r\n        marginX: \"auto\",\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          backgroundColor: \"#393D32\",\r\n          pb: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Typography\r\n          fontFamily=\"Audiowide\"\r\n          textAlign=\"center\"\r\n          color=\"#58C4E4\"\r\n          sx={{\r\n            fontSize: { xs: \"20px\", sm: \"28px\", md: \"36px\", xl: \"40px\" },\r\n            py: 1,\r\n            px: { xs: 1, sm: 3 },\r\n            mx: \"auto\",\r\n            mb: 1,\r\n          }}\r\n        >\r\n          Meow Token\r\n        </Typography>\r\n        <Typography\r\n          sx={jackpotStyle}\r\n        >\r\n          Earn Meow each battle! Win or lose you mine one meow token.\r\n        </Typography>\r\n        <Typography\r\n          fontFamily=\"Audiowide\"\r\n          sx={{\r\n            color: \"#6B81FF\",\r\n            fontSize: { xs: \"14px\", sm: \"18px\" },\r\n            py: { xs: 1 },\r\n            pl: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n          }}\r\n        >\r\n          24 Mined of 100,000,000 MOEW\r\n        </Typography>\r\n        <Typography\r\n          sx={jackpotStyle}\r\n        >\r\n          Every time number 777 is randomly generated during a fight, users with\r\n          staked Meow tokens split 40% of the Jackpot.\r\n        </Typography>\r\n        <Typography\r\n          sx={jackpotStyle}\r\n        >\r\n          Passive Income!\r\n        </Typography>\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          flexWrap: \"wrap\",\r\n          alignItems: \"flex-start\",\r\n          py: { xs: 1, sm: 2 },\r\n          px: { xs: 1, sm: 2 },\r\n          backgroundColor: \"#6A6E64\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Button\r\n            sx={stakeButtonStyle}\r\n            onClick={onStack}\r\n          >\r\n            Stake Meow\r\n          </Button>\r\n          <br />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            type=\"number\"\r\n            size=\"small\"\r\n            sx={{ color: \"white\", width: \"100%\", mt: 2 }}\r\n            value={stackAmount}\r\n            onChange={(e) => {\r\n              changesStack(e.target.value);\r\n            }}\r\n          />\r\n          <Typography sx={meowTokenStyle}>\r\n            Staked Meow: {stakeAmount ? stakeAmount : 0} Meow Token\r\n          </Typography>\r\n        </Box>\r\n        <Box>\r\n          <Button\r\n            sx={stakeButtonStyle}\r\n            onClick={onUnstack}\r\n          >\r\n            Unstake Meow\r\n          </Button>\r\n          <br />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            type=\"number\"\r\n            sx={{ color: \"white\", width: \"100%\", mt: 2 }}\r\n            value={unstackAmount}\r\n            onChange={(e) => {\r\n              changeUnstack(e.target.value);\r\n            }}\r\n          />\r\n          <Typography sx={meowTokenStyle}>\r\n            Available Meow: {meowCount}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n      <Box sx={{ p: 1, backgroundColor: \"#393D32\" }}>\r\n        <Typography\r\n          sx={jackpotStyle}\r\n        >\r\n          Total Staked Meow in contract: {totalStake ? totalStake : 0} Meow\r\n          Token\r\n        </Typography>\r\n        <Typography\r\n          sx={jackpotStyle}\r\n        >\r\n          40% of current Jackpot:{\" \"}\r\n          {JackpotAmount ? (parseInt(JackpotAmount) * 2) / 5 : 0} TRX\r\n        </Typography>\r\n      </Box>\r\n      {/* <Box\r\n        sx={{\r\n          py: { xs: 1, sm: 2 },\r\n          backgroundColor: \"#6A6E64\",\r\n          paddingX: \"6px\",\r\n        }}\r\n      >\r\n        <Typography sx={meowTokenStyle}>\r\n          You share if Jackpot is triggered: 50% (504 TRX)\r\n        </Typography>\r\n        <Button\r\n          sx={{\r\n            fontSize: { xs: \"12px\", sm: \"16px\" },\r\n            color: \"black\",\r\n            backgroundColor: \"white\",\r\n            paddingY: { xs: \"4px\", sm: \"6px\" },\r\n            px: { xs: 3, sm: 5 },\r\n            ml: { xs: 2, sm: 4 },\r\n            my: 1,\r\n            \"&: hover\": { backgroundColor: \"white\", opacity: 0.9 },\r\n          }}\r\n        >\r\n          Claim\r\n        </Button>\r\n        <Typography sx={meowTokenStyle}>Unclaimed Earnings: 0 TRX</Typography>\r\n      </Box> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MeowToken;\r\n","import { Box, Typography } from \"@mui/material\";\r\n\r\nconst ChestInfo = () => {\r\n  return (\r\n    <Box\r\n\t\t\tsx={{\t\t\r\n\t\t\t\twidth: {xs: \"320px\", sm: '540px', md: '640px'},\r\n\t\t\t\tmt: {xs: 4, sm: 6, md: 8, xl: 10},\r\n\t\t\t\tmarginX: 'auto'\r\n\t\t\t}}          \r\n    >\r\n\t\t\t<Box sx={{\r\n\t\t\t\tbackgroundColor: '#393D32',\t\r\n\t\t\t\tpb: {xs: 1, sm: 2, md: 3, xl: 4},\r\n\t\t\t\tpx: 2\t\t\t\t\r\n\t\t\t}}>\r\n\t\t\t\t<Typography \r\n\t\t\t\t\tfontFamily=\"Audiowide\"\r\n\t\t\t\t\tsx=\r\n\t\t\t\t\t\t{{ \r\n\t\t\t\t\t\t\tcolor: 'white', fontSize: { xs: \"20px\", sm: \"28px\", md: '36px', xl: '40'}, \r\n\t\t\t\t\t\t\tpy: 1, px: {xs: 1, sm: 3},\t\r\n\t\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\t\tmx: 'auto',\t\r\n\t\t\t\t\t\t\tmb: 1,            \t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tWar Chest\r\n\t\t\t\t</Typography>  \r\n\t\t\t\t<Typography sx={{ fontSize: {xs: '12px', sm: '16px'}, color: 'white', py: 1}}>\r\n\t\t\t\t\tBattle players for NFTs and a chance at opening the War Chest Jackpot!\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography sx={{ fontSize: {xs: '12px', sm: '16px'}, color: 'white', pt: 2}}>\r\n\t\t\t\t\tEach battle 2 users put up 1 Crypto Moon Catz NFT and 50 TRX each.\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography sx={{ fontSize: {xs: '12px', sm: '16px'}, color: 'white', pt: 1}}>\r\n\t\t\t\t\tUsers are the given a random nuber (1-1,000) Highest number wins!\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography sx={{ fontSize: {xs: '12px', sm: '16px'}, color: '#BADA55', pt: 2}}>\r\n\t\t\t\t\tWinner receives both NFT's and 60 TRX + (1 Meow token)\r\n\t\t\t\t</Typography>\t\t\t\t\r\n\t\t\t\t<Typography sx={{color: '#FF1313', fontSize: {xs: '12px', sm: '16px', pt: 1}}}>\r\n\t\t\t\t\tLoser receives (1 Meow token)\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography sx={{color: '#FF1313', fontSize: {xs: '12px', sm: '16px', pt: 1}}}>\r\n\t\t\t\t\tLoser 30 TRX is sent to the War Chest Jackpot until 777 is rolled!\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography sx={{color: '#FF1313', fontSize: {xs: '12px', sm: '16px', pt: 1}}}>\r\n\t\t\t\t\t10 TRX sent to team account\r\n\t\t\t\t</Typography>\r\n\t\t\t</Box>\r\n\t\t\t<Box sx={{py: {xs: 1, sm: 2}, backgroundColor: '#6A6E64', px: 2}}>\r\n\t\t\t\t<Typography sx={{color: '#F39B33', fontSize: {xs: '14px', sm: '18px'}}}>\r\n\t\t\t\t\tWar Chest Jackpot distribution:\r\n\t\t\t\t</Typography>\t\t\t\t\r\n\t\t\t\t<Typography sx={{color: '#F39B33', fontSize: {xs: '12px', sm: '16px'}, tp: 1}}>\r\n\t\t\t\t\t40% goes to who rolled 777\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography sx={{color: '#F39B33', fontSize: {xs: '12px', sm: '16px'}, tp: 1}}>\r\n\t\t\t\t\t10% goes to other user in that battle\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography sx={{color: '#F39B33', fontSize: {xs: '12px', sm: '16px'}, tp: 1}}>\r\n\t\t\t\t\t40% goes to all users that have Meow tokens staked\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography sx={{color: '#F39B33', fontSize: {xs: '12px', sm: '16px'}, tp: 1}}>\r\n\t\t\t\t\t10% remains in the jackpot\r\n\t\t\t\t</Typography>\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n  );\r\n};\r\n\r\nexport default ChestInfo;\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport MeowToken from \"./components/MeowToken\";\r\nimport ChestInfo from \"./components/ChestInfo\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IReduxState } from \"../../store/slices/state.interface\";\r\n\r\nconst Stake = () => {\r\n  const JackpotAmount = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.jackpotAmount\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      sx={{ backgroundColor: \"#989E90\", py: { xs: 2, sm: 4, md: 6, xl: 8 } }}\r\n    >\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          color: \"#F39B33\",\r\n          fontSize: { xs: \"20px\", sm: \"28px\", md: \"36px\", xl: \"40\" },\r\n          py: 1,\r\n          px: { xs: 1, sm: 3 },\r\n          backgroundColor: \"#393D32\",\r\n          width: { xs: \"320px\", sm: \"540px\", md: \"800px\", xl: \"1000px\" },\r\n          textAlign: \"center\",\r\n          mx: \"auto\",\r\n          mb: 2,\r\n        }}\r\n      >\r\n        War Chest Jackpot: {JackpotAmount ? JackpotAmount : 0} Tron\r\n      </Typography>\r\n      <MeowToken />\r\n      <ChestInfo />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Stake;\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\n\r\nexport const loadWaitingDetails = createAsyncThunk(\r\n  \"waiting/loadWaitingDetails\",\r\n  async ({ waitingList, approvedList }: IWaitingSlice) => {\r\n    await instance\r\n      .get(`/api/waiting`)\r\n      .then((response) => {\r\n        waitingList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    await instance\r\n      .get(`/api/approved`)\r\n      .then((response) => {\r\n        approvedList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return {\r\n      waitingList,\r\n      approvedList\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  waitingList: [],\r\n  approvedList: [],\r\n};\r\n\r\nexport interface IWaitingSlice {\r\n  approvedList: any[];\r\n  waitingList: any[];\r\n}\r\n\r\nconst waitingSlice = createSlice({\r\n  name: \"waiting\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadWaitingDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadWaitingDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadWaitingDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      })\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.waiting;\r\n\r\nexport default waitingSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (waiting) => waiting);\r\n","import {\r\n  Box,\r\n  Button,\r\n  Modal,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { AppDispatch } from \"state\";\r\nimport { ApproveNft, DeleteWaiting } from \"store/slices/addnft-slice\";\r\nimport { loadWaitingDetails } from \"store/slices/getnft-slice\";\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 300,\r\n  backgroundColor: \"rgba(38,40,42)\",\r\n  border: \"none\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nfunction Waiting() {\r\n  const waitings: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.waiting.waitingList\r\n  );\r\n  const [open, setOpen] = React.useState(false);\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [name, setName] = React.useState(\"\");\r\n  const [symbol, setSymbol] = React.useState(\"\");\r\n  const [created, setCreated] = React.useState(\"\");\r\n\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const handleApprove = useCallback(async (address: string, name: string, symbol: string) => {\r\n    await dispatch(ApproveNft({ address: address, name: name, symbol: symbol }));\r\n    dispatch(loadWaitingDetails({\r\n      waitingList: [],\r\n      approvedList: []\r\n    }));\r\n  }, []);\r\n\r\n  const handleDecline = useCallback(async (address: string) => {\r\n    await dispatch(DeleteWaiting({ address: address }));\r\n    dispatch(loadWaitingDetails({\r\n      waitingList: [],\r\n      approvedList: []\r\n    }));\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography\r\n        fontSize=\"40px\"\r\n        fontWeight=\"700\"\r\n        color=\"white\"\r\n        textAlign=\"center\"\r\n        pt=\"24px\"\r\n        pb=\"24px\"\r\n      >\r\n        Waiting List\r\n      </Typography>\r\n      <Box>\r\n        <Table sx={{ minWidth: 320 }} aria-label=\"simple table\">\r\n          {waitings.length !== 0 ? (\r\n            <>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", sm: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">No</Typography>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Typography color=\"white\">Address</Typography>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", md: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">Name</Typography>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", md: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">Symbol</Typography>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", lg: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">Created At</Typography>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Typography color=\"white\">Approve</Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {waitings.map((waiting, index) => (\r\n                  <TableRow\r\n                    key={index}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", sm: \"table-cell\" },\r\n                      }}\r\n                      component=\"th\"\r\n                      scope=\"row\"\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">{index + 1}</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Typography\r\n                        sx={{\r\n                          wordBreak: \"break-all\",\r\n                        }}\r\n                        color=\"white\"\r\n                      >\r\n                        {waiting.address}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", md: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography\r\n                        sx={{\r\n                          wordBreak: \"break-all\",\r\n                        }}\r\n                        color=\"white\"\r\n                      >\r\n                        {waiting.name}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", md: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography\r\n                        sx={{\r\n                          wordBreak: \"break-all\",\r\n                        }}\r\n                        color=\"white\"\r\n                      >\r\n                        {waiting.symbol}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", lg: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">{waiting.createdAt}</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"success\"\r\n                        sx={{\r\n                          mr: \"12px\",\r\n                          display: { xs: \"none\", sm: \"inline-flex\" },\r\n                        }}\r\n                        onClick={() => {\r\n                          handleApprove(waiting.address, waiting.name, waiting.symbol);\r\n                        }}\r\n                      >\r\n                        Approve\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"warning\"\r\n                        sx={{\r\n                          marginTop: { xs: \"8px\", sm: \"0px\" },\r\n                          display: { xs: \"none\", sm: \"inline-flex\" },\r\n                        }}\r\n                        onClick={() => {\r\n                          handleDecline(waiting.address);\r\n                        }}\r\n                      >\r\n                        Decline\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"success\"\r\n                        sx={{\r\n                          mr: \"12px\",\r\n                          display: { xs: \"block\", sm: \"none\" },\r\n                        }}\r\n                        onClick={() => {\r\n                          handleOpen();\r\n                          setAddress(waiting.address);\r\n                          setName(waiting.name);\r\n                          setSymbol(waiting.symbol);\r\n                          setCreated(waiting.createdAt);\r\n                        }}\r\n                      >\r\n                        Show Details\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </>\r\n          ) : (\r\n            <Typography color=\"white\" fontSize=\"32px\" textAlign=\"center\">\r\n              You have no waiting NFT address for approving\r\n            </Typography>\r\n          )}\r\n        </Table>\r\n      </Box>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Typography\r\n            sx={{\r\n              wordBreak: \"break-all\",\r\n            }}\r\n            color=\"white\"\r\n            textAlign='center'\r\n          >\r\n            Address: {address}\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              wordBreak: \"break-all\",\r\n              mt: '12px'\r\n            }}\r\n            color=\"white\"\r\n            textAlign='center'\r\n          >\r\n            Name: {name}\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              wordBreak: \"break-all\",\r\n              mt: '12px'\r\n            }}\r\n            color=\"white\"\r\n            textAlign='center'\r\n          >\r\n            Symbol: {symbol}\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              wordBreak: \"break-all\",\r\n              mt: '12px'\r\n            }}\r\n            color=\"white\"\r\n            textAlign='center'\r\n          >\r\n            CreatedAt: {created}\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"success\"\r\n            sx={{\r\n              mt: \"20px\",\r\n              width: \"50%\",\r\n            }}\r\n            onClick={() => {\r\n              handleApprove(address, name, symbol);\r\n              handleClose();\r\n            }}\r\n          >\r\n            Approve\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"warning\"\r\n            sx={{\r\n              mt: \"20px\",\r\n              width: \"50%\",\r\n            }}\r\n            onClick={() => {\r\n              handleDecline(address);\r\n              handleClose();\r\n            }}\r\n          >\r\n            Decline\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Waiting;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Modal,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography,\r\n  } from \"@mui/material\";\r\n  import React, { useCallback } from \"react\";\r\n  import { useDispatch, useSelector } from \"react-redux\";\r\n  import { IReduxState } from \"store/slices/state.interface\";\r\n  import { AppDispatch } from \"state\";\r\n  import { DeleteApproved } from \"store/slices/addnft-slice\";\r\nimport { loadWaitingDetails } from \"store/slices/getnft-slice\";\r\n  \r\n  const style = {\r\n    position: \"absolute\" as \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: 300,\r\n    backgroundColor: \"rgba(38,40,42)\",\r\n    border: \"none\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  };\r\n  \r\n  function Waiting() {\r\n    const approves: any[] = useSelector<IReduxState, any[]>(\r\n      (state) => state.waiting.approvedList\r\n    );\r\n    const [open, setOpen] = React.useState(false);\r\n    const [address, setAddress] = React.useState(\"\");\r\n    const [name, setName] = React.useState(\"\");\r\n    const [symbol, setSymbol] = React.useState(\"\");\r\n    const [created, setCreated] = React.useState(\"\");\r\n  \r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n    const dispatch = useDispatch<AppDispatch>();\r\n  \r\n    const handleDecline = useCallback(async (address: string) => {\r\n      await dispatch(DeleteApproved({ address: address }));\r\n      dispatch(loadWaitingDetails({\r\n        waitingList: [],\r\n        approvedList: []\r\n      }));\r\n    }, []);\r\n  \r\n    return (\r\n      <Box>\r\n        <Typography\r\n          fontSize=\"40px\"\r\n          fontWeight=\"700\"\r\n          color=\"white\"\r\n          textAlign=\"center\"\r\n          pt=\"24px\"\r\n          pb=\"24px\"\r\n        >\r\n          Approved List\r\n        </Typography>\r\n        <Box>\r\n          <Table sx={{ minWidth: 320 }} aria-label=\"simple table\">\r\n            {approves.length !== 0 ? (\r\n              <>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", sm: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">No</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Typography color=\"white\">Address</Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", md: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">Name</Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", md: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">Symbol</Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", lg: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">Created At</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Typography color=\"white\">Approve</Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {approves.map((approve, index) => (\r\n                    <TableRow\r\n                      key={index}\r\n                      sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                    >\r\n                      <TableCell\r\n                        sx={{\r\n                          display: { xs: \"none\", sm: \"table-cell\" },\r\n                        }}\r\n                        component=\"th\"\r\n                        scope=\"row\"\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography color=\"white\">{index + 1}</Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Typography\r\n                          sx={{\r\n                            wordBreak: \"break-all\",\r\n                          }}\r\n                          color=\"white\"\r\n                        >\r\n                          {approve.address}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        sx={{\r\n                          display: { xs: \"none\", md: \"table-cell\" },\r\n                        }}\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography\r\n                          sx={{\r\n                            wordBreak: \"break-all\",\r\n                          }}\r\n                          color=\"white\"\r\n                        >\r\n                          {approve.name}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        sx={{\r\n                          display: { xs: \"none\", md: \"table-cell\" },\r\n                        }}\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography\r\n                          sx={{\r\n                            wordBreak: \"break-all\",\r\n                          }}\r\n                          color=\"white\"\r\n                        >\r\n                          {approve.symbol}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        sx={{\r\n                          display: { xs: \"none\", lg: \"table-cell\" },\r\n                        }}\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography color=\"white\">{approve.createdAt}</Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"warning\"\r\n                          sx={{\r\n                            marginTop: { xs: \"8px\", sm: \"0px\" },\r\n                            display: { xs: \"none\", sm: \"inline-flex\" },\r\n                          }}\r\n                          onClick={() => {\r\n                            handleDecline(approve.address);\r\n                          }}\r\n                        >\r\n                          Decline\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"success\"\r\n                          sx={{\r\n                            mr: \"12px\",\r\n                            display: { xs: \"block\", sm: \"none\" },\r\n                          }}\r\n                          onClick={() => {\r\n                            handleOpen();\r\n                            setAddress(approve.address);\r\n                            setName(approve.name);\r\n                            setSymbol(approve.symbol);\r\n                            setCreated(approve.createdAt);\r\n                          }}\r\n                        >\r\n                          Show Details\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </>\r\n            ) : (\r\n              <Typography color=\"white\" fontSize=\"32px\" textAlign=\"center\">\r\n                You have no waiting NFT address for approving\r\n              </Typography>\r\n            )}\r\n          </Table>\r\n        </Box>\r\n        <Modal\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Typography\r\n              sx={{\r\n                wordBreak: \"break-all\",\r\n              }}\r\n              color=\"white\"\r\n              textAlign='center'\r\n            >\r\n              Address: {address}\r\n            </Typography>\r\n            <Typography\r\n              sx={{\r\n                wordBreak: \"break-all\",\r\n                mt: '12px'\r\n              }}\r\n              color=\"white\"\r\n              textAlign='center'\r\n            >\r\n              Name: {name}\r\n            </Typography>\r\n            <Typography\r\n              sx={{\r\n                wordBreak: \"break-all\",\r\n                mt: '12px'\r\n              }}\r\n              color=\"white\"\r\n              textAlign='center'\r\n            >\r\n              Symbol: {symbol}\r\n            </Typography>\r\n            <Typography\r\n              sx={{\r\n                wordBreak: \"break-all\",\r\n                mt: '12px'\r\n              }}\r\n              color=\"white\"\r\n              textAlign='center'\r\n            >\r\n              CreatedAt: {created}\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"warning\"\r\n              sx={{\r\n                mt: \"20px\",\r\n                width: \"50%\",\r\n              }}\r\n              onClick={() => {\r\n                handleDecline(address);\r\n                handleClose();\r\n              }}\r\n            >\r\n              Decline\r\n            </Button>\r\n          </Box>\r\n        </Modal>\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  export default Waiting;\r\n  ","import { useCallback, useEffect } from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loadWaitingDetails } from \"store/slices/getnft-slice\";\r\nimport { AppDispatch } from \"state\";\r\nimport Waiting from \"./components/waiting\";\r\nimport Approve from \"./components/approve\";\r\n\r\nfunction Admin() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const loadData = useCallback(() => {\r\n    dispatch(\r\n      loadWaitingDetails({\r\n        waitingList: [],\r\n        approvedList: [],\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: \"#111B24\",\r\n      }}\r\n      minHeight=\"100vh\"\r\n    >\r\n      <Waiting />\r\n      <Approve />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Admin;\r\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\r\nimport { addPopup, PopupContent, removePopup, updateBlockNumber, ApplicationModal, setOpenModal } from './actions';\r\n\r\ntype PopupList = Array<{ key: string; show: boolean; content: PopupContent; removeAfterMs: number | null }>;\r\n\r\nexport interface ApplicationState {\r\n  readonly blockNumber: { readonly [chainId: number]: number };\r\n  readonly popupList: PopupList;\r\n  readonly openModal: ApplicationModal | null;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  openModal: null,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const { chainId, blockNumber } = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== 'number') {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\r\n      }\r\n    })\r\n    .addCase(setOpenModal, (state, action) => {\r\n      state.openModal = action.payload;\r\n    })\r\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\r\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\r\n        {\r\n          key: key || nanoid(),\r\n          show: true,\r\n          content,\r\n          removeAfterMs,\r\n        },\r\n      ]);\r\n    })\r\n    .addCase(removePopup, (state, { payload: { key } }) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    }),\r\n);\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// fired once when the app reloads but before the app renders\r\n// allows any updates to be applied to store data loaded from localStorage\r\nexport const updateVersion = createAction<void>('global/updateVersion');\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport interface SerializedToken {\r\n  chainId: number;\r\n  address: string;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n\r\nexport interface SerializedPair {\r\n  token0: SerializedToken;\r\n  token1: SerializedToken;\r\n}\r\n\r\nexport const updateMatchesDarkMode = createAction<{ matchesDarkMode: boolean }>('user/updateMatchesDarkMode');\r\nexport const updateUserDarkMode = createAction<{ userDarkMode: boolean }>('user/updateUserDarkMode');\r\nexport const updateUserExpertMode = createAction<{ userExpertMode: boolean }>('user/updateUserExpertMode');\r\nexport const updateUserSlippageTolerance = createAction<{ userSlippageTolerance: number }>(\r\n  'user/updateUserSlippageTolerance',\r\n);\r\nexport const updateUserDeadline = createAction<{ userDeadline: number }>('user/updateUserDeadline');\r\nexport const addSerializedToken = createAction<{ serializedToken: SerializedToken }>('user/addSerializedToken');\r\nexport const removeSerializedToken = createAction<{ chainId: number; address: string }>('user/removeSerializedToken');\r\nexport const addSerializedPair = createAction<{ serializedPair: SerializedPair }>('user/addSerializedPair');\r\nexport const removeSerializedPair = createAction<{ chainId: number; tokenAAddress: string; tokenBAddress: string }>(\r\n  'user/removeSerializedPair',\r\n);\r\nexport const toggleURLWarning = createAction<void>('app/toggleURLWarning');\r\n","import { INITIAL_ALLOWED_SLIPPAGE, DEFAULT_DEADLINE_FROM_NOW } from '../../constants';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { updateVersion } from '../global/actions';\r\nimport {\r\n  addSerializedPair,\r\n  addSerializedToken,\r\n  removeSerializedPair,\r\n  removeSerializedToken,\r\n  SerializedPair,\r\n  SerializedToken,\r\n  updateMatchesDarkMode,\r\n  updateUserDarkMode,\r\n  updateUserExpertMode,\r\n  updateUserSlippageTolerance,\r\n  updateUserDeadline,\r\n  toggleURLWarning,\r\n} from './actions';\r\n\r\nconst currentTimestamp = () => new Date().getTime();\r\n\r\nexport interface UserState {\r\n  // the timestamp of the last updateVersion action\r\n  lastUpdateVersionTimestamp?: number;\r\n\r\n  userDarkMode: boolean | null; // the user's choice for dark mode or light mode\r\n  matchesDarkMode: boolean; // whether the dark mode media query matches\r\n\r\n  userExpertMode: boolean;\r\n\r\n  // user defined slippage tolerance in bips, used in all txns\r\n  userSlippageTolerance: number;\r\n\r\n  // deadline set by user in minutes, used in all txns\r\n  userDeadline: number;\r\n\r\n  tokens: {\r\n    [chainId: number]: {\r\n      [address: string]: SerializedToken;\r\n    };\r\n  };\r\n\r\n  pairs: {\r\n    [chainId: number]: {\r\n      // keyed by token0Address:token1Address\r\n      [key: string]: SerializedPair;\r\n    };\r\n  };\r\n\r\n  timestamp: number;\r\n  URLWarningVisible: boolean;\r\n}\r\n\r\nfunction pairKey(token0Address: string, token1Address: string) {\r\n  return `${token0Address};${token1Address}`;\r\n}\r\n\r\nexport const initialState: UserState = {\r\n  userDarkMode: true,\r\n  matchesDarkMode: true,\r\n  userExpertMode: false,\r\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\r\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\r\n  tokens: {},\r\n  pairs: {},\r\n  timestamp: currentTimestamp(),\r\n  URLWarningVisible: true,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateVersion, (state) => {\r\n      // slippage isnt being tracked in local storage, reset to default\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof state.userSlippageTolerance !== 'number') {\r\n        state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE;\r\n      }\r\n\r\n      // deadline isnt being tracked in local storage, reset to default\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof state.userDeadline !== 'number') {\r\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW;\r\n      }\r\n\r\n      state.lastUpdateVersionTimestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateUserDarkMode, (state, action) => {\r\n      state.userDarkMode = action.payload.userDarkMode;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateMatchesDarkMode, (state, action) => {\r\n      state.matchesDarkMode = action.payload.matchesDarkMode;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateUserExpertMode, (state, action) => {\r\n      state.userExpertMode = action.payload.userExpertMode;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateUserSlippageTolerance, (state, action) => {\r\n      state.userSlippageTolerance = action.payload.userSlippageTolerance;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateUserDeadline, (state, action) => {\r\n      state.userDeadline = action.payload.userDeadline;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\r\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {};\r\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(removeSerializedToken, (state, { payload: { address, chainId } }) => {\r\n      state.tokens[chainId] = state.tokens[chainId] || {};\r\n      delete state.tokens[chainId][address];\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\r\n      if (\r\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\r\n        serializedPair.token0.address !== serializedPair.token1.address\r\n      ) {\r\n        const chainId = serializedPair.token0.chainId;\r\n        state.pairs[chainId] = state.pairs[chainId] || {};\r\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair;\r\n      }\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(removeSerializedPair, (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\r\n      if (state.pairs[chainId]) {\r\n        // just delete both keys if either exists\r\n        delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)];\r\n        delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)];\r\n      }\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(toggleURLWarning, (state) => {\r\n      state.URLWarningVisible = !state.URLWarningVisible;\r\n    }),\r\n);\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n  claim?: { recipient: string };\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary, claim } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = { hash, approval, summary, claim, from, addedTime: now() };\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    }),\r\n);\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addMulticallListeners,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  removeMulticallListeners,\r\n  toCallKey,\r\n  updateMulticallResults,\r\n} from './actions';\r\n\r\nexport interface MulticallState {\r\n  callListeners?: {\r\n    // on a per-chain basis\r\n    [chainId: number]: {\r\n      // stores for each call key the listeners' preferences\r\n      [callKey: string]: {\r\n        // stores how many listeners there are per each blocks per fetch preference\r\n        [blocksPerFetch: number]: number;\r\n      };\r\n    };\r\n  };\r\n\r\n  callResults: {\r\n    [chainId: number]: {\r\n      [callKey: string]: {\r\n        data?: string | null;\r\n        blockNumber?: number;\r\n        fetchingBlockNumber?: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nconst initialState: MulticallState = {\r\n  callResults: {},\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\r\n      const listeners: MulticallState['callListeners'] = state.callListeners\r\n        ? state.callListeners\r\n        : (state.callListeners = {});\r\n      listeners[chainId] = listeners[chainId] ?? {};\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call);\r\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {};\r\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1;\r\n      });\r\n    })\r\n    .addCase(\r\n      removeMulticallListeners,\r\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\r\n        const listeners: MulticallState['callListeners'] = state.callListeners\r\n          ? state.callListeners\r\n          : (state.callListeners = {});\r\n\r\n        if (!listeners[chainId]) return;\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call);\r\n          if (!listeners[chainId][callKey]) return;\r\n          if (!listeners[chainId][callKey][blocksPerFetch]) return;\r\n\r\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\r\n            delete listeners[chainId][callKey][blocksPerFetch];\r\n          } else {\r\n            listeners[chainId][callKey][blocksPerFetch]--;\r\n          }\r\n        });\r\n      },\r\n    )\r\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call);\r\n        const current = state.callResults[chainId][callKey];\r\n        if (!current) {\r\n          state.callResults[chainId][callKey] = {\r\n            fetchingBlockNumber,\r\n          };\r\n        } else {\r\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return;\r\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber;\r\n        }\r\n      });\r\n    })\r\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call);\r\n        const current = state.callResults[chainId][callKey];\r\n        if (!current) return; // only should be dispatched if we are already fetching\r\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\r\n          delete current.fetchingBlockNumber;\r\n          current.data = null;\r\n          current.blockNumber = fetchingBlockNumber;\r\n        }\r\n      });\r\n    })\r\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n      Object.keys(results).forEach((callKey) => {\r\n        const current = state.callResults[chainId][callKey];\r\n        if ((current?.blockNumber ?? 0) > blockNumber) return;\r\n        state.callResults[chainId][callKey] = {\r\n          data: results[callKey],\r\n          blockNumber,\r\n        };\r\n      });\r\n    }),\r\n);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport TronWeb from \"tronweb\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\n\r\ninterface ILoadJackpotDetails {\r\n  account: any;\r\n}\r\n\r\ndeclare var window: any;\r\n\r\nexport const loadJackpotDetails = createAsyncThunk(\r\n  \"jackpot/loadJackpotDetails\",\r\n  async ({ account }: ILoadJackpotDetails) => {\r\n    let meowContract, meowTokenContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(TronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n        meowTokenContract = await window.tronWeb\r\n          .contract()\r\n          .at(TronWeb.address.toHex(SHASTA_TESTNET.MEOWTOKEN_ADDRESS));\r\n      }\r\n    }\r\n\r\n    const gameprice = (await meowContract.gamePrice().call()).toString();\r\n    const jackpotAmount = (\r\n      (await meowContract.jackpotAmount().call()) / Math.pow(10, 6)\r\n    ).toString();\r\n    const meowCount = (\r\n      await meowTokenContract.balanceOf(account).call()\r\n    ).toString();\r\n    return {\r\n      gameprice,\r\n      jackpotAmount,\r\n      meowCount,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nexport interface IJackPotSlice {\r\n  gameprice: string;\r\n  jackpotAmount: string;\r\n  loading: boolean;\r\n  meowCount: string;\r\n}\r\n\r\nconst jackpotSlice = createSlice({\r\n  name: \"jackpot\",\r\n  initialState,\r\n  reducers: {\r\n    fetchJackpotSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadJackpotDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadJackpotDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadJackpotDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.jackpot;\r\n\r\nexport default jackpotSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (jackpot) => jackpot);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { load } from \"redux-localstorage-simple\";\r\n\r\nimport application from \"./application/reducer\";\r\nimport { updateVersion } from \"./global/actions\";\r\nimport user from \"./user/reducer\";\r\nimport transactions from \"./transactions/reducer\";\r\nimport multicall from \"./multicall/reducer\";\r\n\r\nimport appReducer from \"store/slices/game-slice\";\r\nimport fightReducer from \"store/slices/play-slice\";\r\nimport stackReducer from \"store/slices/staking-slice\";\r\nimport nftReducer from \"store/slices/NFt-slice\";\r\nimport nftInfoReducer from 'store/slices/Nftinfo-slice';\r\nimport walletInfoReducer from 'store/slices/walletInfo-slice';\r\nimport messagesReducer from \"store/slices/messages-slice\";\r\nimport battleReducer from 'store/slices/battle-slice';\r\nimport JackpotReducer from 'store/slices/jackpot-slice';\r\nimport RandomReducer from 'store/slices/random-slice';\r\nimport ResultReducer from 'store/slices/result-slice';\r\nimport WinnerReducer from 'store/slices/winner-slice';\r\nimport WaitingReducer from 'store/slices/getnft-slice';\r\n\r\nconst PERSISTED_KEYS: string[] = [\"user\", \"transactions\", \"lists\"];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    user,\r\n    transactions,\r\n    multicall,\r\n    app: appReducer,\r\n    fight: fightReducer,\r\n    stack: stackReducer,\r\n    nft: nftReducer,\r\n    nfts: nftInfoReducer,\r\n    wallet: walletInfoReducer,\r\n    messages: messagesReducer,\r\n    battle: battleReducer,\r\n    jackpot: JackpotReducer,\r\n    random: RandomReducer,\r\n    result: ResultReducer,\r\n    winner: WinnerReducer,\r\n    waiting: WaitingReducer,\r\n  },\r\n  middleware: getDefaultMiddleware => getDefaultMiddleware({ serializableCheck: false }),\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nstore.dispatch(updateVersion());\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport Header from \"components/Header\";\r\nimport Home from \"pages/Home\";\r\nimport Stake from \"pages/Stake\";\r\nimport Admin from \"pages/admin\";\r\nimport { Provider } from \"react-redux\";\r\nimport store, { AppDispatch } from \"./state\";\r\nimport { loadGameDetails } from \"./store/slices/game-slice\";\r\nimport { loadNftDetails } from \"store/slices/Nftinfo-slice\";\r\nimport { loadJackpotDetails } from \"store/slices/jackpot-slice\";\r\nimport { loadRandomDetails } from \"store/slices/random-slice\";\r\nimport { loadResultDetails } from \"store/slices/result-slice\";\r\nimport { loadWinnerDetails } from \"store/slices/winner-slice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEffect, useCallback } from \"react\";\r\nimport { useWalletModalToggle } from \"state/application/hooks\";\r\nimport { ReactNotifications } from 'react-notifications-component';\r\nimport 'react-notifications-component/dist/theme.css';\r\nimport { loadWaitingDetails } from \"store/slices/getnft-slice\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { active, account } = useWeb3React();\r\n  const toggleWalletModal = useWalletModalToggle();\r\n\r\n  const loadData = useCallback(() => {\r\n    dispatch(loadGameDetails({ gameData: [] }));\r\n    dispatch(loadRandomDetails({ randomData: [] }));\r\n    dispatch(loadResultDetails({ resultData: [] }));\r\n    dispatch(loadWinnerDetails({ winnerData: [] }));\r\n    dispatch(loadWaitingDetails({\r\n      waitingList: [],\r\n      approvedList: []\r\n    }));\r\n    dispatch(loadNftDetails({ account: account }));\r\n    dispatch(loadJackpotDetails({ account: account }));\r\n  }, [account]);\r\n\r\n  useEffect(() => {\r\n    if (active) {\r\n      loadData();\r\n    }\r\n  }, [active]);\r\n  useEffect(() => {\r\n    if (!active) {\r\n      toggleWalletModal();\r\n    }\r\n  }, [active]);\r\n\r\n  return (\r\n    <>\r\n      <Provider store={store}>\r\n        <ReactNotifications />\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/stake\" component={Stake} />\r\n          <Route exact path='/admin' component={Admin} />\r\n          <Route path=\"*\">\r\n            <Redirect to=\"/\" />\r\n          </Route>\r\n        </Switch>\r\n      </Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import PropTypes from \"prop-types\";\r\nimport { CssBaseline } from \"@mui/material\";\r\nimport {\r\n  ThemeProvider as MUIThemeProvider,\r\n  createTheme,\r\n  StyledEngineProvider,\r\n} from \"@mui/material/styles\";\r\n\r\nThemeProvider.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default function ThemeProvider({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode: \"light\",\r\n      common: {\r\n        black: \"#16151a\",\r\n      },\r\n      primary: {\r\n        light: \"#62ceec\",\r\n        main: \"#6164ff\",\r\n        dark: \"#2847EE\",\r\n      },\r\n      secondary: {\r\n        light: \"#f59b2f\",\r\n        main: \"#ff7523\",\r\n        dark: \"#3f1d3f\",\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <StyledEngineProvider injectFirst>\r\n      <MUIThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        {children}\r\n      </MUIThemeProvider>\r\n    </StyledEngineProvider>\r\n  );\r\n}\r\n","import { Web3Provider } from '@ethersproject/providers';\r\nexport default function getLibrary(provider: any): Web3Provider {\r\n  const library = new Web3Provider(provider);\r\n  library.pollingInterval = 15000;\r\n  return library;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { createWeb3ReactRoot, Web3ReactProvider } from \"@web3-react/core\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport \"assets/styles/index.scss\";\r\nimport App from \"./App\";\r\nimport store from \"./state\";\r\nimport ThemeProvider from \"./theme\";\r\nimport getLibrary from \"./utils/getLibrary\";\r\nimport { NetworkContextName } from \"./constants\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName);\r\n\r\nReactDOM.render(\r\n  <ThemeProvider>\r\n      <Web3ReactProvider getLibrary={getLibrary}>\r\n        <Web3ProviderNetwork getLibrary={getLibrary}>\r\n          <Provider store={store}>\r\n            <HashRouter>\r\n                <App />\r\n            </HashRouter>\r\n          </Provider>\r\n        </Web3ProviderNetwork>\r\n      </Web3ReactProvider>\r\n  </ThemeProvider>,\r\n\r\n  document.getElementById(\"root\") as HTMLElement\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}