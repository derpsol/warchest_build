{"version":3,"sources":["assets/images/Ui_box3.webp","assets/images/button.png","assets/images/honeypot.png","assets/images/discord-brands.svg","assets/images/banner.png","assets/images/first.png","assets/images/honeytoken.png","assets/images/other.png","assets/images/second.png","assets/images/third.png","assets/images sync /^/.*$","assets/images/HoneyCoin.PNG","assets/images/tronlink.svg","constants/axios.ts","utils/notification.ts","store/slices/addnft-slice.ts","connectors/injected-tron-connector/tronlink-abis.ts","connectors/injected-tron-connector/index.ts","connectors/NetworkConnector.ts","connectors/index.ts","constants/blockchain.ts","state/application/actions.ts","constants/addresses.ts","constants/index.ts","hooks/index.ts","state/application/hooks.ts","state/multicall/actions.ts","state/multicall/hooks.ts","utils/index.ts","constants/multicall/index.ts","hooks/useContract.ts","hooks/useENSName.ts","hooks/useDebounce.ts","utils/isZero.ts","state/transactions/actions.ts","state/transactions/hooks.tsx","components/Identicon/index.tsx","components/Loader/index.tsx","components/AccountDetails/Copy.tsx","hooks/useCopyClipboard.ts","components/AccountDetails/Transaction.tsx","components/AccountDetails/index.tsx","components/WalletModal/Option.tsx","components/WalletModal/PendingView.tsx","hooks/usePrevious.ts","components/WalletModal/index.tsx","components/Web3Status/index.tsx","components/Header/index.tsx","pages/Home/components/Banner/index.tsx","store/slices/pending-txns-slice.ts","helpers/set-all.ts","store/slices/play-slice.ts","store/slices/walletInfo-slice.ts","pages/Home/components/Jackpot/index.tsx","components/Current/style.ts","store/slices/battle-slice.ts","store/slices/messages-slice.ts","constants/messages.ts","helpers/metamask-error-wrap.ts","store/slices/NFt-slice.ts","components/Current/getDate.ts","store/slices/enter-room-slice.ts","components/Current/modal.tsx","components/Current/bigRoomModal.tsx","components/Current/Datas.ts","store/slices/Nftinfo-slice.ts","components/Current/SmallRoom.tsx","components/Current/BigRoom.tsx","store/slices/game-slice.ts","store/slices/random-slice.ts","store/slices/result-slice.ts","store/slices/winner-slice.ts","store/slices/userinfo-slice.ts","pages/Home/components/CurrentBattle/index.tsx","pages/Home/index.tsx","store/slices/staking-slice.ts","pages/Stake/components/MeowToken/index.tsx","pages/Stake/components/ChestInfo/index.tsx","pages/Stake/index.tsx","store/slices/getnft-slice.ts","pages/admin/components/waiting/index.tsx","pages/admin/components/approve/index.tsx","store/slices/refund-slice.ts","pages/admin/components/refund/index.tsx","pages/admin/index.tsx","pages/result/Role/index.tsx","pages/result/FinishedBattle/index.tsx","pages/result/Winner/index.tsx","pages/result/MyResult/index.tsx","pages/result/index.tsx","state/application/reducer.ts","state/global/actions.ts","state/user/actions.ts","state/user/reducer.ts","state/transactions/reducer.ts","state/multicall/reducer.ts","store/slices/jackpot-slice.ts","state/index.ts","App.tsx","theme/index.tsx","utils/getLibrary.ts","reportWebVitals.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","baseURL","instance","axios","create","notification","title","message","type","Store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","onScreen","AddNft","createAsyncThunk","address","window","tronWeb","defaultAddress","base58","contract","at","toHex","nftContract","name","call","nftName","symbol","nftSymbol","post","ApproveNft","delete","DeleteWaiting","DeleteApproved","abis","ERC20_ABI","IntercroneswapV1Router02ABI","InjectedTronConnector","kwargs","provider","getParamTypes","params","components","join","signs","web3","Web3","providers","WebsocketProvider","fn","sign","eth","abi","encodeFunctionSignature","inputs","getFunctionSelector","err","createTronLinkProvider","network","process","tronApiUrl","functionSignatures","args","this","request","res","requestProvider","method","accounts","account","chainId","AbstractConnector","NetworkConnector","createJavaTronProvider","NETWORK_URL","NETWORK_CHAIN_ID","parseInt","urls","Networks","injected","supportedChainIds","GOERLI","ApplicationModal","SHASTA_TESTNET","MEOW_ADDRESS","NFT_ADDRESS","MEOWTOKEN_ADDRESS","SUPPORTED_WALLETS","TRONLINK","connector","iconName","description","href","color","mobileOnly","NetworkContextName","useActiveWeb3React","context","useWeb3ReactCore","contextNetwork","active","updateBlockNumber","createAction","setOpenModal","addPopup","removePopup","useBlockNumber","useSelector","state","application","blockNumber","useModalOpen","modal","openModal","useToggleModal","open","dispatch","useDispatch","useCallback","useWalletModalToggle","WALLET","ADDRESS_REGEX","LOWER_HEX_REGEX","toCallKey","test","callData","addMulticallListeners","removeMulticallListeners","fetchingMulticallResults","errorFetchingMulticallResults","updateMulticallResults","isMethodArg","x","indexOf","isValidMethodArgs","undefined","Array","isArray","every","xi","INVALID_RESULT","valid","data","useCallsData","calls","options","callResults","multicall","serializedCallKeys","useMemo","JSON","stringify","filter","c","Boolean","sort","useEffect","callKeys","parse","length","key","callKey","pcs","split","parseCallKey","result","INVALID_CALL_STATE","loading","syncing","error","LOADING_CALL_STATE","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","decodeFunctionResult","console","debug","useSingleCallResult","methodName","interface","getFunction","encodeFunctionData","isAddress","value","getAddress","ETHERSCAN_PREFIXES","getEtherscanLink","prefix","remove0xPrefix","ethAddress","toTron","shortenAddress","chars","parsed","tronAddress","substring","substr","ChainId","MAINNET","NILE","SHASTA","useContract","ABI","withSignerIfPossible","library","AddressZero","Contract","getSigner","connectUnchecked","getProviderOrSigner","getContract","useENSName","debouncedAddress","delay","useState","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","ensNodeArgument","namehash","toLowerCase","registrarContract","ENS_ABI","useENSRegistrarContract","resolverAddress","resolverAddressResult","resolverContract","ENS_PUBLIC_RESOLVER_ABI","useENSResolverContract","changed","ENSName","addTransaction","clearAllTransactions","finalizeTransaction","checkedTransaction","useAllTransactions","transactions","isTransactionRecent","tx","Date","getTime","addedTime","Identicon","ref","useRef","current","innerHTML","appendChild","Jazzicon","slice","Box","sx","height","width","borderRadius","Loader","stroke","viewBox","fill","xmlns","className","d","strokeWidth","strokeLinecap","strokeLinejoin","CopyHelper","props","timeout","isCopied","setIsCopied","staticCopy","text","didCopy","copy","hide","useCopyClipboard","setCopied","onClick","toCopy","size","Typography","component","ml","fontSize","children","Transaction","hash","allTransactions","summary","pending","receipt","status","Link","target","rel","display","justifyContent","alignItems","textDecoration","p","renderTransactions","i","AccountDetails","toggleWalletModal","pendingTransactions","confirmedTransactions","openOptions","getStatusIcon","mr","clearAllTransactionsCallback","IconButton","k","formatConnectorName","Button","variant","lineHeight","mb","textTransform","Option","clickable","header","subheader","icon","backgroundColor","borderColor","cursor","border","mt","src","alt","PendingView","setPendingError","tryActivation","option","require","default","usePrevious","WALLET_VIEWS","OPTIONS","OPTIONS_SECONDARY","ACCOUNT","PENDING","WalletModal","useWeb3React","activate","walletView","setWalletView","pendingWallet","setPendingWallet","pendingError","walletModalOpen","previousAccount","activePrevious","connectorPrevious","ReactGA","event","category","action","label","catch","UnsupportedChainIdError","Dialog","onClose","maxWidth","xs","sm","md","newTransactionsFirst","a","b","StatusIcon","Web3StatusInner","values","hasPendingTransactions","Web3Status","sortedRecentTransactions","confirmed","menuLists","link","style","position","top","left","transform","boxShadow","flexDirection","Header","history","useHistory","React","setOpen","NFTAddress","setNFTAddress","anchorElUser","setAnchorElUser","handleClose","handleCloseUserMenu","handleRequest","AppBar","Container","Toolbar","disableGutters","columnGap","fontFamily","DiscordIcon","currentTarget","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","list","push","log","Modal","fontWeight","TextField","onChange","Banner","BannerImage1","pendingTxnsSlice","createSlice","initialState","reducers","fetchPendingTxns","payload","clearPendingTxn","find","txnHash","splice","actions","setAll","properties","forEach","socket","io","widrawNFT","meowContract","get","then","response","usersData","nftIds","nftAddress","ownNfts","Number","claimNFT","send","feeLimit","stakeAmount","claimAmount","emit","claimMoney","ClaimFight","tokenId","fightRoom","whichroom","url","waitingRandom","gamePrice","random1","random2","claimFight","callValue","enterTx","Promise","trx","getTransaction","transaction","ret","contractRet","randoms","random_tmp","toNumber","roomNum","secondNFT","secondAddress","secondRandom","secondId","firstRandom","randomNumber1","randomNumber2","resultData","availableAmount","firstAddress","Math","pow","firstClaimMoney","secondClaimMoney","availableHoneyAmount","firstClaimHoney","secondClaimHoney","winnerData","winCount","nftUrl1","firstNFT","nftUrl2","address1","address2","fightSlice","fetchAppSuccess","extraReducers","builder","addCase","fulfilled","rejected","walletInfo","createSelector","fight","totalStake","tmpData","nftCount","nftInfo","trxAmount","nftSlice","availableStyle","nfts","paddingY","textAlign","Jackpot","JackpotAmount","jackpot","jackpotAmount","contractNFTs","userInfo","userInfoData","widrawAmount","getAvailableData","onWidrawNFT","meta","requestStatus","onClaimMoney","py","px","mx","flexWrap","pb","xl","fightStyle","randomNumberStyle","randomNumberPosStyle","buttonWidthStyle","roomStyleAvatar","buttonStyle","roomContentTop","roomStyleBack","lg","overflowY","avatarsStyle","modalAvatarStyle","loadBattleDetails","openState","claimState","whichfight","decide","waitingNft","battleSlice","battle","createMessage","severity","messagesSlice","info","warning","close","messages","metamaskErrorWrap","includes","trim","approveNFT","approve","loadNftAllowance","tokenIds","index","approvedList","allows","all","idn","getApproved","allowtmp","allowances","getDate","nft","date","year","getFullYear","month","getMonth","day","hour","getHours","minute","getMinutes","second","getSeconds","EnterRoom","enterRoom","attempts","SampleModal","setValue","nftids","nfturis","baseUri","nfturl","isLoading","allowFlg","gameprice","wallet","getAllowanceFlag","handleApproveNFT","closeModal","onEnterRoom","fightRoomNum","TabContext","TabList","newValue","Tabs","scrollButtons","allowScrollButtonsMobile","Tab","TabPanel","index0","m","index1","Skeleton","BigRoomModal","onClaimFight","Datas","loadNftDetails","j","tokenURI","balanceOf","nft_counts","min","tokenOfOwnerByIndex","tmptokenID","toDecimal","SmallRooms","gameData","app","onEnterModal","onClaimModal","bgcolor","padding","roomPic","disabled","buttonBack","BigRoom","firRandomData","secRandomData","repeat","loadGameDetails","tmpgameData","maxRoomNum","max","newGameData","createdAt","flag","tmpcnt","gameSlice","updateGameData","updatedData","delRoomNum","findIndex","emptyData","loadRandomDetails","randomData","randomSlice","updateRandomData","unshift","loadResultDetails","random","myResultData","resultSlice","updateResultData","pop","loadWinnerDetails","winnerSlice","updateWinnerData","loadUserInfoDetails","userinfoSlice","updateUserInfoData","CurrentBattle","on","paddingX","pt","Home","my","stackingMeow","amount","meowTokenContract","stakeamount","approveTx","stake","unstackingMeow","unStake","stakeSlice","stack","meowTokenStyle","jackpotStyle","stakeButtonStyle","opacity","MeowToken","stackAmount","changesStack","unstackAmount","changeUnstack","meowCount","alert","marginX","HoneyTokenAvatar","pl","ChestInfo","tp","Stake","HoneyPot","loadWaitingDetails","waitingList","waitingSlice","waiting","Waiting","waitings","setAddress","setName","setSymbol","created","setCreated","handleApprove","handleDecline","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","scope","wordBreak","marginTop","approves","refundRoom","fighterAddress","refundFight","Refund","displayData","setDisplayData","filteredData","handleRefund","Admin","loadData","minHeight","Role","overflow","FinishedBattle","marginRight","Winner","winner","borderBottom","rank","first","third","other","MyResult","Result","createReducer","popupList","content","removeAfterMs","popup","concat","nanoid","show","updateVersion","updateMatchesDarkMode","updateUserDarkMode","updateUserExpertMode","updateUserSlippageTolerance","updateUserDeadline","addSerializedToken","removeSerializedToken","addSerializedPair","removeSerializedPair","toggleURLWarning","currentTimestamp","pairKey","token0Address","token1Address","userDarkMode","matchesDarkMode","userExpertMode","userSlippageTolerance","userDeadline","tokens","pairs","timestamp","URLWarningVisible","lastUpdateVersionTimestamp","serializedToken","serializedPair","token0","token1","tokenAAddress","tokenBAddress","now","from","approval","claim","txs","lastCheckedBlockNumber","confirmedTime","blocksPerFetch","listeners","callListeners","fetchingBlockNumber","results","loadJackpotDetails","TronWeb","toString","jackpotSlice","fetchJackpotSuccess","store","configureStore","reducer","user","appReducer","fightReducer","stackReducer","nftReducer","nftInfoReducer","walletInfoReducer","messagesReducer","battleReducer","JackpotReducer","RandomReducer","ResultReducer","WinnerReducer","WaitingReducer","UserInfoReducer","middleware","getDefaultMiddleware","serializableCheck","preloadedState","load","states","App","exact","path","to","ThemeProvider","theme","createTheme","palette","mode","common","black","primary","light","main","dark","secondary","StyledEngineProvider","injectFirst","CssBaseline","getLibrary","Web3Provider","pollingInterval","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Web3ProviderNetwork","createWeb3ReactRoot","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8c86a60.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Ui_box3.2bc6911b.webp\";","export default __webpack_public_path__ + \"static/media/button.6f4e853a.png\";","export default __webpack_public_path__ + \"static/media/honeypot.45e34a4c.png\";","export default __webpack_public_path__ + \"static/media/discord-brands.3e07cf0d.svg\";","export default __webpack_public_path__ + \"static/media/banner.64d49972.png\";","export default __webpack_public_path__ + \"static/media/first.7f3fb01f.png\";","export default __webpack_public_path__ + \"static/media/honeytoken.4750ff55.png\";","export default __webpack_public_path__ + \"static/media/other.92150453.png\";","export default __webpack_public_path__ + \"static/media/second.f19c1593.png\";","export default __webpack_public_path__ + \"static/media/third.5ba8b9bd.png\";","var map = {\n\t\"./HoneyCoin.PNG\": 628,\n\t\"./Ui_box3.webp\": 130,\n\t\"./banner.png\": 241,\n\t\"./button.png\": 131,\n\t\"./discord-brands.svg\": 235,\n\t\"./first.png\": 242,\n\t\"./honeypot.png\": 197,\n\t\"./honeytoken.png\": 243,\n\t\"./other.png\": 244,\n\t\"./second.png\": 245,\n\t\"./third.png\": 246,\n\t\"./tronlink.svg\": 629\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 331;","export default __webpack_public_path__ + \"static/media/HoneyCoin.236c00d9.PNG\";","export default __webpack_public_path__ + \"static/media/tronlink.d4b98412.svg\";","import axios from \"axios\";\r\n\r\nexport const baseURL = \"http://54.88.70.33\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: baseURL,\r\n});\r\n\r\nexport default instance;","import { Store } from 'react-notifications-component';\r\n\r\ninterface INotification {\r\n    title: string,\r\n    message? : string,\r\n    type: 'success' | 'danger' | 'info' | 'default' | 'warning'\r\n}\r\n\r\nexport const notification = ({ title, message=\"\", type }: INotification) => {\r\n    return Store.addNotification({\r\n        title: title,\r\n        message: message,\r\n        type: type,\r\n        insert: \"bottom\",\r\n        container: \"bottom-right\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n            duration: 5000,\r\n            onScreen: true\r\n        }\r\n    });\r\n}","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport instance from \"constants/axios\";\r\nimport { notification } from \"utils/notification\";\r\nimport tronWeb from \"tronweb\";\r\n\r\ndeclare var window : any;\r\n\r\ninterface IAddNft {\r\n  address: string;\r\n}\r\n\r\nexport const AddNft = createAsyncThunk(\r\n  \"nftadd/AddNft\",\r\n  async ({ address }: IAddNft) => {\r\n    let nftContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        nftContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(address));\r\n      }\r\n    }\r\n    let nftName = await nftContract.name().call();\r\n    let nftSymbol = await nftContract.symbol().call();\r\n\r\n    await instance.post(`/api/waiting/create`, {\r\n      address: address,\r\n      name: nftName,\r\n      symbol: nftSymbol,\r\n    });\r\n\r\n    notification({ title: \"Successfully Sent!\", type: \"success\" });\r\n  }\r\n);\r\n\r\ninterface IApproveNft {\r\n  address: string;\r\n  name: string;\r\n  symbol: string;\r\n}\r\n\r\nexport const ApproveNft = createAsyncThunk(\r\n  \"nftapprove/ApproveNft\",\r\n  async ({ address, name, symbol }: IApproveNft) => {\r\n    await instance.post(`/api/approved/create`, {\r\n      address: address,\r\n      name: name,\r\n      symbol: symbol,\r\n    });\r\n    await instance.delete(`/api/waiting/delete/${address}`);\r\n\r\n    notification({ title: \"Successfully Approved!\", type: \"success\" });\r\n  }\r\n);\r\n\r\ninterface IDeleteWaiting {\r\n  address: string;\r\n}\r\n\r\nexport const DeleteWaiting = createAsyncThunk(\r\n  \"deletewaiting/DeleteWaiting\",\r\n  async ({ address }: IDeleteWaiting) => {\r\n    await instance.delete(`/api/waiting/delete/${address}`);\r\n\r\n    notification({ title: \"Successfully Deleted!\", type: \"success\" });\r\n  }\r\n);\r\n\r\ninterface IDeleteApproved {\r\n  address: string;\r\n}\r\n\r\nexport const DeleteApproved = createAsyncThunk(\r\n  \"DeleteApproved/DeleteApproved\",\r\n  async ({ address }: IDeleteApproved) => {\r\n    await instance.delete(`/api/approved/delete/${address}`);\r\n\r\n    notification({ title: \"Successfully Deleted!\", type: \"success\" });\r\n  }\r\n);\r\n","// all abis...\r\nimport { abi as IntercroneswapV1Router02ABI } from \"@intercroneswap/v2-periphery/build/IIswapV1Router02.json\";\r\n\r\nimport ERC20_ABI from \"../../constants/abis/erc20.json\";\r\n\r\nexport const abis = [...ERC20_ABI, ...IntercroneswapV1Router02ABI];\r\n","import createTronLinkProvider from '@intercroneswap/tronlink-provider';\r\nimport Web3 from 'web3';\r\nimport { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types';\r\nimport { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport { abis } from './tronlink-abis';\r\n\r\nexport class UserRejectedRequestError extends Error {\r\n  public constructor() {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    this.message = 'The user rejected the request.';\r\n  }\r\n}\r\n\r\nexport class InjectedTronConnector extends AbstractConnector {\r\n  public provider: any;\r\n\r\n  constructor(kwargs: AbstractConnectorArguments) {\r\n    super(kwargs);\r\n\r\n    const getFunctionSelector = (abi: any) => {\r\n      return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\r\n    };\r\n    const getParamTypes = (params: any) => {\r\n      return params.map(({ type, components }: { type: any; components: any }) => {\r\n        if (type === 'tuple[]') {\r\n          return (\r\n            '(' +\r\n            components\r\n              .map(({ type }: { type: any }) => {\r\n                return type;\r\n              })\r\n              .join(',') +\r\n            ')[]'\r\n          );\r\n        }\r\n        return type;\r\n      });\r\n    };\r\n    const signs: any = {};\r\n    const web3 = new Web3(\r\n      new Web3.providers.WebsocketProvider('wss://nile.infura.io/ws/v3/7f14d2eb070c41029d687df66b286a09'),\r\n    );\r\n    abis.map((fn: any) => {\r\n      try {\r\n        const sign = web3.eth.abi.encodeFunctionSignature({\r\n          name: fn.name,\r\n          type: fn.type,\r\n          inputs: fn.inputs,\r\n        });\r\n        signs[sign] = getFunctionSelector(fn);\r\n      } catch (err) {\r\n      }\r\n    });\r\n    // TODO(tron): should auto-use same network as one selected in tronlink!\r\n    this.provider = createTronLinkProvider({\r\n      network: process.env.REACT_APP_TRON_NETWORK,\r\n      tronApiUrl: process.env.REACT_APP_NETWORK_URL,\r\n      functionSignatures: abis,\r\n      signs,\r\n    });\r\n    /*\r\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this)\r\n    this.handleChainChanged = this.handleChainChanged.bind(this)\r\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\r\n    this.handleClose = this.handleClose.bind(this)\r\n    */\r\n  }\r\n\r\n  async requestProvider(args: any) {\r\n    const res = await this.provider.request(args);\r\n    return res;\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    const accounts = await this.requestProvider({ method: 'eth_accounts' });\r\n    const account = accounts[0];\r\n    return { provider: this.provider, account };\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.provider;\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    const chainId = await this.requestProvider({ method: 'eth_chainId' });\r\n    return chainId;\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    const accounts = await this.requestProvider({ method: 'eth_accounts' });\r\n    const account = accounts[0];\r\n    return account;\r\n  }\r\n\r\n  public deactivate() {\r\n    return true;\r\n  }\r\n\r\n  public async isAuthorized(): Promise<boolean> {\r\n    // TODO: check if tronlink unlocked?\r\n    return true;\r\n  }\r\n}\r\n","import createJavaTronProvider from '@intercroneswap/java-tron-provider';\r\n\r\nimport { InjectedTronConnector } from './injected-tron-connector';\r\n\r\nexport class NetworkConnector extends InjectedTronConnector {\r\n  constructor(kwargs: any) {\r\n    super(kwargs);\r\n    this.provider = createJavaTronProvider({\r\n      network: process.env.REACT_APP_TRON_NETWORK,\r\n      tronApiUrl: process.env.REACT_APP_NETWORK_URL,\r\n    });\r\n  }\r\n\r\n  async requestProvider(...args: any[]) {\r\n    const res = await this.provider.request(...args);\r\n    // TODO: wrap error with throw new NoEthereumProviderError()?\r\n    return res;\r\n  }\r\n\r\n  public async activate(): Promise<any> {\r\n    return { provider: this.provider };\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.provider;\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return null;\r\n  }\r\n}\r\n","import { Web3Provider } from '@ethersproject/providers';\r\nimport { NetworkConnector } from './NetworkConnector';\r\nimport { InjectedTronConnector } from './injected-tron-connector';\r\n\r\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\r\n\r\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '11111');\r\n\r\nif (typeof NETWORK_URL === 'undefined') {\r\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\r\n}\r\n\r\nexport const network = new NetworkConnector({\r\n  urls: { [NETWORK_CHAIN_ID]: NETWORK_URL },\r\n});\r\n\r\nlet networkLibrary: Web3Provider | undefined;\r\nexport function getNetworkLibrary(): Web3Provider {\r\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any));\r\n}\r\n\r\nexport const injected = new InjectedTronConnector({\r\n  supportedChainIds: [11111, 1],\r\n});\r\n","export const TOKEN_DECIMALS = 9;\r\n\r\nexport enum Networks {\r\n  // AVAX = 43114,\r\n  AVAX = 43113, // for test\r\n  GOERLI = 5,\r\n}\r\n\r\nexport const DEFAULD_NETWORK = Networks.GOERLI;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { TokenList } from \"@intercroneswap/token-lists\";\r\n\r\nexport type PopupContent =\r\n  | {\r\n      txn: {\r\n        hash: string;\r\n        success: boolean;\r\n        summary?: string;\r\n      };\r\n    }\r\n  | {\r\n      listUpdate: {\r\n        listUrl: string;\r\n        oldList: TokenList;\r\n        newList: TokenList;\r\n        auto: boolean;\r\n      };\r\n    };\r\n\r\nexport enum ApplicationModal {\r\n  WALLET,\r\n  SETTINGS,\r\n  SELF_CLAIM,\r\n  ADDRESS_CLAIM,\r\n  CLAIM_POPUP,\r\n  MENU,\r\n  LEFTMENU,\r\n  DELEGATE,\r\n  VOTE,\r\n}\r\n\r\nexport const updateBlockNumber = createAction<{\r\n  chainId: number;\r\n  blockNumber: number;\r\n}>(\"application/updateBlockNumber\");\r\nexport const setOpenModal = createAction<ApplicationModal | null>(\r\n  \"application/setOpenModal\"\r\n);\r\nexport const addPopup = createAction<{\r\n  key?: string;\r\n  removeAfterMs?: number | null;\r\n  content: PopupContent;\r\n}>(\"application/addPopup\");\r\nexport const removePopup = createAction<{ key: string }>(\r\n  \"application/removePopup\"\r\n);\r\n","import { Networks } from \"./blockchain\";\r\n\r\nexport const SHASTA_TESTNET = {\r\n  MEOW_ADDRESS: \"TWbC4NNqBpL3sx2ctLXtd1g6KfHsxtVRwH\", //\r\n  NFT_ADDRESS: \"TUvR3L8eT3QPDJ18hVUqELzpvVQrGL2gAM\",\r\n  MEOWTOKEN_ADDRESS: \"TDtFwTisg9hdsfmwEGcZcyCTExExsdazFj\",\r\n};\r\n\r\nexport const getAddresses = (networkID: number) => {\r\n  if (networkID === Networks.GOERLI) return SHASTA_TESTNET;\r\n\r\n  throw Error(\"Network don't support\");\r\n};\r\n","import { AbstractConnector } from \"@web3-react/abstract-connector\";\r\n\r\nimport { injected } from \"../connectors\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nexport interface WalletInfo {\r\n  connector?: AbstractConnector;\r\n  name: string;\r\n  iconName: string;\r\n  description: string;\r\n  href: string | null;\r\n  color: string;\r\n  primary?: true;\r\n  mobile?: true;\r\n  mobileOnly?: false;\r\n}\r\n\r\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\r\n  TRONLINK: {\r\n    connector: injected,\r\n    name: \"TronLink\",\r\n    iconName: \"tronlink.svg\",\r\n    description: \"Easy-to-use browser extension.\",\r\n    href: null,\r\n    color: \"#48489b\",\r\n    mobileOnly: false,\r\n  },\r\n};\r\n\r\nexport const NetworkContextName = \"NETWORK\";\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 50;\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;\r\n\r\nexport * from \"./blockchain\";\r\nexport * from \"./addresses\";","import { Web3Provider } from \"@ethersproject/providers\";\r\nimport { ChainId } from \"@intercroneswap/v2-sdk\";\r\nimport { useWeb3React as useWeb3ReactCore } from \"@web3-react/core\";\r\nimport { Web3ReactContextInterface } from \"@web3-react/core/dist/types\";\r\nimport { NetworkContextName } from \"../constants\";\r\n\r\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & {\r\n  chainId?: ChainId;\r\n} {\r\n  const context = useWeb3ReactCore<Web3Provider>();\r\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName);\r\n  return context.active ? context : contextNetwork;\r\n}","import { useCallback, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useActiveWeb3React } from \"../../hooks\";\r\nimport { AppDispatch, AppState } from \"../index\";\r\nimport {\r\n  addPopup,\r\n  ApplicationModal,\r\n  PopupContent,\r\n  removePopup,\r\n  setOpenModal,\r\n} from \"./actions\";\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const { chainId } = useActiveWeb3React();\r\n\r\n  return useSelector(\r\n    (state: AppState) => state.application.blockNumber[chainId ?? -1]\r\n  );\r\n}\r\n\r\nexport function useModalOpen(modal: ApplicationModal): boolean {\r\n  const openModal = useSelector(\r\n    (state: AppState) => state.application.openModal\r\n  );\r\n  return openModal === modal;\r\n}\r\n\r\nexport function useToggleModal(modal: ApplicationModal): () => void {\r\n  const open = useModalOpen(modal);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return useCallback(\r\n    () => dispatch(setOpenModal(open ? null : modal)),\r\n    [dispatch, modal, open]\r\n  );\r\n}\r\n\r\nexport function useOpenModal(modal: ApplicationModal): () => void {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return useCallback(() => dispatch(setOpenModal(modal)), [dispatch, modal]);\r\n}\r\n\r\nexport function useCloseModals(): () => void {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return useCallback(() => dispatch(setOpenModal(null)), [dispatch]);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  return useToggleModal(ApplicationModal.WALLET);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  return useToggleModal(ApplicationModal.SETTINGS);\r\n}\r\n\r\nexport function useShowClaimPopup(): boolean {\r\n  return useModalOpen(ApplicationModal.CLAIM_POPUP);\r\n}\r\n\r\nexport function useToggleShowClaimPopup(): () => void {\r\n  return useToggleModal(ApplicationModal.CLAIM_POPUP);\r\n}\r\n\r\nexport function useToggleSelfClaimModal(): () => void {\r\n  return useToggleModal(ApplicationModal.SELF_CLAIM);\r\n}\r\n\r\nexport function useToggleDelegateModal(): () => void {\r\n  return useToggleModal(ApplicationModal.DELEGATE);\r\n}\r\n\r\nexport function useToggleVoteModal(): () => void {\r\n  return useToggleModal(ApplicationModal.VOTE);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({ content, key }));\r\n    },\r\n    [dispatch]\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({ key }));\r\n    },\r\n    [dispatch]\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState[\"application\"][\"popupList\"] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface Call {\r\n  address: string;\r\n  callData: string;\r\n}\r\n\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\r\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/;\r\nexport function toCallKey(call: Call): string {\r\n  if (!ADDRESS_REGEX.test(call.address)) {\r\n    throw new Error(`Invalid address: ${call.address}`);\r\n  }\r\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\r\n    throw new Error(`Invalid hex: ${call.callData}`);\r\n  }\r\n  return `${call.address}-${call.callData}`;\r\n}\r\n\r\nexport function parseCallKey(callKey: string): Call {\r\n  const pcs = callKey.split(\"-\");\r\n  if (pcs.length !== 2) {\r\n    throw new Error(`Invalid call key: ${callKey}`);\r\n  }\r\n  return {\r\n    address: pcs[0],\r\n    callData: pcs[1],\r\n  };\r\n}\r\n\r\nexport interface ListenerOptions {\r\n  // how often this data should be fetched, by default 1\r\n  readonly blocksPerFetch?: number;\r\n}\r\n\r\nexport const addMulticallListeners = createAction<{\r\n  chainId: number;\r\n  calls: Call[];\r\n  options?: ListenerOptions;\r\n}>(\"multicall/addMulticallListeners\");\r\nexport const removeMulticallListeners = createAction<{\r\n  chainId: number;\r\n  calls: Call[];\r\n  options?: ListenerOptions;\r\n}>(\"multicall/removeMulticallListeners\");\r\nexport const fetchingMulticallResults = createAction<{\r\n  chainId: number;\r\n  calls: Call[];\r\n  fetchingBlockNumber: number;\r\n}>(\"multicall/fetchingMulticallResults\");\r\nexport const errorFetchingMulticallResults = createAction<{\r\n  chainId: number;\r\n  calls: Call[];\r\n  fetchingBlockNumber: number;\r\n}>(\"multicall/errorFetchingMulticallResults\");\r\nexport const updateMulticallResults = createAction<{\r\n  chainId: number;\r\n  blockNumber: number;\r\n  results: {\r\n    [callKey: string]: string | null;\r\n  };\r\n}>(\"multicall/updateMulticallResults\");\r\n","import { Interface, FunctionFragment } from \"@ethersproject/abi\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useActiveWeb3React } from \"../../hooks\";\r\nimport { useBlockNumber } from \"../application/hooks\";\r\nimport { AppDispatch, AppState } from \"../index\";\r\nimport {\r\n  addMulticallListeners,\r\n  Call,\r\n  removeMulticallListeners,\r\n  parseCallKey,\r\n  toCallKey,\r\n  ListenerOptions,\r\n} from \"./actions\";\r\n\r\nexport interface Result extends ReadonlyArray<any> {\r\n  readonly [key: string]: any;\r\n}\r\n\r\ntype MethodArg = string | number | BigNumber;\r\ntype MethodArgs = Array<MethodArg | MethodArg[]>;\r\n\r\ntype OptionalMethodInputs =\r\n  | Array<MethodArg | MethodArg[] | undefined>\r\n  | undefined;\r\n\r\nfunction isMethodArg(x: unknown): x is MethodArg {\r\n  return [\"string\", \"number\"].indexOf(typeof x) !== -1;\r\n}\r\n\r\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\r\n  return (\r\n    x === undefined ||\r\n    (Array.isArray(x) &&\r\n      x.every(\r\n        (xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))\r\n      ))\r\n  );\r\n}\r\n\r\ninterface CallResult {\r\n  readonly valid: boolean;\r\n  readonly data: string | undefined;\r\n  readonly blockNumber: number | undefined;\r\n}\r\n\r\nconst INVALID_RESULT: CallResult = {\r\n  valid: false,\r\n  blockNumber: undefined,\r\n  data: undefined,\r\n};\r\n\r\n// use this options object\r\nexport const NEVER_RELOAD: ListenerOptions = {\r\n  blocksPerFetch: Infinity,\r\n};\r\n\r\n// the lowest level call for subscribing to contract data\r\nfunction useCallsData(\r\n  calls: (Call | undefined)[],\r\n  options?: ListenerOptions\r\n): CallResult[] {\r\n  const { chainId } = useActiveWeb3React();\r\n  const callResults = useSelector<\r\n    AppState,\r\n    AppState[\"multicall\"][\"callResults\"]\r\n  >((state) => state.multicall.callResults);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const serializedCallKeys: string = useMemo(\r\n    () =>\r\n      JSON.stringify(\r\n        calls\r\n          ?.filter((c): c is Call => Boolean(c))\r\n          ?.map(toCallKey)\r\n          ?.sort() ?? []\r\n      ),\r\n    [calls]\r\n  );\r\n\r\n  // update listeners when there is an actual change that persists for at least 100ms\r\n  useEffect(() => {\r\n    const callKeys: string[] = JSON.parse(serializedCallKeys);\r\n    if (!chainId || callKeys.length === 0) return undefined;\r\n    const calls = callKeys.map((key) => parseCallKey(key));\r\n    dispatch(\r\n      addMulticallListeners({\r\n        chainId,\r\n        calls,\r\n        options,\r\n      })\r\n    );\r\n\r\n    return () => {\r\n      dispatch(\r\n        removeMulticallListeners({\r\n          chainId,\r\n          calls,\r\n          options,\r\n        })\r\n      );\r\n    };\r\n  }, [chainId, dispatch, options, serializedCallKeys]);\r\n\r\n  return useMemo(\r\n    () =>\r\n      calls.map<CallResult>((call) => {\r\n        if (!chainId || !call) return INVALID_RESULT;\r\n\r\n        const result = callResults[chainId]?.[toCallKey(call)];\r\n        let data;\r\n        if (result?.data && result?.data !== \"0x\") {\r\n          data = result.data;\r\n        }\r\n\r\n        return { valid: true, data, blockNumber: result?.blockNumber };\r\n      }),\r\n    [callResults, calls, chainId]\r\n  );\r\n}\r\n\r\ninterface CallState {\r\n  readonly valid: boolean;\r\n  // the result, or undefined if loading or errored/no data\r\n  readonly result: Result | undefined;\r\n  // true if the result has never been fetched\r\n  readonly loading: boolean;\r\n  // true if the result is not for the latest block\r\n  readonly syncing: boolean;\r\n  // true if the call was made and is synced, but the return data is invalid\r\n  readonly error: boolean;\r\n}\r\n\r\nconst INVALID_CALL_STATE: CallState = {\r\n  valid: false,\r\n  result: undefined,\r\n  loading: false,\r\n  syncing: false,\r\n  error: false,\r\n};\r\nconst LOADING_CALL_STATE: CallState = {\r\n  valid: true,\r\n  result: undefined,\r\n  loading: true,\r\n  syncing: true,\r\n  error: false,\r\n};\r\n\r\nfunction toCallState(\r\n  callResult: CallResult | undefined,\r\n  contractInterface: Interface | undefined,\r\n  fragment: FunctionFragment | undefined,\r\n  latestBlockNumber: number | undefined\r\n): CallState {\r\n  if (!callResult) return INVALID_CALL_STATE;\r\n  const { valid, data, blockNumber } = callResult;\r\n  if (!valid) return INVALID_CALL_STATE;\r\n  if (valid && !blockNumber) return LOADING_CALL_STATE;\r\n  if (!contractInterface || !fragment || !latestBlockNumber)\r\n    return LOADING_CALL_STATE;\r\n  const success = data && data.length > 2;\r\n  const syncing = (blockNumber ?? 0) < latestBlockNumber;\r\n  let result: Result | undefined = undefined;\r\n  if (success && data) {\r\n    try {\r\n      result = contractInterface.decodeFunctionResult(fragment, data);\r\n    } catch (error) {\r\n      console.debug(\"Result data parsing failed\", fragment, data);\r\n      return {\r\n        valid: true,\r\n        loading: false,\r\n        error: true,\r\n        syncing,\r\n        result,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    valid: true,\r\n    loading: false,\r\n    syncing,\r\n    result: result,\r\n    error: !success,\r\n  };\r\n}\r\n\r\nexport function useSingleContractMultipleData(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  callInputs: OptionalMethodInputs[],\r\n  options?: ListenerOptions\r\n): CallState[] {\r\n  const fragment = useMemo(\r\n    () => contract?.interface?.getFunction(methodName),\r\n    [contract, methodName]\r\n  );\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      contract && fragment && callInputs && callInputs.length > 0\r\n        ? callInputs.map<Call>((inputs) => {\r\n            return {\r\n              address: contract.address,\r\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n            };\r\n          })\r\n        : [],\r\n    [callInputs, contract, fragment]\r\n  );\r\n\r\n  const results = useCallsData(calls, options);\r\n  const latestBlockNumber = useBlockNumber();\r\n  // console.log(fragment, calls, results, latestBlockNumber, \"multicall\")\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) =>\r\n      toCallState(result, contract?.interface, fragment, latestBlockNumber)\r\n    );\r\n  }, [fragment, contract, results, latestBlockNumber]);\r\n}\r\n\r\nexport function useMultipleContractSingleData(\r\n  addresses: (string | undefined)[],\r\n  contractInterface: Interface,\r\n  methodName: string,\r\n  callInputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions\r\n): CallState[] {\r\n  const fragment = useMemo(\r\n    () => contractInterface.getFunction(methodName),\r\n    [contractInterface, methodName]\r\n  );\r\n  const callData: string | undefined = useMemo(\r\n    () =>\r\n      fragment && isValidMethodArgs(callInputs)\r\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\r\n        : undefined,\r\n    [callInputs, contractInterface, fragment]\r\n  );\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      fragment && addresses && addresses.length > 0 && callData\r\n        ? addresses.map<Call | undefined>((address) => {\r\n            return address && callData\r\n              ? {\r\n                  address,\r\n                  callData,\r\n                }\r\n              : undefined;\r\n          })\r\n        : [],\r\n    [addresses, callData, fragment]\r\n  );\r\n\r\n  const results = useCallsData(calls, options);\r\n\r\n  const latestBlockNumber = useBlockNumber();\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) =>\r\n      toCallState(result, contractInterface, fragment, latestBlockNumber)\r\n    );\r\n  }, [fragment, results, contractInterface, latestBlockNumber]);\r\n}\r\n\r\nexport function useSingleCallResult(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  inputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions\r\n): CallState {\r\n  const fragment = useMemo(\r\n    () => contract?.interface?.getFunction(methodName),\r\n    [contract, methodName]\r\n  );\r\n\r\n  const calls = useMemo<Call[]>(() => {\r\n    return contract && fragment && isValidMethodArgs(inputs)\r\n      ? [\r\n          {\r\n            address: contract.address,\r\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n          },\r\n        ]\r\n      : [];\r\n  }, [contract, fragment, inputs]);\r\n\r\n  const result = useCallsData(calls, options)[0];\r\n  const latestBlockNumber = useBlockNumber();\r\n\r\n  return useMemo(() => {\r\n    return toCallState(\r\n      result,\r\n      contract?.interface,\r\n      fragment,\r\n      latestBlockNumber\r\n    );\r\n  }, [result, contract, fragment, latestBlockNumber]);\r\n}\r\n","import { Contract } from \"@ethersproject/contracts\";\r\nimport { AddressZero } from \"@ethersproject/constants\";\r\nimport { JsonRpcSigner, Web3Provider } from \"@ethersproject/providers\";\r\nimport { ChainId } from \"@intercroneswap/v2-sdk\";\r\nimport { ethAddress, remove0xPrefix } from \"@intercroneswap/java-tron-provider\";\r\nimport { getAddress } from \"ethers/lib/utils\";\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\r\n  11111: \"\",\r\n  1: \"shasta.\",\r\n  201910292: \"nile.\",\r\n};\r\n\r\nexport function getEtherscanLink(\r\n  chainId: ChainId,\r\n  data: string,\r\n  type: \"transaction\" | \"token\" | \"address\" | \"block\"\r\n): string {\r\n  const prefix = `https://${\r\n    ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[11111]\r\n  }tronscan.org`;\r\n\r\n  switch (type) {\r\n    case \"transaction\": {\r\n      return `${prefix}/#/transaction/${remove0xPrefix(data)}`;\r\n    }\r\n    case \"token\": {\r\n      return `${prefix}/#/token20/${ethAddress.toTron(data)}`;\r\n    }\r\n    case \"address\":\r\n    default: {\r\n      return `${prefix}/#/address/${ethAddress.toTron(data)}`;\r\n    }\r\n  }\r\n}\r\n\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  const parsed = isAddress(address);\r\n  if (!parsed) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n  const tronAddress = ethAddress.toTron(parsed);\r\n  return `${tronAddress.substring(0, chars)}...${tronAddress.substr(-chars)}`;\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(\r\n  library: Web3Provider,\r\n  account: string\r\n): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked();\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(\r\n  library: Web3Provider,\r\n  account?: string\r\n): any {\r\n  // return account ? library?.trx.sign : library?.trx\r\n  return account ? getSigner(library, account) : library;\r\n}\r\n\r\n// account is optional\r\nexport function getContract(\r\n  address: string,\r\n  ABI: any,\r\n  library: Web3Provider,\r\n  account?: string\r\n): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n  return new Contract(\r\n    address,\r\n    ABI,\r\n    getProviderOrSigner(library, account) as any\r\n  );\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\r\n}\r\n","import { ChainId } from \"@intercroneswap/v2-sdk\";\r\nimport MULTICALL_ABI from \"./abi.json\";\r\n\r\nconst MULTICALL_NETWORKS: { [chainId in ChainId]: string } = {\r\n  // TODO: TRON: mainnet multicall contract address\r\n  [ChainId.MAINNET]: \"0xD3573a8728A49512A1485D63180Ed5b095e11D5C\",\r\n  [ChainId.NILE]: \"0x04A6730FC23a5f2C3d94F7C7aCb4F92Eab8282c2\",\r\n  [ChainId.SHASTA]: \"0x9037ae53c89147e009d26f7547143544be00f984\",\r\n};\r\n\r\nexport { MULTICALL_ABI, MULTICALL_NETWORKS };\r\n","import { Contract } from \"@ethersproject/contracts\";\r\nimport { ChainId } from \"@intercroneswap/v2-sdk\";\r\nimport { useMemo } from \"react\";\r\nimport ENS_PUBLIC_RESOLVER_ABI from \"../constants/abis/ens-public-resolver.json\";\r\nimport ENS_ABI from \"../constants/abis/ens-registrar.json\";\r\nimport { MULTICALL_ABI, MULTICALL_NETWORKS } from \"../constants/multicall\";\r\nimport { getContract } from \"../utils\";\r\nimport { useActiveWeb3React } from \"./index\";\r\n\r\n// returns null on errors\r\nfunction useContract(\r\n  address: string | undefined,\r\n  ABI: any,\r\n  withSignerIfPossible = true\r\n): Contract | null {\r\n  const { library, account } = useActiveWeb3React();\r\n\r\n  return useMemo(() => {\r\n    if (!address || !ABI || !library) return null;\r\n    try {\r\n      return getContract(\r\n        address,\r\n        ABI,\r\n        library,\r\n        withSignerIfPossible && account ? account : undefined\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Failed to get contract\", error);\r\n      return null;\r\n    }\r\n  }, [address, ABI, library, withSignerIfPossible, account]);\r\n}\r\n\r\nexport function useENSRegistrarContract(\r\n  withSignerIfPossible?: boolean\r\n): Contract | null {\r\n  const { chainId } = useActiveWeb3React();\r\n  let address: string | undefined;\r\n  if (chainId) {\r\n    switch (chainId) {\r\n      // TODO(tron): shasta TNS ?\r\n      case ChainId.MAINNET:\r\n        address = \"0x99fb68F0672E3E16AbB071342eF03355dfcb1797\";\r\n        break;\r\n      // TODO\r\n      case ChainId.NILE:\r\n        address = \"0xD2577ec90C6Fb23EC208B27609867E30D69bDc89\";\r\n        break;\r\n    }\r\n  }\r\n  return useContract(address, ENS_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useENSResolverContract(\r\n  address: string | undefined,\r\n  withSignerIfPossible?: boolean\r\n): Contract | null {\r\n  return useContract(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useMulticallContract(): Contract | null {\r\n  const { chainId } = useActiveWeb3React();\r\n  return useContract(\r\n    chainId && MULTICALL_NETWORKS[chainId],\r\n    MULTICALL_ABI,\r\n    false\r\n  );\r\n}\r\n","import { namehash } from 'ethers/lib/utils';\r\nimport { useMemo } from 'react';\r\nimport { useSingleCallResult } from '../state/multicall/hooks';\r\nimport { isAddress } from '../utils';\r\nimport isZero from '../utils/isZero';\r\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract';\r\nimport useDebounce from './useDebounce';\r\n\r\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\r\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\r\n  const debouncedAddress = useDebounce(address, 200);\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\r\n    try {\r\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined];\r\n    } catch (error) {\r\n      return [undefined];\r\n    }\r\n  }, [debouncedAddress]);\r\n  const registrarContract = useENSRegistrarContract(false);\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\r\n  const resolverAddressResult = resolverAddress.result?.[0];\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false,\r\n  );\r\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\r\n\r\n  const changed = debouncedAddress !== address;\r\n  return {\r\n    ENSName: changed ? null : name.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || name.loading,\r\n  };\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","/**\r\n * Returns true if the string value is zero in hex\r\n * @param hexNumberString\r\n */\r\nexport default function isZero(hexNumberString: string) {\r\n  return /^0x0*$/.test(hexNumberString);\r\n}\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { ChainId } from \"@intercroneswap/v2-sdk\";\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  claim?: { recipient: string };\r\n  summary?: string;\r\n}>(\"transactions/addTransaction\");\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>(\r\n  \"transactions/clearAllTransactions\"\r\n);\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>(\"transactions/finalizeTransaction\");\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>(\"transactions/checkedTransaction\");\r\n","import { TransactionResponse } from \"@ethersproject/providers\";\r\nimport { useCallback, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { useActiveWeb3React } from \"../../hooks\";\r\nimport { AppDispatch, AppState } from \"../index\";\r\nimport { addTransaction } from \"./actions\";\r\nimport { TransactionDetails } from \"./reducer\";\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: {\r\n    summary?: string;\r\n    approval?: { tokenAddress: string; spender: string };\r\n    claim?: { recipient: string };\r\n  }\r\n) => void {\r\n  const { chainId, account } = useActiveWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      {\r\n        summary,\r\n        approval,\r\n        claim,\r\n      }: {\r\n        summary?: string;\r\n        claim?: { recipient: string };\r\n        approval?: { tokenAddress: string; spender: string };\r\n      } = {}\r\n    ) => {\r\n      if (!account) return;\r\n      if (!chainId) return;\r\n\r\n      const { hash } = response;\r\n      if (!hash) {\r\n        throw Error(\"No transaction hash found.\");\r\n      }\r\n      dispatch(\r\n        addTransaction({\r\n          hash,\r\n          from: account,\r\n          chainId,\r\n          approval,\r\n          summary,\r\n          claim,\r\n        })\r\n      );\r\n    },\r\n    [dispatch, chainId, account]\r\n  );\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useActiveWeb3React();\r\n\r\n  const state = useSelector<AppState, AppState[\"transactions\"]>(\r\n    (state) => state.transactions\r\n  );\r\n\r\n  return chainId ? state[chainId] ?? {} : {};\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions();\r\n\r\n  if (!transactionHash || !transactions[transactionHash]) return false;\r\n\r\n  return !transactions[transactionHash].receipt;\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000;\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(\r\n  tokenAddress: string | undefined,\r\n  spender: string | undefined\r\n): boolean {\r\n  const allTransactions = useAllTransactions();\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === \"string\" &&\r\n      typeof spender === \"string\" &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash];\r\n        if (!tx) return false;\r\n        if (tx.receipt) {\r\n          return false;\r\n        } else {\r\n          const approval = tx.approval;\r\n          if (!approval) return false;\r\n          return (\r\n            approval.spender === spender &&\r\n            approval.tokenAddress === tokenAddress &&\r\n            isTransactionRecent(tx)\r\n          );\r\n        }\r\n      }),\r\n    [allTransactions, spender, tokenAddress]\r\n  );\r\n}\r\n\r\n// watch for submissions to claim\r\n// return null if not done loading, return undefined if not found\r\nexport function useUserHasSubmittedClaim(account?: string): {\r\n  claimSubmitted: boolean;\r\n  claimTxn: TransactionDetails | undefined;\r\n} {\r\n  const allTransactions = useAllTransactions();\r\n\r\n  // get the txn if it has been submitted\r\n  const claimTxn = useMemo(() => {\r\n    const txnIndex = Object.keys(allTransactions).find((hash) => {\r\n      const tx = allTransactions[hash];\r\n      return tx.claim && tx.claim.recipient === account;\r\n    });\r\n    return txnIndex && allTransactions[txnIndex]\r\n      ? allTransactions[txnIndex]\r\n      : undefined;\r\n  }, [account, allTransactions]);\r\n\r\n  return { claimSubmitted: Boolean(claimTxn), claimTxn };\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { useActiveWeb3React } from \"hooks\";\r\nimport Jazzicon from \"jazzicon\";\r\n\r\nexport default function Identicon() {\r\n  const ref = useRef<HTMLDivElement>();\r\n\r\n  const { account } = useActiveWeb3React();\r\n\r\n  useEffect(() => {\r\n    if (account && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)));\r\n    }\r\n  }, [account]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: \"16px\",\r\n        width: \"16px\",\r\n        borderRadius: \"50%\",\r\n      }}\r\n      ref={ref as any}\r\n    />\r\n  );\r\n}\r\n","import \"./loader.scss\";\r\n\r\nexport default function Loader({ stroke }: { stroke?: string }) {\r\n  return (\r\n    <svg\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className=\"styled-svg\"\r\n    >\r\n      <path\r\n        d=\"M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 9.27455 20.9097 6.80375 19.1414 5\"\r\n        stroke={stroke ? stroke : \"#fff\"}\r\n        strokeWidth=\"2.5\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { CheckCircle, Copy } from \"react-feather\";\r\nimport useCopyClipboard from \"hooks/useCopyClipboard\";\r\n\r\nexport default function CopyHelper(props: {\r\n  toCopy: string;\r\n  children?: React.ReactNode;\r\n}) {\r\n  const [isCopied, setCopied] = useCopyClipboard();\r\n\r\n  return (\r\n    <Box className=\"copy-icon\" onClick={() => setCopied(props.toCopy)}>\r\n      {isCopied ? (\r\n        <>\r\n          <CheckCircle size={\"16\"} />\r\n          <Typography component=\"span\" ml=\"4px\" fontSize=\"14px\">\r\n            Copied\r\n          </Typography>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Copy size={\"16\"} />\r\n          {props.children}\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import copy from 'copy-to-clipboard';\r\nimport { useCallback, useEffect, useState } from 'react';\r\n\r\nexport default function useCopyClipboard(timeout = 500): [boolean, (toCopy: string) => void] {\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  const staticCopy = useCallback((text: any) => {\r\n    const didCopy = copy(text);\r\n    setIsCopied(didCopy);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isCopied) {\r\n      const hide = setTimeout(() => {\r\n        setIsCopied(false);\r\n      }, timeout);\r\n\r\n      return () => {\r\n        clearTimeout(hide);\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [isCopied, setIsCopied, timeout]);\r\n\r\n  return [isCopied, staticCopy];\r\n}\r\n","import { CheckCircle, Triangle } from \"react-feather\";\r\nimport { Typography, Box, Link } from \"@mui/material\";\r\nimport Loader from \"components/Loader\";\r\nimport { useActiveWeb3React } from \"hooks\";\r\nimport { getEtherscanLink } from \"utils\";\r\nimport { useAllTransactions } from \"state/transactions/hooks\";\r\n\r\nexport default function Transaction({ hash }: { hash: string }) {\r\n  const { chainId } = useActiveWeb3React();\r\n  const allTransactions = useAllTransactions();\r\n\r\n  const tx = allTransactions?.[hash];\r\n  const summary = tx?.summary;\r\n  const pending = !tx?.receipt;\r\n  const success =\r\n    !pending &&\r\n    tx &&\r\n    (tx.receipt?.status === 1 || typeof tx.receipt?.status === \"undefined\");\r\n\r\n  if (!chainId) return null;\r\n\r\n  return (\r\n    <div>\r\n      <Link\r\n        href={getEtherscanLink(chainId, hash, \"transaction\")}\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          textDecoration: \"none\",\r\n          p: \"4px 0\",\r\n          \"&:hover\": {\r\n            textDecoration: \"underline\",\r\n          },\r\n        }}\r\n      >\r\n        <Typography color=\"primary\" fontSize=\"14px\">\r\n          {summary ?? hash} ↗\r\n        </Typography>\r\n        <Box>\r\n          {pending ? (\r\n            <Loader stroke=\"#6164ff\" />\r\n          ) : success ? (\r\n            <CheckCircle size=\"16\" color=\"#2e7d32\" />\r\n          ) : (\r\n            <Triangle size=\"16\" color=\"#d32f2f\" />\r\n          )}\r\n        </Box>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ExternalLink as LinkIcon } from \"react-feather\";\r\nimport { Box, Typography, Button, Link, IconButton } from \"@mui/material\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { ethAddress } from \"@intercroneswap/java-tron-provider\";\r\nimport Identicon from \"components/Identicon\";\r\nimport Copy from \"./Copy\";\r\nimport Transaction from \"./Transaction\";\r\nimport { SUPPORTED_WALLETS } from \"../../constants\";\r\nimport { injected } from \"connectors\";\r\nimport { useActiveWeb3React } from \"hooks\";\r\nimport { AppDispatch } from \"state\";\r\nimport { clearAllTransactions } from \"state/transactions/actions\";\r\nimport { shortenAddress, getEtherscanLink } from \"utils\";\r\n\r\nfunction renderTransactions(transactions: string[]) {\r\n  return (\r\n    <Box>\r\n      {transactions.map((hash, i) => {\r\n        return <Transaction key={i} hash={hash} />;\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n\r\ninterface AccountDetailsProps {\r\n  toggleWalletModal: () => void;\r\n  pendingTransactions: string[];\r\n  confirmedTransactions: string[];\r\n  ENSName?: string;\r\n  openOptions: () => void;\r\n}\r\n\r\nexport default function AccountDetails({\r\n  toggleWalletModal,\r\n  pendingTransactions,\r\n  confirmedTransactions,\r\n  ENSName,\r\n  openOptions,\r\n}: AccountDetailsProps) {\r\n  const { chainId, account, connector } = useActiveWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  function formatConnectorName() {\r\n    const name = Object.keys(SUPPORTED_WALLETS).map(\r\n      (k) => SUPPORTED_WALLETS[k].name\r\n    )[0];\r\n    return (\r\n      <Typography color=\"#888d9b\" fontSize=\"14px\">\r\n        Connected with {name}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  function getStatusIcon() {\r\n    if (connector === injected) {\r\n      return (\r\n        <Box mr=\"8px\">\r\n          <Identicon />\r\n        </Box>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const clearAllTransactionsCallback = useCallback(() => {\r\n    if (chainId) dispatch(clearAllTransactions({ chainId }));\r\n  }, [dispatch, chainId]);\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        <IconButton className=\"close-icon\" onClick={toggleWalletModal}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n        <Typography p=\"16px\">Account</Typography>\r\n        <Box p=\"0 16px 24px 16px\">\r\n          <Box className=\"info-card\" p=\"16px\">\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              {formatConnectorName()}\r\n              <Button\r\n                variant=\"outlined\"\r\n                sx={{ fontSize: \"12px\", lineHeight: \"1.5\", p: \"4px 6px\" }}\r\n                onClick={() => {\r\n                  openOptions();\r\n                }}\r\n              >\r\n                Change\r\n              </Button>\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {ENSName ? (\r\n                  <>\r\n                    {getStatusIcon()}\r\n                    <Typography fontSize=\"20px\"> {ENSName}</Typography>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {getStatusIcon()}\r\n                    <Typography fontSize=\"20px\">\r\n                      {\" \"}\r\n                      {account && shortenAddress(account)}\r\n                    </Typography>\r\n                  </>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {account && (\r\n                  <Copy toCopy={ethAddress.toTron(account)}>\r\n                    <Typography component=\"span\" ml=\"4px\" fontSize=\"14px\">\r\n                      Copy Address\r\n                    </Typography>\r\n                  </Copy>\r\n                )}\r\n                {chainId && account && (\r\n                  <Link\r\n                    className=\"address-link\"\r\n                    href={getEtherscanLink(\r\n                      chainId,\r\n                      ENSName ? ENSName : account,\r\n                      \"address\"\r\n                    )}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                  >\r\n                    <LinkIcon size={16} />\r\n                    <Typography component=\"span\" ml=\"4px\" fontSize=\"14px\">\r\n                      View on Tronscan\r\n                    </Typography>\r\n                  </Link>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      {!!pendingTransactions.length || !!confirmedTransactions.length ? (\r\n        <Box p=\"16px 24px\">\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n            mb=\"16px\"\r\n          >\r\n            <Typography>Recent Transactions</Typography>\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"text\"\r\n              onClick={clearAllTransactionsCallback}\r\n              sx={{ textTransform: \"lowercase\" }}\r\n            >\r\n              (clear all)\r\n            </Button>\r\n          </Box>\r\n          {renderTransactions(pendingTransactions)}\r\n          {renderTransactions(confirmedTransactions)}\r\n        </Box>\r\n      ) : (\r\n        <Typography p=\"16px 24px\">\r\n          Your transactions will appear here...\r\n        </Typography>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\n\r\nexport default function Option({\r\n  clickable = true,\r\n  onClick = null,\r\n  color,\r\n  header,\r\n  subheader = null,\r\n  icon,\r\n  active = false,\r\n  id,\r\n}: {\r\n  clickable?: boolean;\r\n  onClick?: null | (() => void);\r\n  color: string;\r\n  header: React.ReactNode;\r\n  subheader: React.ReactNode | null;\r\n  icon: string;\r\n  active?: boolean;\r\n  id: string;\r\n}) {\r\n  const content = (\r\n    <Box\r\n      className=\"option-card-clickable\"\r\n      onClick={onClick ? onClick : () => {}}\r\n      sx={{\r\n        backgroundColor: active ? \"#EDEEF2\" : \"#ffffff\",\r\n        borderColor: active ? \"transparent\" : \"#EDEEF2\",\r\n        \"&:hover\": {\r\n          cursor: clickable ? \"pointer\" : \"\",\r\n          border: clickable ? `1px solid #6164ff` : ``,\r\n        },\r\n      }}\r\n    >\r\n      <Box>\r\n        <Box\r\n          sx={{\r\n            color,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          {!active && <Box className=\"green-circle\" />}\r\n          {header}\r\n        </Box>\r\n        {subheader && (\r\n          <Typography fontSize=\"12px\" mt=\"10px\">\r\n            {subheader}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n      <Box\r\n        component=\"img\"\r\n        src={icon}\r\n        alt={\"Icon\"}\r\n        sx={{ width: \"24px\", height: \"24px\" }}\r\n      />\r\n    </Box>\r\n  );\r\n\r\n  return content;\r\n}\r\n","import { AbstractConnector } from \"@web3-react/abstract-connector\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport Loader from \"components/Loader\";\r\nimport Option from \"./Option\";\r\nimport { SUPPORTED_WALLETS } from \"../../constants\";\r\n\r\nexport default function PendingView({\r\n  connector,\r\n  error = false,\r\n  setPendingError,\r\n  tryActivation,\r\n}: {\r\n  connector?: AbstractConnector;\r\n  error?: boolean;\r\n  setPendingError: (error: boolean) => void;\r\n  tryActivation: (connector: AbstractConnector) => void;\r\n}) {\r\n  return (\r\n    <Box>\r\n      <Box\r\n        mb=\"20px\"\r\n        sx={{\r\n          borderRadius: \"12px\",\r\n          border: `1px solid ${error ? \"#FF6871\" : \"#C3C5CB\"}`,\r\n        }}\r\n      >\r\n        <Box sx={{ display: \"flex\", alignItems: \"center\" }} p=\"16px\">\r\n          {error ? (\r\n            <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <Typography color=\"#FF6871\">Error connecting.</Typography>\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"contained\"\r\n                sx={{\r\n                  backgroundColor: \"#ced0d9\",\r\n                  color: \"#000000\",\r\n                  lineHeight: \"1.5\",\r\n                  ml: \"8px\",\r\n                  \"&:hover\": {\r\n                    backgroundColor: \"#a8abb3\",\r\n                  },\r\n                }}\r\n                onClick={() => {\r\n                  setPendingError(false);\r\n                  connector && tryActivation(connector);\r\n                }}\r\n              >\r\n                Try Again\r\n              </Button>\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              <Loader stroke=\"#000\" />\r\n              <Typography ml=\"8px\">Initializing...</Typography>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      {Object.keys(SUPPORTED_WALLETS).map((key) => {\r\n        const option = SUPPORTED_WALLETS[key];\r\n        if (option.connector === connector) {\r\n          return (\r\n            <Option\r\n              id={`connect-${key}`}\r\n              key={key}\r\n              clickable={false}\r\n              color={option.color}\r\n              header={option.name}\r\n              subheader={option.description}\r\n              icon={require(\"../../assets/images/\" + option.iconName).default}\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// modified from https://usehooks.com/usePrevious/\r\nexport default function usePrevious<T>(value: T) {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = useRef<T>();\r\n\r\n  // Store current value in ref\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); // Only re-run if value changes\r\n\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current;\r\n}\r\n","import { AbstractConnector } from \"@web3-react/abstract-connector\";\r\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Dialog, Typography, Box, IconButton } from \"@mui/material\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport ReactGA from \"react-ga\";\r\nimport AccountDetails from \"components/AccountDetails\";\r\nimport Option from \"./Option\";\r\nimport PendingView from \"./PendingView\";\r\nimport { SUPPORTED_WALLETS } from \"../../constants\";\r\nimport usePrevious from \"hooks/usePrevious\";\r\nimport { ApplicationModal } from \"state/application/actions\";\r\nimport { useModalOpen, useWalletModalToggle } from \"state/application/hooks\";\r\n\r\nconst WALLET_VIEWS = {\r\n  OPTIONS: \"options\",\r\n  OPTIONS_SECONDARY: \"options_secondary\",\r\n  ACCOUNT: \"account\",\r\n  PENDING: \"pending\",\r\n};\r\n\r\nexport default function WalletModal({\r\n  pendingTransactions,\r\n  confirmedTransactions,\r\n  ENSName,\r\n}: {\r\n  pendingTransactions: string[]; // hashes of pending\r\n  confirmedTransactions: string[]; // hashes of confirmed\r\n  ENSName?: string;\r\n}) {\r\n  // important that these are destructed from the account-specific web3-react context\r\n  const { active, account, connector, activate, error } = useWeb3React();\r\n\r\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\r\n\r\n  const [pendingWallet, setPendingWallet] = useState<\r\n    AbstractConnector | undefined\r\n  >();\r\n\r\n  const [pendingError, setPendingError] = useState<boolean>();\r\n\r\n  const walletModalOpen = useModalOpen(ApplicationModal.WALLET);\r\n  const toggleWalletModal = useWalletModalToggle();\r\n\r\n  const previousAccount = usePrevious(account);\r\n\r\n  // close on connection, when logged out before\r\n  useEffect(() => {\r\n    if (account && !previousAccount && walletModalOpen) {\r\n      toggleWalletModal();\r\n    }\r\n  }, [account, previousAccount, toggleWalletModal, walletModalOpen]);\r\n\r\n  // always reset to account view\r\n  useEffect(() => {\r\n    if (walletModalOpen) {\r\n      setPendingError(false);\r\n      setWalletView(WALLET_VIEWS.ACCOUNT);\r\n    }\r\n  }, [walletModalOpen]);\r\n\r\n  // close modal when a connection is successful\r\n  const activePrevious = usePrevious(active);\r\n  const connectorPrevious = usePrevious(connector);\r\n  useEffect(() => {\r\n    if (\r\n      walletModalOpen &&\r\n      ((active && !activePrevious) ||\r\n        (connector && connector !== connectorPrevious && !error))\r\n    ) {\r\n      setWalletView(WALLET_VIEWS.ACCOUNT);\r\n    }\r\n  }, [\r\n    setWalletView,\r\n    active,\r\n    error,\r\n    connector,\r\n    walletModalOpen,\r\n    activePrevious,\r\n    connectorPrevious,\r\n  ]);\r\n\r\n  const tryActivation = async (connector: AbstractConnector | undefined) => {\r\n    let name = \"\";\r\n    Object.keys(SUPPORTED_WALLETS).map((key) => {\r\n      if (connector === SUPPORTED_WALLETS[key].connector) {\r\n        return (name = SUPPORTED_WALLETS[key].name);\r\n      }\r\n      return true;\r\n    });\r\n    // log selected wallet\r\n    ReactGA.event({\r\n      category: \"Wallet\",\r\n      action: \"Change Wallet\",\r\n      label: name,\r\n    });\r\n    setPendingWallet(connector); // set wallet for pending view\r\n    setWalletView(WALLET_VIEWS.PENDING);\r\n\r\n    connector &&\r\n      activate(connector, undefined, true).catch((error) => {\r\n        if (error instanceof UnsupportedChainIdError) {\r\n          activate(connector); // a little janky...can't use setError because the connector isn't set\r\n        } else {\r\n          console.error(error);\r\n          setPendingError(true);\r\n        }\r\n      });\r\n  };\r\n\r\n  // get wallets user can switch too, depending on device/browser\r\n  function getOptions() {\r\n    return Object.keys(SUPPORTED_WALLETS).map((key) => {\r\n      const option = SUPPORTED_WALLETS[key];\r\n      return (\r\n        <Option\r\n          id={`connect-${key}`}\r\n          onClick={() => {\r\n            option.connector === connector\r\n              ? setWalletView(WALLET_VIEWS.ACCOUNT)\r\n              : !option.href && tryActivation(option.connector);\r\n          }}\r\n          key={key}\r\n          active={option.connector === connector}\r\n          color={option.color}\r\n          header={option.name}\r\n          subheader={null} //use option.descriptio to bring back multi-line\r\n          icon={require(\"../../assets/images/\" + option.iconName).default}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  function getModalContent() {\r\n    if (error) {\r\n      return (\r\n        <Box>\r\n          <IconButton className=\"close-icon\" onClick={toggleWalletModal}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography p=\"16px\">\r\n            {error instanceof UnsupportedChainIdError\r\n              ? \"Wrong Network\"\r\n              : \"Error connecting\"}\r\n          </Typography>\r\n          {error instanceof UnsupportedChainIdError ? (\r\n            <Typography\r\n              color=\"warning.main\"\r\n              sx={{ p: { xs: \"16px\", md: \"32px\" } }}\r\n            >\r\n              Please connect to the appropriate TRON network.\r\n            </Typography>\r\n          ) : (\r\n            <Typography color=\"error\" sx={{ p: { xs: \"16px\", md: \"32px\" } }}>\r\n              Error connecting. Try refreshing the page.\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      );\r\n    }\r\n    if (account && walletView === WALLET_VIEWS.ACCOUNT) {\r\n      return (\r\n        <AccountDetails\r\n          toggleWalletModal={toggleWalletModal}\r\n          pendingTransactions={pendingTransactions}\r\n          confirmedTransactions={confirmedTransactions}\r\n          ENSName={ENSName}\r\n          openOptions={() => setWalletView(WALLET_VIEWS.OPTIONS)}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <Box>\r\n        <IconButton className=\"close-icon\" onClick={toggleWalletModal}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n        {walletView !== WALLET_VIEWS.ACCOUNT ? (\r\n          <Typography\r\n            color=\"primary.main\"\r\n            p=\"16px\"\r\n            sx={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setPendingError(false);\r\n              setWalletView(WALLET_VIEWS.ACCOUNT);\r\n            }}\r\n          >\r\n            Back\r\n          </Typography>\r\n        ) : (\r\n          <Typography p=\"16px\" sx={{ cursor: \"pointer\" }}>\r\n            Connect to a wallet\r\n          </Typography>\r\n        )}\r\n        <Box sx={{ p: { xs: \"16px\", md: \"32px\" } }}>\r\n          {walletView === WALLET_VIEWS.PENDING ? (\r\n            <PendingView\r\n              connector={pendingWallet}\r\n              error={pendingError}\r\n              setPendingError={setPendingError}\r\n              tryActivation={tryActivation}\r\n            />\r\n          ) : (\r\n            <Box>{getOptions()}</Box>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={walletModalOpen}\r\n      onClose={toggleWalletModal}\r\n      sx={{\r\n        \"> .MuiDialog-container\": {\r\n          \"> .MuiPaper-root\": {\r\n            maxWidth: \"420px\",\r\n            width: { xs: \"100%\", sm: \"70%\", md: \"50%\" },\r\n          },\r\n        },\r\n      }}\r\n    >\r\n      {getModalContent()}\r\n    </Dialog>\r\n  );\r\n}\r\n","import { AbstractConnector } from \"@web3-react/abstract-connector\";\r\nimport { UnsupportedChainIdError, useWeb3React } from \"@web3-react/core\";\r\nimport { useMemo } from \"react\";\r\nimport { Activity } from \"react-feather\";\r\nimport { Button, Typography } from \"@mui/material\";\r\nimport { injected } from \"connectors\";\r\nimport useENSName from \"hooks/useENSName\";\r\nimport { useWalletModalToggle } from \"state/application/hooks\";\r\nimport {\r\n  isTransactionRecent,\r\n  useAllTransactions,\r\n} from \"state/transactions/hooks\";\r\nimport { TransactionDetails } from \"state/transactions/reducer\";\r\nimport { shortenAddress } from \"utils\";\r\nimport Identicon from \"components/Identicon\";\r\nimport Loader from \"components/Loader\";\r\nimport WalletModal from \"components/WalletModal\";\r\nimport \"./web3-status.scss\";\r\n\r\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\r\n  return b.addedTime - a.addedTime;\r\n}\r\n\r\nconst SOCK = (\r\n  <span\r\n    role=\"img\"\r\n    aria-label=\"has socks emoji\"\r\n    style={{ marginTop: -4, marginBottom: -4 }}\r\n  >\r\n    🧦\r\n  </span>\r\n);\r\n\r\nfunction StatusIcon({ connector }: { connector: AbstractConnector }) {\r\n  if (connector === injected) {\r\n    return <Identicon />;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction Web3StatusInner() {\r\n  const { account, connector, error } = useWeb3React();\r\n  const { ENSName } = useENSName(account ?? undefined);\r\n\r\n  const allTransactions = useAllTransactions();\r\n\r\n  const sortedRecentTransactions = useMemo(() => {\r\n    const txs = Object.values(allTransactions);\r\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\r\n  }, [allTransactions]);\r\n\r\n  const pending = sortedRecentTransactions\r\n    .filter((tx) => !tx.receipt)\r\n    .map((tx) => tx.hash);\r\n\r\n  const hasPendingTransactions = !!pending.length;\r\n  const hasSocks = null;\r\n  const toggleWalletModal = useWalletModalToggle();\r\n\r\n  if (account) {\r\n    return (\r\n      <Button variant=\"contained\" color=\"primary\" onClick={toggleWalletModal}>\r\n        {hasPendingTransactions ? (\r\n          <>\r\n            <Typography mr=\"8px\">{pending?.length} Pending</Typography>{\" \"}\r\n            <Loader />\r\n          </>\r\n        ) : (\r\n          <>\r\n            {hasSocks ? SOCK : null}\r\n            <Typography mr=\"8px\" ml=\"4px\">\r\n              {ENSName || shortenAddress(account)}\r\n            </Typography>\r\n          </>\r\n        )}\r\n        {!hasPendingTransactions && connector && (\r\n          <StatusIcon connector={connector} />\r\n        )}\r\n      </Button>\r\n    );\r\n  } else if (error) {\r\n    return (\r\n      <Button variant=\"contained\" color=\"error\" onClick={toggleWalletModal}>\r\n        <Activity className=\"network-icon\" />\r\n        <Typography ml=\"4px\">\r\n          {error instanceof UnsupportedChainIdError ? \"Wrong Network\" : \"Error\"}\r\n        </Typography>\r\n      </Button>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={toggleWalletModal}>\r\n          Connect Wallet\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function Web3Status() {\r\n  const { account } = useWeb3React();\r\n\r\n  const { ENSName } = useENSName(account ?? undefined);\r\n\r\n  const allTransactions = useAllTransactions();\r\n\r\n  const sortedRecentTransactions = useMemo(() => {\r\n    const txs = Object.values(allTransactions);\r\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\r\n  }, [allTransactions]);\r\n\r\n  const pending = sortedRecentTransactions\r\n    .filter((tx) => !tx.receipt)\r\n    .map((tx) => tx.hash);\r\n  const confirmed = sortedRecentTransactions\r\n    .filter((tx) => tx.receipt)\r\n    .map((tx) => tx.hash);\r\n\r\n  // if (!contextNetwork.active && !active) {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <Web3StatusInner />\r\n      <WalletModal\r\n        ENSName={ENSName ?? undefined}\r\n        pendingTransactions={pending}\r\n        confirmedTransactions={confirmed}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Link,\r\n  Box,\r\n  Button,\r\n  Menu,\r\n  MenuItem,\r\n  Container,\r\n  Typography,\r\n  Modal,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport TelegramIcon from \"@mui/icons-material/Telegram\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport DiscordIcon from \"assets/images/discord-brands.svg\";\r\nimport \"./header.scss\";\r\nimport { AddNft } from \"store/slices/addnft-slice\";\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport Web3Status from \"components/Web3Status\";\r\n\r\nconst menuLists = [\r\n  {\r\n    link: \"/play\",\r\n    text: \"Play War\",\r\n  },\r\n  {\r\n    link: \"/stake\",\r\n    text: \"Meow Staking\",\r\n  },\r\n  {\r\n    link: \"/result\",\r\n    text: \"Result\"\r\n  },\r\n  {\r\n    link: \"/admin\",\r\n    text: \"Admin\",\r\n  }\r\n];\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 500,\r\n  backgroundColor: \"rgba(38,40,42)\",\r\n  border: \"none\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst Header = () => {\r\n  const history = useHistory();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [NFTAddress, setNFTAddress] = React.useState(\"\");\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const [anchorElUser, setAnchorElUser] = useState<null | HTMLElement>(null);\r\n\r\n  const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    console.log(\"Open\", open);\r\n  };\r\n  const handleClose = () => setOpen(false);\r\n  \r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  const handleClickMenu = (link: string) => {\r\n    handleCloseUserMenu();\r\n    history.push(link);\r\n  };\r\n\r\n  const handleRequest = useCallback(async () => {\r\n    await dispatch(AddNft({ address: NFTAddress }));\r\n  }, [NFTAddress]);\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"static\"\r\n      className=\"appbar\"\r\n      sx={{ backgroundColor: \"rgba(9,9,10,1)\" }}\r\n    >\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar\r\n          disableGutters\r\n          sx={{ justifyContent: \"space-between\", columnGap: \"8px\" }}\r\n        >\r\n          <Link href=\"/\" className=\"logo\" sx={{ textDecoration: \"none\" }}>\r\n            <Typography\r\n              fontFamily=\"Bree Serif\"\r\n              sx={{ fontSize: { xs: \"30px\", sm: \"40px\", md: \"64px\" } }}\r\n              color=\"#ffc90e\"\r\n            >\r\n              Bear Fight!\r\n            </Typography>\r\n            <Typography\r\n              fontFamily=\"Bree Serif\"\r\n              sx={{\r\n                fontSize: { xs: \"24px\", sm: \"32px\", md: \"40px\" },\r\n                mt: '8px',\r\n                display: { xs: 'none', sm: 'block' }\r\n              }}\r\n              color=\"White\"\r\n            >\r\n              (NFT War)\r\n            </Typography>\r\n          </Link>\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\", columnGap: \"8px\" }}>\r\n            <Box\r\n              className=\"social-buttons\"\r\n              sx={{ display: { xs: \"none\", sm: \"flex\" } }}\r\n            >\r\n              <Button\r\n                href=\"https://x.com/tronbearyclub\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"social-button\"\r\n                variant=\"contained\"\r\n                sx={{\r\n                  backgroundColor: \"transparent\",\r\n                  \"&: hover\": {\r\n                    backgroundColor: \"rgba(38,40,42,0.95)\",\r\n                  },\r\n                }}\r\n              >\r\n                <TwitterIcon sx={{ color: \"#fff\" }} />\r\n              </Button>\r\n              <Button\r\n                href=\"https://t.me/tronbearyclub\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"social-button\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={{\r\n                  backgroundColor: \"transparent\",\r\n                  \"&: hover\": {\r\n                    backgroundColor: \"rgba(38,40,42,0.95)\",\r\n                  },\r\n                }}\r\n              >\r\n                <TelegramIcon sx={{ color: \"#fff\" }} />\r\n              </Button>\r\n              <Button\r\n                href=\"https://discord.gg/warchest\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"social-button\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={{\r\n                  backgroundColor: \"transparent\",\r\n                  \"&: hover\": {\r\n                    backgroundColor: \"rgba(38,40,42,0.95)\",\r\n                  },\r\n                }}\r\n              >\r\n                <Box component=\"img\" src={DiscordIcon} alt=\"\" />\r\n              </Button>\r\n            </Box>\r\n            <Web3Status />\r\n            <Button\r\n              onClick={handleOpenUserMenu}\r\n              className=\"menu-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={{\r\n                backgroundColor: \"rgba(101,230,255,0.12)\",\r\n                \"&: hover\": {\r\n                  backgroundColor: \"rgba(101,230,255,0.15)\",\r\n                },\r\n              }}\r\n            >\r\n              <MenuIcon\r\n                sx={{\r\n                  color: \"rgba(101,230,255,0.9)\",\r\n                  \"&: hover\": {\r\n                    color: \"rgba(101,230,255,1)\",\r\n                  },\r\n                }}\r\n              />\r\n            </Button>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElUser}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              open={Boolean(anchorElUser)}\r\n              onClose={handleCloseUserMenu}\r\n              sx={{\r\n                mt: \"45px\",\r\n              }}\r\n            >\r\n              <MenuItem\r\n                component=\"a\"\r\n                href=\"https://www.cryptomooncatz.com\"\r\n                sx={{\r\n                  backgroundColor: \"rgba(101,230,255,0.12)\",\r\n                  color: \"rgba(101,230,255,0.9)\",\r\n                }}\r\n              >\r\n                Home\r\n              </MenuItem>\r\n              {menuLists.map((list, key) => (\r\n                <MenuItem\r\n                  key={key}\r\n                  sx={{\r\n                    backgroundColor: \"rgba(101,230,255,0.12)\",\r\n                    color: \"rgba(101,230,255,0.9)\",\r\n                  }}\r\n                  onClick={() => handleClickMenu(list.link)}\r\n                >\r\n                  {list.text}\r\n                </MenuItem>\r\n              ))}\r\n              <MenuItem\r\n                key='nftRequest'\r\n                sx={{\r\n                  backgroundColor: \"rgba(101,230,255,0.12)\",\r\n                  color: \"rgba(101,230,255,0.9)\",\r\n                }}\r\n                onClick={() => (handleOpen())}\r\n              >\r\n                NFT Request\r\n              </MenuItem>\r\n            </Menu>\r\n          </Box>\r\n        </Toolbar>\r\n        <Modal\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Typography\r\n              color=\"white\"\r\n              fontFamily=\"Georgia\"\r\n              fontWeight=\"700\"\r\n              fontSize=\"30px\"\r\n            >\r\n              Please insert NFT Address\r\n            </Typography>\r\n            <TextField\r\n              sx={{\r\n                mt: \"20px\",\r\n                width: \"100%\",\r\n              }}\r\n              value={NFTAddress}\r\n              onChange={(e) => {\r\n                setNFTAddress(e.target.value);\r\n              }}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"info\"\r\n              sx={{\r\n                mt: \"20px\",\r\n                width: \"50%\",\r\n              }}\r\n              onClick={() => {\r\n                handleRequest();\r\n                handleClose();\r\n              }}\r\n            >\r\n              Send Reqeust\r\n            </Button>\r\n          </Box>\r\n        </Modal>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default Header;\r\n","import { Box } from \"@mui/material\";\r\nimport \"./banner.scss\";\r\nimport BannerImage1 from \"assets/images/banner.png\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <>\r\n      <Box className=\"banner-container\">\r\n        <Box\r\n          component=\"img\"\r\n          sx={{\r\n            width: { xs: \"90%\", sm: \"70%\" },\r\n            mr: { xs: 1, sm: 2, md: 3 },\r\n          }}\r\n          src={BannerImage1}\r\n          alt=\"Banner Image\"\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface IPendingTxn {\r\n  readonly txnHash: string;\r\n  readonly text: string;\r\n  readonly type: string;\r\n}\r\n\r\nconst initialState: Array<IPendingTxn> = [];\r\n\r\nconst pendingTxnsSlice = createSlice({\r\n  name: \"pendingTransactions\",\r\n  initialState,\r\n  reducers: {\r\n    fetchPendingTxns(state, action: PayloadAction<IPendingTxn>) {\r\n      state.push(action.payload);\r\n    },\r\n    clearPendingTxn(state, action: PayloadAction<string>) {\r\n      const target = state.find((x) => x.txnHash === action.payload);\r\n      if (target) {\r\n        state.splice(state.indexOf(target), 1);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const getStakingTypeText = (action: string) => {\r\n  return action.toLowerCase() === \"stake\"\r\n    ? \"Staking KANDY\"\r\n    : \"Unstaking SKANDY\";\r\n};\r\n\r\nexport const getWrapingTypeText = (isWrap: boolean) => {\r\n  return isWrap ? \"Wrap SKANDY\" : \"Unwrap wSKANDY\";\r\n};\r\n\r\nexport const isPendingTxn = (\r\n  pendingTransactions: IPendingTxn[],\r\n  type: string\r\n) => {\r\n  return pendingTransactions.map((x) => x.type).includes(type);\r\n};\r\n\r\nexport const txnButtonText = (\r\n  pendingTransactions: IPendingTxn[],\r\n  type: string,\r\n  defaultText: string\r\n) => {\r\n  return isPendingTxn(pendingTransactions, type) ? \"Pending...\" : defaultText;\r\n};\r\n\r\nexport const { fetchPendingTxns, clearPendingTxn } = pendingTxnsSlice.actions;\r\n\r\nexport default pendingTxnsSlice.reducer;\r\n","export const setAll = (state: any, properties: any) => {\r\n    const props = Object.keys(properties);\r\n    props.forEach(key => {\r\n        state[key] = properties[key];\r\n    });\r\n};\r\n","import {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport { clearPendingTxn } from \"./pending-txns-slice\";\r\nimport { setAll } from \"helpers/set-all\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\nimport tronWeb from \"tronweb\";\r\nimport io from \"socket.io-client\";\r\nimport { notification } from \"utils/notification\";\r\nimport instance from \"constants/axios\";\r\nimport { baseURL } from \"constants/axios\";\r\n\r\ndeclare var window: any;\r\nconst socket = io(baseURL);\r\n\r\ninterface IWidrawNFT {\r\n  address: any;\r\n}\r\n\r\nexport const widrawNFT = createAsyncThunk(\r\n  \"widrawNFT/widrawNFT\",\r\n\r\n  async ({ address }: IWidrawNFT) => {\r\n    let meowContract: any;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    let usersData: any;\r\n    await instance\r\n      .get(`/api/userinfo/find?address=${address}`)\r\n      .then((response) => {\r\n        usersData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    let nftIds: number[] = [];\r\n    let nftAddress: string[] = [];\r\n\r\n    for (let i = 0; i < usersData.ownNfts.length; i++) {\r\n      nftAddress[i] = usersData.ownNfts[i].split(\"@\")[0];\r\n      nftIds[i] = Number(usersData.ownNfts[i].split(\"@\")[1]);\r\n    }\r\n\r\n    try {\r\n      await meowContract\r\n        .claimNFT(nftIds, nftAddress)\r\n        .send({ feeLimit: 100000000 });\r\n\r\n      await instance.post(\"/api/userinfo/create\", {\r\n        address: address,\r\n        stakeAmount: 0,\r\n        claimAmount: 0,\r\n        ownNfts: [-1],\r\n      });\r\n      notification({ title: \"Successfully Withdrew!\", type: \"success\" });\r\n      socket.emit(\"enter\");\r\n      return;\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n      return;\r\n    } finally {\r\n    }\r\n  }\r\n);\r\n\r\ninterface IClaimMoney {\r\n  address: any;\r\n}\r\n\r\nexport const claimMoney = createAsyncThunk(\r\n  \"claimMoney/claimMoney\",\r\n\r\n  async ({ address }: IClaimMoney) => {\r\n    let meowContract: any;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    let usersData: any;\r\n    await instance\r\n      .get(`/api/userinfo/find?address=${address}`)\r\n      .then((response) => {\r\n        usersData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    try {\r\n      await meowContract\r\n        .claimMoney()\r\n        .send({ feeLimit: 100000000 });\r\n      await instance.post(\"/api/userinfo/create\", {\r\n        address: address,\r\n        stakeAmount: 0,\r\n        claimAmount: -1,\r\n        ownNfts: [],\r\n      });\r\n\r\n      notification({ title: \"Successfully Withdrew!\", type: \"success\" });\r\n      socket.emit(\"enter\");\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n      return;\r\n    } finally {\r\n    }\r\n  }\r\n);\r\n\r\ninterface IclaimFightMeow {\r\n  tokenId: number;\r\n  fightRoom: number;\r\n  whichroom: number;\r\n  url: string;\r\n  waitingRandom: number;\r\n  address: any;\r\n  gamePrice: number;\r\n  nftAddress: string;\r\n}\r\n\r\nexport const ClaimFight = createAsyncThunk(\r\n  \"claimfight/claimfightMeow\",\r\n\r\n  async (\r\n    {\r\n      tokenId,\r\n      fightRoom,\r\n      whichroom,\r\n      url,\r\n      waitingRandom,\r\n      address,\r\n      gamePrice,\r\n      nftAddress,\r\n    }: IclaimFightMeow,\r\n    { dispatch }\r\n  ) => {\r\n    let meowContract: any;\r\n    console.log(\r\n      \"claimFight Data: \",\r\n      tokenId,\r\n      fightRoom,\r\n      whichroom,\r\n      url,\r\n      waitingRandom,\r\n      address,\r\n      gamePrice\r\n    );\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n\r\n    let enterTx;\r\n    let random1: number[] = [];\r\n    let random2: number[] = [];\r\n    try {\r\n      enterTx = await meowContract\r\n        .claimFight(tokenId, fightRoom, nftAddress)\r\n        .send({ feeLimit: 200000000, callValue: gamePrice });\r\n\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          if (transaction && transaction.ret && transaction.ret.length > 0) {\r\n            receipt = transaction.ret[0].contractRet;\r\n          }\r\n          console.log(\"receipt: \", receipt, enterTx);\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      const random_tmp = (\r\n        await meowContract.randoms(fightRoom, 1).call()\r\n      ).toNumber();\r\n      await instance.post(\"/api/betting/update\", {\r\n        roomNum: whichroom,\r\n        secondNFT: url,\r\n        secondAddress: address,\r\n        secondRandom: random_tmp,\r\n        secondId: tokenId,\r\n      });\r\n\r\n      let firstRandom = waitingRandom;\r\n      let secondRandom = random_tmp;\r\n      random1[whichroom] = firstRandom;\r\n      random2[whichroom] = secondRandom;\r\n\r\n      let winnerData: any;\r\n      let flag: boolean = false;\r\n      let resultData: any;\r\n      let usersData: any;\r\n      await instance.post(\"/api/random/create\", {\r\n        randomNumber1: firstRandom,\r\n        randomNumber2: secondRandom,\r\n        roomNum: fightRoom,\r\n      });\r\n\r\n      await instance\r\n        .get(`/api/betting/find?fightRoom=${fightRoom}`)\r\n        .then((response) => {\r\n          resultData = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n\r\n      const firstClaimMoney = \r\n        (await meowContract.availableAmount(resultData.firstAddress).call()).toNumber() / Math.pow(10, 6);\r\n\r\n      const secondClaimMoney = \r\n        (await meowContract.availableAmount(address).call()).toNumber() / Math.pow(10, 6);\r\n\r\n      const firstClaimHoney = \r\n        (await meowContract.availableHoneyAmount(resultData.firstAddress).call()).toNumber();\r\n\r\n      const secondClaimHoney = \r\n        (await meowContract.availableHoneyAmount(address).call()).toNumber();\r\n\r\n      await instance\r\n        .get(`/api/userinfo`)\r\n        .then((response) => {\r\n          usersData = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n\r\n      // let totalStake = 0;\r\n      // for (let i = 0; i < usersData.length; i++) {\r\n      //   totalStake += usersData[i].stakeAmount;\r\n      // }\r\n\r\n      // if (firstRandom === 777) {\r\n      //   if (secondRandom === 777) {\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: resultData.firstAddress,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount: (jackpotAmount * 5) / 20,\r\n      //       ownNfts: [],\r\n      //     });\r\n\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: address,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount: (jackpotAmount * 5) / 20,\r\n      //       ownNfts: [],\r\n      //     });\r\n      //   } else {\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: resultData.firstAddress,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount: (jackpotAmount * 4) / 10,\r\n      //       ownNfts: [],\r\n      //     });\r\n\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: address,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount: (jackpotAmount * 1) / 10,\r\n      //       ownNfts: [],\r\n      //     });\r\n      //   }\r\n\r\n      //   for (let i = 0; i < usersData.length; i++) {\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: usersData[i].address,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount:\r\n      //         (jackpotAmount * usersData[i].stakeAmount * 4) / totalStake / 10,\r\n      //       ownNfts: [],\r\n      //     });\r\n      //   }\r\n      //   alert(\"You hit the Jackpot. Receive the award!!!!!\");\r\n      //   await meowContract.setJackpot(jackpotAmount / 10);\r\n      // }\r\n\r\n      // if (secondRandom === 777) {\r\n      //   if (firstRandom === 777) {\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: resultData.firstAddress,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount: (jackpotAmount * 5) / 20,\r\n      //       ownNfts: [],\r\n      //     });\r\n\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: address,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount: (jackpotAmount * 5) / 20,\r\n      //       ownNfts: [],\r\n      //     });\r\n      //   } else {\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: address,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount: (jackpotAmount * 4) / 20,\r\n      //       ownNfts: [],\r\n      //     });\r\n\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: resultData.firstAddress,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount: (jackpotAmount * 1) / 20,\r\n      //       ownNfts: [],\r\n      //     });\r\n      //   }\r\n      //   for (let i = 0; i < usersData.length; i++) {\r\n      //     await instance.post(\"/api/userinfo/create\", {\r\n      //       address: usersData[i].address,\r\n      //       stakeAmount: 0,\r\n      //       claimAmount:\r\n      //         (jackpotAmount * usersData[i].stakeAmount * 4) / totalStake / 10,\r\n      //       ownNfts: [],\r\n      //     });\r\n      //   }\r\n      //   alert(\"You hit the Jackpot. Receive the award!!!!!\");\r\n      //   await meowContract.setJackpot(jackpotAmount / 10);\r\n      // }\r\n\r\n      if (firstRandom > secondRandom) {\r\n        await instance\r\n          .get(`/api/winner/find?address=${resultData.firstAddress}`)\r\n          .then((response) => {\r\n            winnerData = response.data;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n\r\n        if(winnerData) {\r\n          await instance.post(\"/api/winner/update\", {\r\n            address: winnerData.address,\r\n            winCount: winnerData.winCount + 1,\r\n          });\r\n        } else {\r\n          await instance.post(\"/api/winner/create\", {\r\n            address: resultData.firstAddress,\r\n            winCount: 1,\r\n          });\r\n        }\r\n      } else if (firstRandom < secondRandom) {\r\n        await instance\r\n          .get(`/api/winner/find?address=${address}`)\r\n          .then((response) => {\r\n            winnerData = response.data;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n        \r\n        if(winnerData) {\r\n          await instance.post(\"/api/winner/update\", {\r\n            address: winnerData.address,\r\n            winCount: winnerData.winCount + 1,\r\n          });\r\n        } else {\r\n          await instance.post(\"/api/winner/create\", {\r\n            address: address,\r\n            winCount: 1,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (firstRandom > secondRandom) {\r\n        await instance.post(\"/api/userinfo/create\", {\r\n          address: resultData.firstAddress,\r\n          stakeAmount: firstClaimHoney,\r\n          claimAmount: firstClaimMoney,\r\n          ownNfts: [\r\n            `${nftAddress}@${tokenId}`,\r\n            `${nftAddress}@${resultData.tokenId}`,\r\n          ],\r\n        });\r\n      } else if (firstRandom < secondRandom) {\r\n        await instance.post(\"/api/userinfo/create\", {\r\n          address: address,\r\n          stakeAmount: secondClaimHoney,\r\n          claimAmount: secondClaimMoney,\r\n          ownNfts: [\r\n            `${nftAddress}@${tokenId}`,\r\n            `${nftAddress}@${resultData.tokenId}`,\r\n          ],\r\n        });\r\n      } else {\r\n        await instance.post(\"/api/userinfo/create\", {\r\n          address: resultData.firstAddress,\r\n          stakeAmount: firstClaimHoney,\r\n          claimAmount: firstClaimMoney,\r\n          ownNfts: [`${nftAddress}@${resultData.tokenId}`],\r\n        });\r\n\r\n        await instance.post(\"/api/userinfo/create\", {\r\n          address: address,\r\n          stakeAmount: secondClaimHoney,\r\n          claimAmount: secondClaimMoney,\r\n          ownNfts: [`${nftAddress}@${tokenId}`],\r\n        });\r\n        flag = true;\r\n      }\r\n\r\n      await instance.post(\"/api/result/create\", {\r\n        randomNumber1: firstRandom,\r\n        randomNumber2: secondRandom,\r\n        nftUrl1: resultData.firstNFT,\r\n        nftUrl2: resultData.secondNFT,\r\n        address1: resultData.firstAddress,\r\n        address2: resultData.secondAddress,\r\n        roomNum: fightRoom,\r\n      });\r\n\r\n      notification({ title: \"Successfully Entered!\", type: \"success\" });\r\n      return {\r\n        random1,\r\n        random2,\r\n      };\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n    } finally {\r\n      if (enterTx) {\r\n        dispatch(clearPendingTxn(enterTx));\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nexport interface IWinSlice {\r\n  random1: number[];\r\n  random2: number[];\r\n}\r\n\r\nconst fightSlice = createSlice({\r\n  name: \"fight\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(ClaimFight.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(ClaimFight.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(ClaimFight.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.fight;\r\n\r\nexport default fightSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (fight) => fight);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\n\r\ninterface IwalletInfo {\r\n  account: any;\r\n}\r\n\r\nexport const walletInfo = createAsyncThunk(\r\n  \"nft/walletInfo\",\r\n  async ({ account }: IwalletInfo) => {\r\n    let tmpData: any;\r\n    let usersData: any;\r\n    await instance\r\n      .get(`/api/userinfo`)\r\n      .then((response) => {\r\n        usersData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    let totalStake = 0;\r\n    for (let i = 0; i < usersData.length; i++) {\r\n      totalStake += usersData[i].stakeAmount;\r\n    }\r\n\r\n    await instance\r\n      .get(`/api/userinfo/find?address=${account}`)\r\n      .then((response) => {\r\n        tmpData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    let nftCount = tmpData?.ownNfts.length;\r\n    let nftInfo: string[] = tmpData?.ownNfts;\r\n    let trxAmount = tmpData?.claimAmount / 1000000;\r\n    let stakeAmount = tmpData?.stakeAmount;\r\n    return {\r\n      nftCount,\r\n      trxAmount,\r\n      stakeAmount,\r\n      totalStake,\r\n      nftInfo,\r\n    };\r\n  }\r\n);\r\n\r\nexport interface IWalletInfoDetail {\r\n  nftCount: number;\r\n  trxAmount: number;\r\n  stakeAmount: number;\r\n  totalStake: number;\r\n  nftInfo: string[];\r\n}\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nconst nftSlice = createSlice({\r\n  name: \"nft\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(walletInfo.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(walletInfo.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(walletInfo.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.nfts;\r\n\r\nexport default nftSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (nfts) => nfts);\r\n","import { Box, Button, Typography } from \"@mui/material\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { claimMoney, widrawNFT } from \"store/slices/play-slice\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { walletInfo } from \"store/slices/walletInfo-slice\";\r\nimport React from \"react\";\r\n\r\nconst availableStyle = {\r\n  paddingY: \"4px\",\r\n  textAlign: \"center\",\r\n  fontSize: \"18px\",\r\n  color: \"#F39B33\",\r\n};\r\n\r\nconst Jackpot = () => {\r\n  const { account } = useWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const JackpotAmount = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.jackpotAmount\r\n  );\r\n  let contractNFTs: number = useSelector<IReduxState, number>(\r\n    (state) => state.userInfo.userInfoData.ownNfts.length\r\n  );\r\n  let widrawAmount: number = useSelector<IReduxState, number>(\r\n    (state) => state.userInfo.userInfoData.claimAmount\r\n  );\r\n\r\n  const getAvailableData = useCallback(() => {\r\n    dispatch(walletInfo({ account: account }));\r\n  }, [account]);\r\n\r\n  const onWidrawNFT = useCallback(async () => {\r\n    let widrawState = await dispatch(widrawNFT({ address: account }));\r\n    if (widrawState.meta.requestStatus === \"fulfilled\") {\r\n      getAvailableData();\r\n    }\r\n  }, [account]);\r\n\r\n  const onClaimMoney = useCallback(async () => {\r\n    let claimState = await dispatch(claimMoney({ address: account }));\r\n    if (claimState.meta.requestStatus === \"fulfilled\") {\r\n      getAvailableData();\r\n    }\r\n  }, [account]);\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      getAvailableData();\r\n    }\r\n  }, [account]);\r\n\r\n  \r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: \"rgba(230,239,237, 0.1)\",\r\n        paddingY: \"3px\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          color: \"#ffc90e\",\r\n          fontSize: { xs: \"20px\", sm: '32px', md: \"48px\" },\r\n          fontWeight: '700',\r\n          py: 1,\r\n          px: { xs: 1, sm: 3 },\r\n          backgroundColor: \"rgba(38,40,42,0.64)\",\r\n          textAlign: \"center\",\r\n          mx: \"auto\",\r\n        }}\r\n      >\r\n        Honey Pot Jackpot: {JackpotAmount} TRX\r\n      </Typography>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          flexWrap: \"wrap\",\r\n          alignItems: \"self-start\",\r\n          pb: 6,\r\n          mt: \"12px\",\r\n        }}\r\n      >\r\n        <Box sx={{ mr: 3, textAlign: \"center\" }}>\r\n          <Button variant=\"contained\" color=\"info\" onClick={onWidrawNFT}>\r\n            Withdraw NFTs\r\n          </Button>\r\n          <Typography sx={availableStyle}>\r\n            Available NFTs: {contractNFTs ? contractNFTs : 0} NFTs\r\n          </Typography>\r\n        </Box>\r\n        <Box sx={{ mr: 3, textAlign: \"center\" }}>\r\n          <Button variant=\"contained\" color=\"info\" onClick={onClaimMoney}>\r\n            Withdraw TRX\r\n          </Button>\r\n          <Typography sx={availableStyle}>\r\n            Available TRX: {widrawAmount ? widrawAmount : 0} TRX\r\n          </Typography>\r\n        </Box>\r\n        {/* <Box sx={{ mr: 3, textAlign: \"center\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              handleClickStake(\"stake\");\r\n            }}\r\n          >\r\n            Meow Staking\r\n          </Button>\r\n        </Box> */}\r\n      </Box>\r\n      <Box\r\n        display='flex'\r\n        alignItems='center'\r\n        sx={{\r\n          justifyContent: {xs: 'center', sm: 'space-between'},\r\n          flexDirection: { xs: 'column', sm: 'row'},\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            mr: {xs: 0, sm: 3},\r\n            mt: {xs: 1, sm: 0},\r\n            mb: {xs: 1, sm: 0},\r\n          }}\r\n          display='flex'\r\n          justifyContent='center'\r\n        >\r\n          <Typography\r\n            fontFamily=\"Audiowide\"\r\n            sx={{\r\n              color: \"#fff\",\r\n              fontSize: { xs: \"20px\", md: \"36px\" },\r\n              py: 1,\r\n              px: { xs: 1, xl: 2 },\r\n              backgroundColor: \"rgba(38,40,42,0.64)\",\r\n              width: { xs: \"320px\", sm: '480px', md: \"720px\", xl: \"1000px\" },\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            HNY left to be mined: 99,999,980\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Jackpot;\r\n","export const fightStyle = {\r\n  fontSize: { xs: \"16px\", sm: \"20px\", md: \"28px\" },\r\n  fontFamily: \"Georgia\",\r\n  fontWeight: \"900\",\r\n  color: \"white\",\r\n  lineHeight: { xs: \"20px\", sm: \"24px\", md: \"36px\" },\r\n  textAlign: \"center\",\r\n};\r\n\r\nexport const randomNumberStyle = {\r\n  fontSize: { xs: \"10px\", sm: \"12px\", md: \"14px\" },\r\n  color: \"white\",\r\n  fontWeight: \"900\",\r\n  fontFamily: \"Georgia\",\r\n};\r\n\r\nexport const randomNumberPosStyle = {\r\n  height: { xs: \"20px\", sm: \"28px\", md: \"46px\" },\r\n}\r\n\r\nexport const buttonWidthStyle = {\r\n  position: \"relative\",\r\n  width: {xs: \"80%\", md: \"80%\"},\r\n}\r\n\r\nexport const roomStyleAvatar = {\r\n  width: { xs: \"60px\", sm: \"70px\", md: \"100px\" },\r\n  height: { xs: \"60px\", sm: \"70px\", md: \"100px\" },\r\n  borderRadius: \"12px\",\r\n};\r\n\r\nexport const buttonStyle = {\r\n  fontSize: { xs: \"8px\", sm: \"12px\", md: \"14px\" },\r\n  textAlign: \"center\",\r\n  position: \"absolute\",\r\n};\r\n\r\nexport const roomContentTop = {\r\n  top: { xs: '10px', md: '20px' }\r\n}\r\n\r\nexport const roomStyleBack = {\r\n  width: { xs: \"90px\", sm: \"120px\", md: \"150px\" },\r\n  height: { xs: \"130px\", sm: \"170px\", md: \"220px\" },\r\n};\r\n\r\nexport const style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: { xs: \"400px\", sm: \"500px\", md: \"700px\", lg: \"1000px\" },\r\n  height: \"600px\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n  backgroundColor: \"rgba(38,40,42)\",\r\n  overflowY: \"scroll\",\r\n  \"&::-webkit-scrollbar\": {\r\n    width: \"8px\",\r\n    backgroundColor: \"#555\",\r\n  },\r\n  \"&::-webkit-scrollbar-thumb\": {\r\n    borderRadius: \"8px\",\r\n    backgroundColor: \"#333\",\r\n  },\r\n};\r\n\r\nexport const avatarsStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-around\",\r\n  flexWrap: \"wrap\",\r\n}\r\n\r\nexport const modalAvatarStyle = {\r\n  width: {\r\n    sx: \"60px\",\r\n    sm: \"100px\",\r\n    md: \"150px\",\r\n    lg: \"230px\",\r\n  },\r\n  height: {\r\n    sx: \"60px\",\r\n    sm: \"100px\",\r\n    md: \"150px\",\r\n    lg: \"230px\",\r\n  },\r\n  borderRadius: \"12px\",\r\n};\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\n\r\ninterface IBattleDetails {\r\n  claimState: boolean;\r\n  decide: boolean;\r\n  openState: boolean;\r\n  waitingRandom: number;\r\n  whichfight: number;\r\n  whichroom: number;\r\n  waitingNft: string;\r\n}\r\n\r\nexport const loadBattleDetails = createAsyncThunk(\r\n  \"app/loadBattleDetails\",\r\n  async ({\r\n    openState,\r\n    claimState,\r\n    whichfight,\r\n    whichroom,\r\n    waitingRandom,\r\n    decide,\r\n    waitingNft,\r\n  }: IBattleDetails) => {\r\n    return {\r\n      openState,\r\n      claimState,\r\n      whichfight,\r\n      whichroom,\r\n      waitingRandom,\r\n      decide,\r\n      waitingNft,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  openState: false,\r\n  claimState: false,\r\n  whichroom: 0,\r\n  whichfight: 0,\r\n  waitingRandom: 0,\r\n  decide: false,\r\n  waitingNft: \"\",\r\n};\r\n\r\nexport interface IBattleSlice {\r\n  loading: boolean;\r\n  openState: boolean;\r\n  claimState: boolean;\r\n  whichroom: number;\r\n  whichfight: number;\r\n  waitingRandom: number;\r\n  waitingNft: string;\r\n  decide: boolean;\r\n}\r\n\r\nconst battleSlice = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadBattleDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadBattleDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadBattleDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.battle;\r\n\r\nexport default battleSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (battle) => battle);\r\n","import { Color } from \"@material-ui/lab/Alert\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nexport type Message = IMessage & {\r\n  severity: Color;\r\n};\r\n\r\nexport interface MessagesState {\r\n  message: Message | null;\r\n}\r\n\r\ninterface IMessage {\r\n  text: string;\r\n  error?: any;\r\n}\r\n\r\n// Adds a message to the store\r\nconst createMessage = function (\r\n  state: MessagesState,\r\n  severity: Color,\r\n  text: IMessage\r\n) {\r\n  const message: Message = {\r\n    severity,\r\n    ...text,\r\n  };\r\n  state.message = message;\r\n};\r\nconst initialState: MessagesState = {\r\n  message: null,\r\n};\r\nconst messagesSlice = createSlice({\r\n  name: \"messages\",\r\n  initialState,\r\n  reducers: {\r\n    // Creates an error message\r\n    error(state, action: PayloadAction<IMessage>) {\r\n      createMessage(state, \"error\", action.payload);\r\n    },\r\n    // Creates an information message\r\n    info(state, action: PayloadAction<IMessage>) {\r\n      createMessage(state, \"info\", action.payload);\r\n    },\r\n    warning(state, action: PayloadAction<IMessage>) {\r\n      createMessage(state, \"warning\", action.payload);\r\n    },\r\n    success(state, action: PayloadAction<IMessage>) {\r\n      createMessage(state, \"success\", action.payload);\r\n    },\r\n    // Closes a message\r\n    close(state) {\r\n      state.message = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { error, info, close, warning, success } = messagesSlice.actions;\r\n\r\nexport default messagesSlice.reducer;\r\n","export const messages = {\r\n  please_connect:\r\n    \"Please connect your wallet to the Ether network to use Warchest.\",\r\n  please_connect_wallet: \"Please connect your wallet.\",\r\n  try_mint_more: (value: string) =>\r\n    `You're trying to mint more than the maximum payout available! The maximum mint payout is ${value} KANDY.`,\r\n  before_minting: \"Before minting, enter a value.\",\r\n  existing_mint:\r\n    \"You have an existing mint. Minting will reset your vesting period and forfeit any pending claimable rewards. We recommend claiming rewards first or using a fresh wallet. Do you still wish to proceed?\",\r\n  before_stake: \"Before staking, enter a value.\",\r\n  before_unstake: \"Before un staking, enter a value.\",\r\n  tx_successfully_send: \"Your transaction was successfully sent\",\r\n  your_balance_updated: \"Your balance was successfully updated\",\r\n  nothing_to_claim: \"You have nothing to claim\",\r\n  something_wrong: \"Something went wrong\",\r\n  switch_to_avalanche: \"Switch to the Avalanche network?\",\r\n  slippage_too_small: \"Slippage too small\",\r\n  slippage_too_big: \"Slippage too big\",\r\n  your_balance_update_soon: \"Your balance will update soon\",\r\n  before_wrap: \"Before wraping, enter a value.\",\r\n  before_unwrap: \"Before un wraping, enter a value.\",\r\n};\r\n","import { Dispatch } from \"redux\";\r\nimport { error } from \"../store/slices/messages-slice\";\r\nimport { messages } from \"../constants/messages\";\r\n\r\nexport const metamaskErrorWrap = (err: any, dispatch: Dispatch) => {\r\n    let text = messages.something_wrong;\r\n\r\n    if (err.code && err.code === -32603) {\r\n        if (err.message.indexOf(\"ds-math-sub-underflow\") >= 0) {\r\n            text = \"You may be trying to bond more than your balance! Error code: 32603. Message: ds-math-sub-underflow\";\r\n        }\r\n\r\n        if (err.data && err.data.message) {\r\n            text = err.data.message.includes(\":\") ? err.data.message.split(\":\")[1].trim() : err.data.data || err.data.message;\r\n        }\r\n\r\n        if (err.data && err.data.message && err.data.message.includes(\"gas required exceeds allowance\")) {\r\n            text = \"Insufficient balance to make a transaction\";\r\n        }\r\n\r\n        if (err.data && err.data.message && err.data.message.includes(\"Bond too small\")) {\r\n            text = \"Bond too small\";\r\n        }\r\n    }\r\n\r\n    if (err.code && err.code === 4001) {\r\n        if (err.message.includes(\"User denied transaction signature\")) {\r\n            text = \"User denied transaction signature\";\r\n        }\r\n    }\r\n\r\n    return dispatch(error({ text, error: err }));\r\n};\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport { metamaskErrorWrap } from \"helpers/metamask-error-wrap\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\nimport tronWeb from \"tronweb\";\r\nimport { notification } from \"utils/notification\";\r\nimport instance from \"constants/axios\";\r\n\r\ninterface IapproveNFT {\r\n  tokenId: Number;\r\n  address: string;\r\n}\r\n\r\ndeclare var window: any;\r\n\r\nexport const approveNFT = createAsyncThunk(\r\n  \"NFT/approveMFT\",\r\n  //@ts-ignore\r\n  async ({ tokenId, address }: IapproveNFT, { dispatch }) => {\r\n    let nftContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        nftContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(address));\r\n      }\r\n    }\r\n    try {\r\n      let enterTx = await nftContract\r\n        .approve(SHASTA_TESTNET.MEOW_ADDRESS, tokenId)\r\n        .send({ feeLimit: 100000000 });\r\n\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          if (transaction && transaction.ret && transaction.ret.length > 0) {\r\n            receipt = transaction.ret[0].contractRet;\r\n          }\r\n          console.log(\"receipt: \", receipt, enterTx);\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      notification({ title: \"Successfully approved!\", type: \"success\" });\r\n      return;\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n    }\r\n  }\r\n);\r\n\r\ninterface IloadNftAllowance {\r\n  tokenIds: Number[];\r\n  index: number;\r\n}\r\n\r\nexport const loadNftAllowance = createAsyncThunk(\r\n  \"app/loadNftAllowance\",\r\n  //@ts-ignore\r\n  async ({ tokenIds, index }: IloadNftAllowance) => {\r\n    let approvedList: any[] = [];\r\n    await instance\r\n      .get(`/api/approved`)\r\n      .then((response) => {\r\n        approvedList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    let allows: boolean[] = [false];\r\n    let nftContract: any;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        nftContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(approvedList[index].address));\r\n      }\r\n    }\r\n    await Promise.all(\r\n      tokenIds.map(async (tokenId, idn) => {\r\n        let allowtmp = await nftContract.getApproved(tokenId).call();\r\n        allows[idn] =\r\n          allowtmp === tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS);\r\n      })\r\n    );\r\n    return {\r\n      allowances: allows,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nexport interface INFTSlice {\r\n  allowances: boolean[];\r\n  loading: boolean;\r\n}\r\n\r\nconst nftSlice = createSlice({\r\n  name: \"nft\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadNftAllowance.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadNftAllowance.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadNftAllowance.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.nft;\r\n\r\nexport default nftSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (nft) => nft);\r\n","export const getDate = () => {\r\n  let date = new Date();\r\n  let year = date.getFullYear();\r\n  let month = date.getMonth() + 1;\r\n  let day = date.getDate();\r\n  let hour = date.getHours();\r\n  let minute = date.getMinutes();\r\n  let second = date.getSeconds();\r\n  let number =\r\n    year * Math.pow(10, 10) +\r\n    month * Math.pow(10, 8) +\r\n    day * Math.pow(10, 6) +\r\n    hour * Math.pow(10, 4) +\r\n    minute * Math.pow(10, 2) +\r\n    second;\r\n  return number;\r\n};\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { metamaskErrorWrap } from \"helpers/metamask-error-wrap\";\r\nimport { clearPendingTxn } from \"./pending-txns-slice\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\nimport tronWeb from \"tronweb\";\r\nimport { notification } from \"utils/notification\";\r\nimport instance from \"constants/axios\";\r\n\r\ninterface IenterRoomMeow {\r\n  tokenId: number;\r\n  fightRoom: number;\r\n  whichroom: number;\r\n  url: string;\r\n  address: any;\r\n  gamePrice: number;\r\n  nftAddress: string;\r\n  nftName: string;\r\n}\r\n\r\ndeclare var window: any;\r\n\r\nexport const EnterRoom = createAsyncThunk(\r\n  \"enterRoom/enterRoomMeow\",\r\n  async (\r\n    {\r\n      tokenId,\r\n      fightRoom,\r\n      whichroom,\r\n      url,\r\n      address,\r\n      gamePrice,\r\n      nftAddress,\r\n      nftName,\r\n    }: IenterRoomMeow,\r\n    { dispatch }\r\n  ) => {\r\n    console.log(\r\n      \"enterRoom data: \",\r\n      tokenId,\r\n      fightRoom,\r\n      whichroom,\r\n      url,\r\n      nftAddress,\r\n      gamePrice\r\n    );\r\n    let meowContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    let enterTx;\r\n    try {\r\n      enterTx = await meowContract\r\n        .enterRoom(tokenId, fightRoom, nftAddress)\r\n        .send({ feeLimit: 2000000000, callValue: gamePrice });\r\n\r\n      let receipt = null;\r\n      let attempts = 0;\r\n      while ((receipt === \"REVERT\" || receipt == null) && attempts < 1000) {\r\n        // give up after 10 attempts\r\n        if (window.tronWeb) {\r\n          await new Promise((resolve) => setTimeout(resolve, 2000));\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          if (transaction && transaction.ret && transaction.ret.length > 0) {\r\n            receipt = transaction.ret[0].contractRet;\r\n          }\r\n          console.log(\"receipt: \", receipt, enterTx);\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n        attempts++;\r\n      }\r\n      const random_tmp = (\r\n        await meowContract.randoms(fightRoom, 0).call()\r\n      ).toNumber();\r\n      await instance.post(\"/api/betting/create\", {\r\n        roomNum: whichroom,\r\n        firstNFT: url,\r\n        firstAddress: address,\r\n        fightRoom: fightRoom,\r\n        firstRandom: random_tmp,\r\n        tokenId: tokenId,\r\n        nftAddress: nftAddress,\r\n        nftName: nftName,\r\n      });\r\n      notification({ title: \"Successfully Entered!\", type: \"success\" });\r\n      return;\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n      if (enterTx) {\r\n        dispatch(clearPendingTxn(enterTx.hash));\r\n      }\r\n    }\r\n  }\r\n);\r\n","import { Box, Button, Skeleton, Tab, Tabs } from \"@mui/material\";\r\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { avatarsStyle, modalAvatarStyle, style } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { approveNFT, loadNftAllowance } from \"store/slices/NFt-slice\";\r\nimport { getDate } from \"./getDate\";\r\nimport { EnterRoom } from \"store/slices/enter-room-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nexport function SampleModal() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { account } = useWeb3React();\r\n  const [value, setValue] = useState(\"1\");\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n    setValue(newValue);\r\n  };\r\n  const nftids: any[][] = useSelector<IReduxState, any[][]>(\r\n    (state) => state.nfts.nftids\r\n  );\r\n  const nfturis: any[][] = useSelector<IReduxState, any[][]>(\r\n    (state) => state.nfts.nfturis\r\n  );\r\n  const baseUri: string[] = useSelector<IReduxState, string[]>(\r\n    (state) => state.nfts.nfturl\r\n  );\r\n  const approvedList: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.approvedList\r\n  );\r\n  const isLoading: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.nft.loading\r\n  );\r\n  const allowFlg: boolean[] = useSelector<IReduxState, boolean[]>(\r\n    (state) => state.nft.allowances\r\n  );\r\n  const openState: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.battle.openState\r\n  );\r\n  const whichroom: number = useSelector<IReduxState, number>(\r\n    (state) => state.battle.whichroom\r\n  );\r\n  const gamePrice: string = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.gameprice\r\n  );\r\n  const nftInfo: string[] = useSelector<IReduxState, string[]>(\r\n    (state) => state.wallet.nftInfo\r\n  );\r\n\r\n  const getAllowanceFlag = async(id: number) => {\r\n    await dispatch(loadNftAllowance({\r\n      tokenIds: nftids[id],\r\n      index: id\r\n    }));\r\n  }\r\n\r\n  const handleApproveNFT = useCallback(\r\n    async (id: Number, index: number, address: string) => {\r\n      await dispatch(\r\n        approveNFT({\r\n          tokenId: id,\r\n          address: address,\r\n        })\r\n      );\r\n      getAllowanceFlag(index);\r\n    },\r\n    [nftids]\r\n  );\r\n\r\n  const closeModal = useCallback(async () => {\r\n    dispatch(\r\n      loadBattleDetails({\r\n        openState: false,\r\n        claimState: false,\r\n        whichroom: 0,\r\n        whichfight: 0,\r\n        waitingRandom: 0,\r\n        waitingNft: '',\r\n        decide: false,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const onEnterRoom = useCallback(\r\n    async (index: number, id: number) => {\r\n      let fightRoomNum = getDate();\r\n      await dispatch(\r\n        EnterRoom({\r\n          tokenId: id,\r\n          fightRoom: fightRoomNum,\r\n          whichroom: whichroom,\r\n          url: `https://ipfs.io/ipfs/${baseUri[index]?.slice(7, 53)}/${id}.png`,\r\n          address: account,\r\n          gamePrice: Number(gamePrice),\r\n          nftAddress: approvedList[index].address,\r\n          nftName: approvedList[index].name,\r\n        })\r\n      );\r\n    },\r\n    [gamePrice, baseUri, account, whichroom]\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      open={openState}\r\n      onClose={() => {\r\n        closeModal();\r\n      }}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box sx={style}>\r\n        <TabContext value={value}>\r\n          <TabList onChange={handleChange}>\r\n            <Tabs variant=\"scrollable\" scrollButtons allowScrollButtonsMobile>\r\n              {approvedList?.map((approve, index) => {\r\n                return (\r\n                  <Tab\r\n                    label={approve.name}\r\n                    value={`${index + 1}`}\r\n                    sx={{\r\n                      color: \"white\",\r\n                      fontSize: \"18px\",\r\n                      backgroundColor: \"#111\",\r\n                      mr: \"8px\",\r\n                    }}\r\n                    key={index}\r\n                    onClick={() => {getAllowanceFlag(index)}}\r\n                  />\r\n                );\r\n              })}\r\n            </Tabs>\r\n          </TabList>\r\n          {approvedList?.map((approve, index) => {\r\n            return (\r\n              <TabPanel value={`${index + 1}`} key={index} >\r\n                <Box sx={avatarsStyle}>\r\n                  {nftInfo &&\r\n                    nftInfo.map((info: string, index0) => {\r\n                      return (\r\n                        <Box\r\n                          sx={{\r\n                            m: 2,\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                          }}\r\n                          key={index0}\r\n                        >\r\n                          <Box\r\n                            sx={{\r\n                              mb: 2,\r\n                              display: \"flex\",\r\n                              flexDirection: \"column\",\r\n                            }}\r\n                          >\r\n                            <Box\r\n                              component=\"img\"\r\n                              src={`https://ipfs.io/ipfs/${baseUri[index0]?.slice(\r\n                                7,\r\n                                53\r\n                              )}/${info.split('@')[1]}.png`}\r\n                              alt=\"NFT_avatar\"\r\n                              sx={modalAvatarStyle}\r\n                            />\r\n                          </Box>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              onEnterRoom(index, Number(info.split('@')[1]));\r\n                              closeModal();\r\n                            }}\r\n                          >\r\n                            Fight\r\n                          </Button>\r\n                        </Box>\r\n                      );\r\n                    })}\r\n                </Box>\r\n                <Box sx={avatarsStyle}>\r\n                  {nftids[index] &&\r\n                    nftids[index].map((id: number, index1) => {\r\n                      return (\r\n                        <Box\r\n                          sx={{\r\n                            m: 2,\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                          }}\r\n                          key={index1}\r\n                        >\r\n                          <Box\r\n                            sx={{\r\n                              mb: 2,\r\n                              display: \"flex\",\r\n                              flexDirection: \"column\",\r\n                            }}\r\n                          >\r\n                            {nfturis[index] ? (\r\n                              <Box\r\n                                component=\"img\"\r\n                                src={nfturis[index]?.[index1]}\r\n                                alt=\"NFT_avatar\"\r\n                                sx={modalAvatarStyle}\r\n                              />\r\n                            ) : (\r\n                              <Skeleton sx={modalAvatarStyle} />\r\n                            )}\r\n                          </Box>\r\n                          {isLoading ? (\r\n                            <Skeleton height=\"36px\" />\r\n                          ) : (\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              onClick={\r\n                                allowFlg[index1]\r\n                                  ? () => {\r\n                                      onEnterRoom(index, id);\r\n                                      closeModal();\r\n                                    }\r\n                                  : () => handleApproveNFT(id, index, approve.address)\r\n                              }\r\n                            >\r\n                              {allowFlg[index1] ? \"Fight\" : \"Approve\"}\r\n                            </Button>\r\n                          )}\r\n                        </Box>\r\n                      );\r\n                    })}\r\n                </Box>\r\n              </TabPanel>\r\n            );\r\n          })}\r\n        </TabContext>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n}\r\n","import { Box, Button, Skeleton, Tabs, Tab } from \"@mui/material\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { avatarsStyle, modalAvatarStyle, style } from \"./style\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { approveNFT, loadNftAllowance } from \"store/slices/NFt-slice\";\r\nimport { ClaimFight } from \"store/slices/play-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\n\r\nexport function BigRoomModal() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { account } = useWeb3React();\r\n  const [value, setValue] = useState(\"1\");\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const nftids: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nftids\r\n  );\r\n  const nfturis: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nfturis\r\n  );\r\n  const isLoading: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.nft.loading\r\n  );\r\n  const allowFlg: boolean[] = useSelector<IReduxState, boolean[]>(\r\n    (state) => state.nft.allowances\r\n  );\r\n  const whichroom: number = useSelector<IReduxState, number>(\r\n    (state) => state.battle.whichroom\r\n  );\r\n  const gamePrice: string = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.gameprice\r\n  );\r\n  const claimState: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.battle.claimState\r\n  );\r\n  const waitingNft: string = useSelector<IReduxState, string>(\r\n    (state) => state.battle.waitingNft\r\n  );\r\n  const whichfight: number = useSelector<IReduxState, number>(\r\n    (state) => state.battle.whichfight\r\n  );\r\n  const waitingRandom: number = useSelector<IReduxState, number>(\r\n    (state) => state.battle.waitingRandom\r\n  );\r\n  const nftInfo: string[] = useSelector<IReduxState, string[]>(\r\n    (state) => state.wallet.nftInfo\r\n  );\r\n  const baseUri: string[] = useSelector<IReduxState, string[]>(\r\n    (state) => state.nfts.nfturl\r\n  );\r\n  const approvedList: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.approvedList\r\n  );\r\n\r\n  const closeModal = useCallback(async () => {\r\n    dispatch(\r\n      loadBattleDetails({\r\n        openState: false,\r\n        claimState: false,\r\n        whichroom: 0,\r\n        whichfight: 0,\r\n        waitingRandom: 0,\r\n        waitingNft: '',\r\n        decide: false,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const onClaimFight = useCallback(\r\n    async (index: number, id: number) => {\r\n      await dispatch(\r\n        ClaimFight({\r\n          tokenId: id,\r\n          fightRoom: whichfight,\r\n          whichroom: whichroom,\r\n          url: `https://ipfs.io/ipfs/${baseUri[index]?.slice(7, 53)}/${id}.png`,\r\n          waitingRandom: waitingRandom,\r\n          address: account,\r\n          gamePrice: Number(gamePrice),\r\n          nftAddress: approvedList[index].address,\r\n        })\r\n      );\r\n    },\r\n    [gamePrice, baseUri, account, whichroom, whichfight, waitingRandom]\r\n  );\r\n\r\n  const getAllowanceFlag = async(id: number) => {\r\n    await dispatch(loadNftAllowance({\r\n      tokenIds: nftids[id],\r\n      index: id\r\n    }));\r\n  }\r\n\r\n  const handleApproveNFT = useCallback(\r\n    async (id: Number, index: number, address: string) => {\r\n      await dispatch(\r\n        approveNFT({\r\n          tokenId: id,\r\n          address: address,\r\n        })\r\n      );\r\n      getAllowanceFlag(index);\r\n    },\r\n    [nftids]\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      open={claimState}\r\n      onClose={() => {\r\n        closeModal();\r\n      }}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box sx={style}>\r\n      <TabContext value={value}>\r\n          <TabList onChange={handleChange}>\r\n            <Tabs variant=\"scrollable\" scrollButtons allowScrollButtonsMobile>\r\n              {approvedList?.map((approve, index) => {\r\n                if(approve.address !== waitingNft) return null;\r\n                return (\r\n                  <Tab\r\n                    label={approve.name}\r\n                    value={`${index + 1}`}\r\n                    sx={{\r\n                      color: \"white\",\r\n                      fontSize: \"18px\",\r\n                      backgroundColor: \"#111\",\r\n                      mr: \"8px\",\r\n                    }}\r\n                    key={index}\r\n                    onClick={() => {getAllowanceFlag(index)}}\r\n                  />\r\n                );\r\n              })}\r\n            </Tabs>\r\n          </TabList>\r\n          {approvedList?.map((approve, index) => {\r\n            if(approve.address !== waitingNft) return null;\r\n            return (\r\n              <TabPanel value={`${index + 1}`} key={index} >\r\n                <Box sx={avatarsStyle}>\r\n                  {nftInfo &&\r\n                    nftInfo.map((info: string, index0) => {\r\n                      return (\r\n                        <Box\r\n                          sx={{\r\n                            m: 2,\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                          }}\r\n                          key={index0}\r\n                        >\r\n                          <Box\r\n                            sx={{\r\n                              mb: 2,\r\n                              display: \"flex\",\r\n                              flexDirection: \"column\",\r\n                            }}\r\n                          >\r\n                            <Box\r\n                              component=\"img\"\r\n                              src={`https://ipfs.io/ipfs/${baseUri[index0]?.slice(\r\n                                7,\r\n                                53\r\n                              )}/${info.split('@')[1]}.png`}\r\n                              alt=\"NFT_avatar\"\r\n                              sx={modalAvatarStyle}\r\n                            />\r\n                          </Box>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              onClaimFight(index, Number(info.split('@')[1]));\r\n                              closeModal();\r\n                            }}\r\n                          >\r\n                            Fight\r\n                          </Button>\r\n                        </Box>\r\n                      );\r\n                    })}\r\n                </Box>\r\n                <Box sx={avatarsStyle}>\r\n                  {nftids[index] &&\r\n                    nftids[index].map((id: number, index1: number) => {\r\n                      return (\r\n                        <Box\r\n                          sx={{\r\n                            m: 2,\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                          }}\r\n                          key={index1}\r\n                        >\r\n                          <Box\r\n                            sx={{\r\n                              mb: 2,\r\n                              display: \"flex\",\r\n                              flexDirection: \"column\",\r\n                            }}\r\n                          >\r\n                            {nfturis[index] ? (\r\n                              <Box\r\n                                component=\"img\"\r\n                                src={nfturis[index]?.[index1]}\r\n                                alt=\"NFT_avatar\"\r\n                                sx={modalAvatarStyle}\r\n                              />\r\n                            ) : (\r\n                              <Skeleton sx={modalAvatarStyle} />\r\n                            )}\r\n                          </Box>\r\n                          {isLoading ? (\r\n                            <Skeleton height=\"36px\" />\r\n                          ) : (\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              onClick={\r\n                                allowFlg[index1]\r\n                                  ? () => {\r\n                                      onClaimFight(index, id);\r\n                                      closeModal();\r\n                                    }\r\n                                  : () => handleApproveNFT(id, index, approve.address)\r\n                              }\r\n                            >\r\n                              {allowFlg[index1] ? \"Fight\" : \"Approve\"}\r\n                            </Button>\r\n                          )}\r\n                        </Box>\r\n                      );\r\n                    })}\r\n                </Box>\r\n              </TabPanel>\r\n            );\r\n          })}\r\n        </TabContext>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n}\r\n","export const Datas = [\r\n  {\r\n    roomNum: 1,\r\n    firstNFT: \"\",\r\n    secondNFT: \"\",\r\n    firstAddress: \"\",\r\n    secondAddress: \"\",\r\n    nftAddress: \"\",\r\n    nftName: \"\",\r\n    firstRandom: 0,\r\n    secondRandom: 0,\r\n    tokenId: 0,\r\n    fightRoom: 0,\r\n    whichfight: 0,\r\n  },\r\n  {\r\n    roomNum: 2,\r\n    firstNFT: \"\",\r\n    secondNFT: \"\",\r\n    firstAddress: \"\",\r\n    secondAddress: \"\",\r\n    nftAddress: \"\",\r\n    nftName: \"\",\r\n    firstRandom: 0,\r\n    secondRandom: 0,\r\n    tokenId: 0,\r\n    fightRoom: 0,\r\n    whichfight: 0,\r\n  },\r\n  {\r\n    roomNum: 3,\r\n    firstNFT: \"\",\r\n    secondNFT: \"\",\r\n    firstAddress: \"\",\r\n    secondAddress: \"\",\r\n    nftAddress: \"\",\r\n    nftName: \"\",\r\n    firstRandom: 0,\r\n    secondRandom: 0,\r\n    tokenId: 0,\r\n    whichfight: 0,\r\n    fightRoom: 0,\r\n  },\r\n  {\r\n    roomNum: 4,\r\n    firstNFT: \"\",\r\n    secondNFT: \"\",\r\n    firstAddress: \"\",\r\n    secondAddress: \"\",\r\n    nftAddress: \"\",\r\n    nftName: \"\",\r\n    firstRandom: 0,\r\n    secondRandom: 0,\r\n    tokenId: 0,\r\n    fightRoom: 0,\r\n    whichfight: 0,\r\n  },\r\n  {\r\n    roomNum: 5,\r\n    firstNFT: \"\",\r\n    secondNFT: \"\",\r\n    firstAddress: \"\",\r\n    secondAddress: \"\",\r\n    nftAddress: \"\",\r\n    nftName: \"\",\r\n    firstRandom: 0,\r\n    secondRandom: 0,\r\n    tokenId: 0,\r\n    fightRoom: 0,\r\n    whichfight: 0,\r\n  },\r\n  {\r\n    roomNum: 6,\r\n    firstNFT: \"\",\r\n    secondNFT: \"\",\r\n    firstAddress: \"\",\r\n    secondAddress: \"\",\r\n    nftAddress: \"\",\r\n    nftName: \"\",\r\n    firstRandom: 0,\r\n    secondRandom: 0,\r\n    tokenId: 0,\r\n    fightRoom: 0,\r\n    whichfight: 0,\r\n  },\r\n  {\r\n    roomNum: 7,\r\n    firstNFT: \"\",\r\n    secondNFT: \"\",\r\n    firstAddress: \"\",\r\n    secondAddress: \"\",\r\n    nftAddress: \"\",\r\n    nftName: \"\",\r\n    firstRandom: 0,\r\n    secondRandom: 0,\r\n    tokenId: 0,\r\n    fightRoom: 0,\r\n    whichfight: 0,\r\n  },\r\n  {\r\n    roomNum: 8,\r\n    firstNFT: \"\",\r\n    secondNFT: \"\",\r\n    firstAddress: \"\",\r\n    secondAddress: \"\",\r\n    nftAddress: \"\",\r\n    nftName: \"\",\r\n    firstRandom: 0,\r\n    secondRandom: 0,\r\n    tokenId: 0,\r\n    fightRoom: 0,\r\n    whichfight: 0,\r\n  },\r\n];\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport tronWeb from \"tronweb\";\r\nimport instance from \"constants/axios\";\r\n\r\ndeclare var window: any;\r\n\r\ninterface IloadNftDetails {\r\n  account: any;\r\n}\r\n\r\nexport const loadNftDetails = createAsyncThunk(\r\n  \"nft/loadNftDetails\",\r\n  async ({ account }: IloadNftDetails) => {\r\n    let approvedList: any[] = [];\r\n    await instance\r\n      .get(`/api/approved`)\r\n      .then((response) => {\r\n        approvedList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    let nftids: any[][] = [];\r\n    let nfturl: string[] = [];\r\n    let nfturis: any[][] = [];\r\n\r\n    for (let j = 0; j < approvedList.length; j++) {\r\n      nftids.push([]);\r\n      nfturis.push([]);\r\n      let nftContract;\r\n      if (window) {\r\n        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n          nftContract = await window.tronWeb\r\n            .contract()\r\n            .at(tronWeb.address.toHex(approvedList[j].address));\r\n        }\r\n      }\r\n      nfturl[j] = await nftContract.tokenURI(1).call();\r\n      const nft_counts = await nftContract.balanceOf(account).call();\r\n      for (let i = 0; i < Math.min(nft_counts, 6); i++) {\r\n        let tmptokenID = await nftContract\r\n          .tokenOfOwnerByIndex(account, i)\r\n          .call();\r\n        nftids[j][i] = tronWeb.toDecimal(tmptokenID);\r\n      }\r\n      for (let i = 0; i < Math.min(nft_counts, 6); i++) {\r\n        nfturis[j][i] = `https://ipfs.io/ipfs/${nfturl[j].slice(7, 53)}/${\r\n          nftids[j][i]\r\n        }.png`;\r\n      }\r\n    }\r\n    return {\r\n      nftids,\r\n      nfturis,\r\n      nfturl,\r\n      approvedList,\r\n    };\r\n  }\r\n);\r\n\r\nexport interface INftDetailSlice {\r\n  nftids: any[][];\r\n  nfturis: any[][];\r\n  nfturl: string[];\r\n  approvedList: any[];\r\n  // contractNFTs: number;\r\n}\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nconst nftSlice = createSlice({\r\n  name: \"nft\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadNftDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadNftDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadNftDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.nfts;\r\n\r\nexport default nftSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (nfts) => nfts);\r\n","import { useCallback } from \"react\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport roomPic from \"assets/images/Ui_box3.webp\";\r\nimport buttonBack from \"assets/images/button.png\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"state\";\r\nimport { Datas } from \"./Datas\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport { loadNftDetails } from \"store/slices/Nftinfo-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport {\r\n  fightStyle,\r\n  randomNumberStyle,\r\n  roomStyleAvatar,\r\n  roomStyleBack,\r\n  buttonStyle,\r\n  randomNumberPosStyle,\r\n  roomContentTop,\r\n  buttonWidthStyle,\r\n} from \"./style\";\r\nimport { loadNftAllowance } from \"store/slices/NFt-slice\";\r\nimport { gameDataStyle } from \"@types\";\r\n\r\nexport function SmallRooms() {\r\n  const { account } = useWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const gameData: gameDataStyle[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.app.gameData\r\n  );\r\n  const nftids: any[][] = useSelector<IReduxState, any[][]>(\r\n    (state) => state.nfts.nftids\r\n  );\r\n\r\n  const onEnterModal = useCallback(\r\n    async (index: number) => {\r\n      await dispatch(loadNftDetails({ account: account }));\r\n      await dispatch(\r\n        loadNftAllowance({\r\n          tokenIds: nftids ? nftids[0] : [],\r\n          index: 0,\r\n        })\r\n      );\r\n      await dispatch(\r\n        loadBattleDetails({\r\n          openState: true,\r\n          whichroom: index + 1,\r\n          claimState: false,\r\n          whichfight: 0,\r\n          waitingRandom: 0,\r\n          waitingNft: \"\",\r\n          decide: false,\r\n        })\r\n      );\r\n    },\r\n    [account, nftids]\r\n  );\r\n\r\n  const onClaimModal = useCallback(\r\n    async (\r\n      index: number,\r\n      fightRoom: number,\r\n      firstRandom: number,\r\n      waitingNft: string\r\n    ) => {\r\n      await dispatch(loadNftDetails({ account: account }));\r\n      await dispatch(\r\n        loadNftAllowance({\r\n          tokenIds: nftids ? nftids[0] : [],\r\n          index: 0,\r\n        })\r\n      );\r\n      await dispatch(\r\n        loadBattleDetails({\r\n          openState: false,\r\n          whichroom: index + 1,\r\n          claimState: true,\r\n          whichfight: fightRoom,\r\n          waitingRandom: firstRandom,\r\n          waitingNft: waitingNft,\r\n          decide: false,\r\n        })\r\n      );\r\n    },\r\n    [account, nftids]\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      display='flex'\r\n      justifyContent='space-around'\r\n      flexWrap='wrap'\r\n    >\r\n      {(gameData.length !== 0 ? gameData : Datas)?.map((data, index) => {\r\n        return (\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-start\"\r\n            border=\"1px solid white\"\r\n            bgcolor=\"RGB(255,255,255,0.1)\"\r\n            padding={1}\r\n            key={index}\r\n            mt={2}\r\n          >\r\n            <Box\r\n              sx={{\r\n                mr: { xs: \"4px\", sm: \"6px\", md: \"8px\", xl: \"12px\" },\r\n              }}\r\n              position=\"relative\"\r\n              display=\"flex\"\r\n              flexDirection=\"column\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Box component=\"img\" src={roomPic} sx={roomStyleBack} />\r\n              <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n                position=\"absolute\"\r\n                sx={roomContentTop}\r\n              >\r\n                {data.firstNFT !== \"\" ? (\r\n                  <Box\r\n                    component=\"img\"\r\n                    src={data.firstNFT}\r\n                    sx={roomStyleAvatar}\r\n                  />\r\n                ) : (\r\n                  <Box sx={roomStyleAvatar} alignItems=\"center\" display=\"flex\">\r\n                    <Typography sx={fightStyle}>Let's FIGHT</Typography>\r\n                  </Box>\r\n                )}\r\n                <Box\r\n                  sx={randomNumberPosStyle}\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  {(data.secondNFT === \"\" || data.secondNFT === undefined) ? (\r\n                    data.firstNFT !== \"\" && data.firstNFT !== undefined ? (\r\n                      <Typography sx={randomNumberStyle}>\r\n                        {data.nftName}\r\n                      </Typography>\r\n                    ) : (\r\n                      <Typography sx={randomNumberStyle}>\r\n                        Random\r\n                      </Typography>\r\n                    )\r\n                  ) : (\r\n                    <Typography sx={randomNumberStyle}>\r\n                      {data.firstRandom}\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n                <Button\r\n                  onClick={() => {\r\n                    onEnterModal(index);\r\n                  }}\r\n                  disabled={data.firstNFT !== \"\"}\r\n                  sx={buttonWidthStyle}\r\n                >\r\n                  <Box component=\"img\" src={buttonBack} width=\"100%\" />\r\n                  <Typography\r\n                    sx={buttonStyle}\r\n                    color={data.firstNFT ? \"white\" : \"yellow\"}\r\n                  >\r\n                    {data.secondRandom\r\n                      ? data.firstRandom > data.secondRandom\r\n                        ? \"Winner\"\r\n                        : \"Loser\"\r\n                      : data.firstAddress\r\n                      ? `${data.firstAddress.slice(\r\n                          0,\r\n                          4\r\n                        )}...${data.firstAddress.slice(-4)}`\r\n                      : \"Fight\"}\r\n                  </Typography>\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n            <Box\r\n              position=\"relative\"\r\n              display=\"flex\"\r\n              flexDirection=\"column\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Box component=\"img\" src={roomPic} sx={roomStyleBack} />\r\n              <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n                position=\"absolute\"\r\n                sx={roomContentTop}\r\n              >\r\n                {data.secondNFT !== \"\" && data.secondNFT !== undefined ? (\r\n                  <Box\r\n                    component=\"img\"\r\n                    src={data.secondNFT}\r\n                    sx={roomStyleAvatar}\r\n                  />\r\n                ) : (\r\n                  <Box sx={roomStyleAvatar} display=\"flex\" alignItems=\"center\">\r\n                    <Typography sx={fightStyle}>Let's FIGHT</Typography>\r\n                  </Box>\r\n                )}\r\n                <Box\r\n                  sx={randomNumberPosStyle}\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  {data.secondNFT !== \"\" && data.secondNFT !== undefined ? (\r\n                    <Typography sx={randomNumberStyle}>\r\n                      {data.secondRandom}\r\n                    </Typography>\r\n                  ) : (\r\n                    <Typography sx={randomNumberStyle}>\r\n                      Random\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n                <Button\r\n                  disabled={\r\n                    !(\r\n                      data.firstNFT !== \"\" ||\r\n                      data.secondAddress !== null ||\r\n                      false\r\n                    )\r\n                  }\r\n                  onClick={() => {\r\n                    onClaimModal(\r\n                      index,\r\n                      data.fightRoom,\r\n                      data.firstRandom,\r\n                      data.nftAddress\r\n                    );\r\n                  }}\r\n                  sx={buttonWidthStyle}\r\n                >\r\n                  <Box component=\"img\" src={buttonBack} width=\"100%\" />\r\n                  <Typography\r\n                    sx={buttonStyle}\r\n                    color={data.secondRandom ? \"white\" : \"yellow\"}\r\n                  >\r\n                    {data.secondRandom\r\n                      ? data.firstRandom > data.secondRandom\r\n                        ? \"Loser\"\r\n                        : \"Winner\"\r\n                      : \"Fight\"}\r\n                  </Typography>\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n","import { useCallback } from \"react\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport roomPic from \"assets/images/Ui_box3.webp\";\r\nimport { Timeline } from \"react-gsap\";\r\nimport buttonBack from \"assets/images/button.png\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport { loadNftDetails } from \"store/slices/Nftinfo-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { AppDispatch } from \"state\";\r\nimport { Datas } from \"./Datas\";\r\nimport {\r\n  fightStyle,\r\n  randomNumberStyle,\r\n  roomStyleAvatar,\r\n  roomStyleBack,\r\n  buttonStyle,\r\n  randomNumberPosStyle,\r\n  roomContentTop,\r\n  buttonWidthStyle,\r\n} from \"./style\";\r\nimport { loadNftAllowance } from \"store/slices/NFt-slice\";\r\nimport { gameDataStyle } from \"@types\";\r\n\r\nexport function BigRoom() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { account } = useWeb3React();\r\n\r\n  const firRandomData: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.fight.random1\r\n  );\r\n  const secRandomData: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.fight.random2\r\n  );\r\n  const gameData: gameDataStyle[] = useSelector<IReduxState, gameDataStyle[]>(\r\n    (state) => state.app.gameData\r\n  );\r\n  const decide: boolean = useSelector<IReduxState, boolean>(\r\n    (state) => state.battle.decide\r\n  );\r\n  const nftids: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.nfts.nftids\r\n  );\r\n\r\n  const onEnterModal = useCallback(async (index: number) => {\r\n    await dispatch(\r\n      loadBattleDetails({\r\n        openState: true,\r\n        whichroom: index + 1,\r\n        claimState: false,\r\n        whichfight: 0,\r\n        waitingRandom: 0,\r\n        waitingNft: '',\r\n        decide: false,\r\n      })\r\n    );\r\n    await dispatch(loadNftDetails({ account: account }));\r\n    // await dispatch(loadNftAllowance({ tokenIds: nftids }));\r\n  }, [account, nftids]);\r\n\r\n  const onClaimModal = useCallback(\r\n    async (index: number, fightRoom: number, firstRandom: number, waitingNft: string) => {\r\n      await dispatch(\r\n        loadBattleDetails({\r\n          openState: false,\r\n          whichroom: index + 1,\r\n          claimState: true,\r\n          whichfight: fightRoom,\r\n          waitingRandom: firstRandom,\r\n          waitingNft: waitingNft,\r\n          decide: false,\r\n        })\r\n      );\r\n      await dispatch(loadNftDetails({ account: account }));\r\n      // await dispatch(loadNftAllowance({ tokenIds: nftids }));\r\n    },\r\n    [account, nftids]\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      display='flex'\r\n      justifyContent='space-around'\r\n      flexWrap='wrap'\r\n    >\r\n      {Datas &&\r\n        Datas.map((data, index) => {\r\n          if (index < 4) return;\r\n          return (\r\n            <Box\r\n              display=\"flex\"\r\n              justifyContent=\"flex-start\"\r\n              border='1px solid white'\r\n              bgcolor='RGB(0,0,255,0.2)'\r\n              padding={1}\r\n              key={index}\r\n              mt={2}\r\n            >\r\n              <Box\r\n                sx={{\r\n                  mr: { xs: \"4px\", sm: \"6px\", md: \"8px\", xl: \"12px\" },\r\n                }}\r\n                position=\"relative\"\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Box component=\"img\" src={roomPic} sx={roomStyleBack} />\r\n                <Box\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  position=\"absolute\"\r\n                  alignItems=\"center\"\r\n                  sx={roomContentTop}\r\n                >\r\n                  {data.firstNFT !== \"\" ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={data.firstNFT}\r\n                      sx={roomStyleAvatar}\r\n                    />\r\n                  ) : (\r\n                    <Box\r\n                      sx={roomStyleAvatar}\r\n                      alignItems=\"center\"\r\n                      display=\"flex\"\r\n                    >\r\n                      <Timeline\r\n                        target={\r\n                          <Typography sx={fightStyle}>Let's FIGHT</Typography>\r\n                        }\r\n                        repeat={10000}\r\n                      >\r\n                      </Timeline>\r\n                    </Box>\r\n                  )}\r\n                  <Box\r\n                    sx={randomNumberPosStyle}\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    {data.firstNFT !== \"\" && data.firstNFT !== undefined ? (\r\n                      <Typography sx={randomNumberStyle}>\r\n                        {/* {random[index * 2]} */}\r\n                      </Typography>\r\n                    ) : (\r\n                      <Typography sx={randomNumberStyle}>\r\n                        Random\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                  <Button\r\n                    onClick={() => {\r\n                      onEnterModal(index);\r\n                    }}\r\n                    disabled={data.firstNFT !== \"\" ? true : false}\r\n                    sx={buttonWidthStyle}\r\n                  >\r\n                    <Box component=\"img\" src={buttonBack} width=\"100%\" />\r\n                    <Typography\r\n                      sx={buttonStyle}\r\n                      color={data.firstNFT ? \"white\" : \"yellow\"}\r\n                    >\r\n                      {firRandomData &&\r\n                      decide &&\r\n                      !(\r\n                        firRandomData[index + 1] === undefined ||\r\n                        firRandomData[index + 1] === 0\r\n                      )\r\n                        ? firRandomData[index + 1] > secRandomData[index + 1]\r\n                          ? \"Winner\"\r\n                          : firRandomData[index + 1] === secRandomData[index + 1]\r\n                          ? \"Draw\"\r\n                          : \"Loser\"\r\n                        : data.secondAddress === \"\" ||\r\n                          data.secondAddress === null ||\r\n                          data.secondAddress === undefined\r\n                        ? data.firstAddress === \"\"\r\n                          ? \"Fight\"\r\n                          : `${data.firstAddress?.slice(\r\n                              0,\r\n                              4\r\n                            )}...${data.firstAddress?.slice(-4)}`\r\n                        : \"Fighting...\"}\r\n                    </Typography>\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n              <Box\r\n                position=\"relative\"\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Box component=\"img\" src={roomPic} sx={roomStyleBack} />\r\n                <Box\r\n                  display=\"flex\"\r\n                  alignItems=\"center\"\r\n                  flexDirection=\"column\"\r\n                  position=\"absolute\"\r\n                  sx={roomContentTop}\r\n                >\r\n                  {data.secondNFT !== \"\" && data.secondNFT !== undefined ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      src={data.secondNFT}\r\n                      sx={roomStyleAvatar}\r\n                    />\r\n                  ) : (\r\n                    <Box\r\n                      sx={roomStyleAvatar}\r\n                      display=\"flex\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Timeline\r\n                        target={\r\n                          <Typography sx={fightStyle}>Let's FIGHT</Typography>\r\n                        }\r\n                        repeat={10000}\r\n                      >\r\n                      </Timeline>\r\n                    </Box>\r\n                  )}\r\n                  <Box\r\n                    sx={randomNumberPosStyle}\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Typography sx={randomNumberStyle}>\r\n                      Random\r\n                    </Typography>\r\n                  </Box>\r\n                  <Button\r\n                    disabled={\r\n                      !(\r\n                        data.firstNFT !== \"\" ||\r\n                        data.secondAddress !== null ||\r\n                        data.secondAddress === undefined\r\n                      )\r\n                        ? true\r\n                        : false\r\n                    }\r\n                    onClick={() => {\r\n                      onClaimModal(index, data.fightRoom, data.firstRandom, data.nftAddress);\r\n                    }}\r\n                    sx={buttonWidthStyle}\r\n                  >\r\n                    <Box component=\"img\" src={buttonBack} width=\"100%\" />\r\n                    <Typography\r\n                      sx={buttonStyle}\r\n                      color={\r\n                        secRandomData && secRandomData[index + 1]\r\n                          ? \"white\"\r\n                          : \"yellow\"\r\n                      }\r\n                    >\r\n                      {secRandomData &&\r\n                      decide &&\r\n                      !(\r\n                        secRandomData[index + 1] === undefined ||\r\n                        secRandomData[index + 1] === 0\r\n                      )\r\n                        ? firRandomData[index + 1] > secRandomData[index + 1]\r\n                          ? \"Loser\"\r\n                          : firRandomData[index + 1] === secRandomData[index + 1]\r\n                          ? \"Draw\"\r\n                          : \"Winner\"\r\n                        : data.secondAddress === \"\" ||\r\n                          data.secondAddress === null ||\r\n                          data.secondAddress === undefined\r\n                        ? \"Fight\"\r\n                        : \"Fighting...\"}\r\n                    </Typography>\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            </Box>\r\n          );\r\n        })}\r\n    </Box>\r\n  );\r\n}\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { gameDataStyle } from \"@types\";\r\n\r\nexport const loadGameDetails = createAsyncThunk(\r\n  \"game/loadGameDetails\",\r\n  async ({ gameData }: IAppSlice) => {\r\n    let tmpgameData: gameDataStyle[] = [];\r\n    await instance\r\n      .get(\"/api/betting\")\r\n      .then((response) => {\r\n        tmpgameData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    let maxRoomNum = 0;\r\n    for (let i = 0; i < tmpgameData.length; i++) {\r\n      maxRoomNum = Math.max(tmpgameData[i].roomNum, maxRoomNum);\r\n    }\r\n    for (let i = 0; i < Math.max(4, maxRoomNum + 2); i++) {\r\n      let newGameData: gameDataStyle = {\r\n        roomNum: 0,\r\n        firstNFT: \"\",\r\n        secondNFT: \"\",\r\n        firstAddress: \"\",\r\n        secondAddress: \"\",\r\n        nftAddress: \"\",\r\n        nftName: \"\",\r\n        firstRandom: 0,\r\n        secondRandom: 0,\r\n        tokenId: 0,\r\n        fightRoom: 0,\r\n        createdAt: \"\",\r\n        flag: false,\r\n      };\r\n      gameData.push(newGameData);\r\n    }\r\n    let tmpcnt = 0;\r\n    for (let i = 0; i < Math.max(4, maxRoomNum + 2); i++) {\r\n      if (i + 1 === tmpgameData[tmpcnt]?.roomNum) {\r\n        gameData[i].roomNum = tmpgameData[tmpcnt].roomNum;\r\n        gameData[i].firstNFT = tmpgameData[tmpcnt]?.firstNFT;\r\n        gameData[i].firstAddress = tmpgameData[tmpcnt]?.firstAddress;\r\n        gameData[i].nftAddress = tmpgameData[tmpcnt]?.nftAddress;\r\n        gameData[i].nftName = tmpgameData[tmpcnt]?.nftName;\r\n        gameData[i].firstRandom = tmpgameData[tmpcnt]?.firstRandom;\r\n        gameData[i].fightRoom = tmpgameData[tmpcnt]?.fightRoom;\r\n        gameData[i].tokenId = tmpgameData[tmpcnt]?.tokenId;\r\n        gameData[i].secondNFT = tmpgameData[tmpcnt]?.secondNFT;\r\n        gameData[i].secondAddress = tmpgameData[tmpcnt]?.secondAddress;\r\n        gameData[i].secondRandom = tmpgameData[tmpcnt]?.secondRandom;\r\n        gameData[i].createdAt = tmpgameData[tmpcnt]?.createdAt;\r\n        tmpcnt++;\r\n      }\r\n    }\r\n    return {\r\n      gameData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean;\r\n  gameData: gameDataStyle[];\r\n} = {\r\n  loading: true,\r\n  gameData: [],\r\n};\r\n\r\nexport interface IAppSlice {\r\n  gameData: gameDataStyle[];\r\n}\r\n\r\nconst gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState,\r\n  reducers: {\r\n    updateGameData(state, action) {\r\n      let updatedData: gameDataStyle = {\r\n        roomNum: 0,\r\n        firstNFT: \"\",\r\n        secondNFT: \"\",\r\n        firstAddress: \"\",\r\n        secondAddress: \"\",\r\n        nftAddress: \"\",\r\n        nftName: \"\",\r\n        firstRandom: 0,\r\n        secondRandom: 0,\r\n        tokenId: 0,\r\n        fightRoom: 0,\r\n        createdAt: \"\",\r\n        flag: false,\r\n      };\r\n      if (action.payload.delRoomNum > 0) {\r\n        updatedData.roomNum = action.payload.delRoomNum;\r\n      } else {\r\n        updatedData = action.payload;\r\n      }\r\n      const index = state.gameData.findIndex(\r\n        (data) => data.roomNum === updatedData.roomNum\r\n      );\r\n      if (index < 0) {\r\n        state.gameData[updatedData.roomNum - 1] = updatedData;\r\n      } else {\r\n        state.gameData[index] = updatedData;\r\n      }\r\n\r\n      let maxRoomNum = 0;\r\n      let emptyData: gameDataStyle = {\r\n        roomNum: 0,\r\n        firstNFT: \"\",\r\n        secondNFT: \"\",\r\n        firstAddress: \"\",\r\n        secondAddress: \"\",\r\n        nftAddress: \"\",\r\n        nftName: \"\",\r\n        firstRandom: 0,\r\n        secondRandom: 0,\r\n        tokenId: 0,\r\n        fightRoom: 0,\r\n        createdAt: \"\",\r\n        flag: false,\r\n      };\r\n      for (let i = 0; i < state.gameData.length; i++) {\r\n        maxRoomNum = Math.max(state.gameData[i].roomNum, maxRoomNum);\r\n      }\r\n      for (let i = 0; i < Math.max(4, maxRoomNum + 2); i++) {\r\n        if (state.gameData[i] === undefined) {\r\n          state.gameData[i] = emptyData;\r\n        }\r\n      }\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadGameDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadGameDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadGameDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.app;\r\n\r\nexport default gameSlice.reducer;\r\n\r\nexport const { updateGameData } = gameSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (app) => app);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { randomDataStyle } from \"@types\";\r\n\r\nexport const loadRandomDetails = createAsyncThunk(\r\n  \"random/loadRandomDetails\",\r\n  async ({ randomData }: IRandomSlice) => {\r\n    await instance\r\n      .get(\"/api/random\")\r\n      .then((response) => {\r\n        randomData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return {\r\n      randomData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean;\r\n  randomData: randomDataStyle[];\r\n} = {\r\n  loading: true,\r\n  randomData: [],\r\n};\r\n\r\nexport interface IRandomSlice {\r\n  randomData: randomDataStyle[];\r\n}\r\n\r\nconst randomSlice = createSlice({\r\n  name: \"random\",\r\n  initialState,\r\n  reducers: {\r\n    updateRandomData(state, action) {\r\n      let updatedData: randomDataStyle = action.payload;\r\n\r\n      state.randomData.unshift(updatedData);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadRandomDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadRandomDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadRandomDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.random;\r\n\r\nexport default randomSlice.reducer;\r\n\r\nexport const { updateRandomData } = randomSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (random) => random);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { resultDataStyle } from \"@types\";\r\n\r\nexport const loadResultDetails = createAsyncThunk(\r\n  \"result/loadResultDetails\",\r\n  async ({ resultData, myResultData, address }: IResultSlice) => {\r\n    await instance\r\n      .get(\"/api/result\")\r\n      .then((response) => {\r\n        resultData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    await instance\r\n      .get(`/api/result/myresult?address=${address}`)\r\n      .then((response) => {\r\n        myResultData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return {\r\n      resultData,\r\n      myResultData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean;\r\n  resultData: resultDataStyle[];\r\n  myResultData: resultDataStyle[];\r\n  address: any;\r\n} = {\r\n  loading: true,\r\n  resultData: [],\r\n  myResultData: [],\r\n  address: \"\",\r\n};\r\n\r\nexport interface IResultSlice {\r\n  resultData: resultDataStyle[];\r\n  myResultData: resultDataStyle[];\r\n  address: any;\r\n}\r\n\r\nconst resultSlice = createSlice({\r\n  name: \"result\",\r\n  initialState,\r\n  reducers: {\r\n    updateResultData(state, action) {\r\n      let updatedData: resultDataStyle = action.payload;\r\n\r\n      state.resultData.unshift(updatedData);\r\n      state.resultData.pop();\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadResultDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadResultDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadResultDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.result;\r\n\r\nexport default resultSlice.reducer;\r\n\r\nexport const { updateResultData } = resultSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (result) => result);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { winnerDataStyle } from \"@types\";\r\n\r\nexport const loadWinnerDetails = createAsyncThunk(\r\n  \"winner/loadWinnerDetails\",\r\n  async ({ winnerData }: IWinnerSlice) => {\r\n    await instance\r\n      .get(\"/api/winner\")\r\n      .then((response) => {\r\n        winnerData = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    return {\r\n      winnerData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean;\r\n  winnerData: winnerDataStyle[];\r\n} = {\r\n  loading: true,\r\n  winnerData: [],\r\n};\r\n\r\nexport interface IWinnerSlice {\r\n  winnerData: winnerDataStyle[];\r\n}\r\n\r\nconst winnerSlice = createSlice({\r\n  name: \"winner\",\r\n  initialState,\r\n  reducers: {\r\n    updateWinnerData(state, action) {\r\n      let updatedData: winnerDataStyle = action.payload;\r\n\r\n      const index = state.winnerData.findIndex(\r\n        (data) => data.address === updatedData.address\r\n      );\r\n      if (index < 0) {\r\n        state.winnerData.push(updatedData);\r\n      } else {\r\n        state.winnerData[index] = updatedData;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadWinnerDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadWinnerDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadWinnerDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.app;\r\n\r\nexport default winnerSlice.reducer;\r\n\r\nexport const { updateWinnerData } = winnerSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (app) => app);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\nimport { userinfoDataStyle } from \"@types\";\r\n\r\nexport const loadUserInfoDetails = createAsyncThunk(\r\n  \"userinfo/loadUserInfoDetails\",\r\n  async ({ userInfoData }: IUserInfoSlice) => {\r\n    await instance\r\n      .get(\"/api/userinfo\")\r\n      .then((response) => {\r\n        if(response.data[0]) {\r\n          userInfoData = response.data[0];\r\n        } else {\r\n          userInfoData = {\r\n            address: undefined,\r\n            stakeAmount: 0,\r\n            claimAmount: 0,\r\n            ownNfts: []\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return {\r\n      userInfoData,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState: {\r\n  loading: boolean;\r\n  userInfoData: userinfoDataStyle;\r\n} = {\r\n  loading: true,\r\n  userInfoData: {\r\n    address: undefined,\r\n    stakeAmount: 0,\r\n    claimAmount: 0,\r\n    ownNfts: []\r\n  },\r\n};\r\n\r\nexport interface IUserInfoSlice {\r\n  userInfoData: userinfoDataStyle;\r\n}\r\n\r\nconst userinfoSlice = createSlice({\r\n  name: \"userinfo\",\r\n  initialState,\r\n  reducers: {\r\n    updateUserInfoData(state, action) {\r\n      let updatedData: userinfoDataStyle = action.payload;\r\n      \r\n      state.userInfoData = updatedData;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadUserInfoDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadUserInfoDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadUserInfoDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.app;\r\n\r\nexport default userinfoSlice.reducer;\r\n\r\nexport const { updateUserInfoData } = userinfoSlice.actions;\r\n\r\nexport const getAppState = createSelector(baseInfo, (app) => app);\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { AppDispatch } from \"state\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { SampleModal } from \"components/Current/modal\";\r\nimport { BigRoomModal } from \"components/Current/bigRoomModal\";\r\nimport { SmallRooms } from \"components/Current/SmallRoom\";\r\nimport { BigRoom } from \"components/Current/BigRoom\";\r\nimport { loadBattleDetails } from \"store/slices/battle-slice\";\r\nimport instance from \"constants/axios\";\r\nimport io from \"socket.io-client\";\r\nimport { baseURL } from \"constants/axios\";\r\nimport { updateGameData } from \"store/slices/game-slice\";\r\nimport { updateRandomData } from \"store/slices/random-slice\";\r\nimport { updateResultData } from \"store/slices/result-slice\";\r\nimport { gameDataStyle, resultDataStyle, randomDataStyle, userinfoDataStyle, winnerDataStyle } from \"@types\";\r\nimport { updateWinnerData } from \"store/slices/winner-slice\";\r\nimport { updateUserInfoData } from \"store/slices/userinfo-slice\";\r\n\r\nconst CurrentBattle = () => {\r\n  const secRandomData: number[] = useSelector<IReduxState, number[]>(\r\n    (state) => state.fight.random2\r\n  );\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  useEffect(() => {\r\n    if (secRandomData) {\r\n      dispatch(\r\n        loadBattleDetails({\r\n          decide: true,\r\n          openState: false,\r\n          claimState: false,\r\n          whichroom: 0,\r\n          whichfight: 0,\r\n          waitingNft: '',\r\n          waitingRandom: 0,\r\n        })\r\n      );\r\n      setTimeout(async () => {\r\n        instance.delete(`/api/betting/delete/${secRandomData.length - 1}`);\r\n\r\n        await dispatch(\r\n          loadBattleDetails({\r\n            decide: false,\r\n            openState: false,\r\n            claimState: false,\r\n            whichroom: 0,\r\n            whichfight: 0,\r\n            waitingNft: '',\r\n            waitingRandom: 0,\r\n          })\r\n        );\r\n      }, 4000);\r\n    }\r\n  }, [secRandomData]);\r\n\r\n  var socket = io(baseURL);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedRoom\", (data: gameDataStyle) => {\r\n      dispatch(updateGameData(data));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedRandom\", (data: randomDataStyle) => {\r\n      dispatch(updateRandomData(data));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedResult\", (data: resultDataStyle) => {\r\n      dispatch(updateResultData(data));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedWinner\", (data: winnerDataStyle) => {\r\n      dispatch(updateWinnerData(data));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"savedUserInfo\", (data: userinfoDataStyle) => {\r\n      dispatch(updateUserInfoData(data));\r\n    });\r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: \"rgba(230,239,237, 0.1)\",\r\n        paddingX: \"6px\",\r\n        mt: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n        pb: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n      }}\r\n    >\r\n      <Box\r\n        display='flex'\r\n        justifyContent='space-between'\r\n        sx={{\r\n          flexDirection: {xs: 'column', sm: 'row'}\r\n        }}\r\n      >\r\n        <Box>\r\n          <Typography\r\n            fontFamily=\"Audiowide\"\r\n            sx={{\r\n              fontSize: { xs: \"18px\", sm: \"24px\", md: \"30px\" },\r\n              color: \"white\",\r\n              textAlign: \"center\",\r\n              pt: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n            }}\r\n          >\r\n            50 TRX Battle\r\n          </Typography>\r\n\r\n          <Typography\r\n            fontFamily=\"Audiowide\"\r\n            sx={{\r\n              fontSize: { xs: \"18px\", sm: \"24px\", md: \"30px\" },\r\n              fontWeight: '500',\r\n              color: \"#ffc90e\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            (1 Roll & 1 HNY)\r\n          </Typography>\r\n\r\n          <SmallRooms />\r\n        </Box>\r\n        <Box>\r\n          <Typography\r\n            fontFamily=\"Audiowide\"\r\n            sx={{\r\n              fontSize: { xs: \"18px\", sm: \"24px\", md: \"30px\" },\r\n              color: \"RGB(0,0,200)\",\r\n              textAlign: \"center\",\r\n              pt: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n            }}\r\n          >\r\n            250 TRX Battle\r\n          </Typography>\r\n\r\n          <Typography\r\n            fontFamily=\"Audiowide\"\r\n            sx={{\r\n              fontSize: { xs: \"18px\", sm: \"24px\", md: \"30px\" },\r\n              fontWeight: '500',\r\n              color: \"#ffc90e\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            (5 Roll & 5 HNY)\r\n          </Typography>\r\n\r\n          <BigRoom />\r\n        </Box>\r\n      </Box>\r\n\r\n      <SampleModal />\r\n      <BigRoomModal />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CurrentBattle;\r\n","import { Box, Typography } from \"@mui/material\";\r\n// import ActionFeed from \"./components/ActionFeed\";\r\nimport Banner from \"./components/Banner\";\r\nimport Jackpot from \"./components/Jackpot\";\r\nimport CurrentBattle from \"./components/CurrentBattle\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Box sx={{ backgroundColor: \"rgba(38,40,42,0.95)\" }}>\r\n      <Banner />\r\n      {/* <Typography\r\n        variant=\"h2\"\r\n        textAlign=\"center\"\r\n        fontFamily=\"Audiowide\"\r\n        color=\"white\"\r\n        sx={{\r\n          fontSize: { xs: \"24px\", md: \"48px\", xl: \"60px\" },\r\n          mt: \"16px\",\r\n          mb: \"16px\",\r\n        }}\r\n      >\r\n        Crypto Moon Catz War!\r\n      </Typography> */}\r\n      <Jackpot />\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: { xs: \"column\", lg: \"row\" },\r\n          justifyContent: \"space-around\",\r\n          my: { xs: 1, sm: 2 },\r\n        }}\r\n      >\r\n        <Box>\r\n          <CurrentBattle />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport { metamaskErrorWrap } from \"helpers/metamask-error-wrap\";\r\nimport tronWeb from \"tronweb\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\nimport instance from \"constants/axios\";\r\n\r\ninterface IStackingMeow {\r\n  address: any;\r\n  amount: string;\r\n}\r\n\r\ndeclare var window: any;\r\n\r\nexport const stackingMeow = createAsyncThunk(\r\n  \"stacking/stackingMeow\",\r\n\r\n  async ({ address, amount }: IStackingMeow, { dispatch }) => {\r\n    let meowContract, meowTokenContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n        meowTokenContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOWTOKEN_ADDRESS));\r\n      }\r\n    }\r\n    let enterTx, approveTx;\r\n    let stakeamount = parseInt(amount);\r\n    try {\r\n      console.log(stakeamount);\r\n      approveTx = await meowTokenContract\r\n        .approve(SHASTA_TESTNET.MEOW_ADDRESS, stakeamount)\r\n        .send({ feeLimit: 100000000 });\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          const transaction = await window.tronWeb.trx.getTransaction(\r\n            approveTx\r\n          );\r\n          receipt = transaction.ret[0].contractRet;\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      enterTx = await meowContract\r\n        .stake(stakeamount)\r\n        .send({ feeLimit: 100000000 });\r\n\r\n      receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          receipt = transaction.ret[0].contractRet;\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n      await instance.post(\"/api/userinfo/create\", {\r\n        address: address,\r\n        stakeAmount: stakeamount,\r\n        claimAmount: 0,\r\n        ownNfts: [],\r\n      });\r\n\r\n      return;\r\n    } catch (err: any) {\r\n      console.log(err);\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n      return;\r\n    }\r\n  }\r\n);\r\n\r\ninterface IunstackingMeow {\r\n  address: any;\r\n  amount: string;\r\n}\r\n\r\nexport const unstackingMeow = createAsyncThunk(\r\n  \"claimfight/claimfightMeow\",\r\n\r\n  async ({ amount, address }: IunstackingMeow, { dispatch }) => {\r\n    let meowContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    let enterTx;\r\n    let stakeamount = parseInt(amount);\r\n    try {\r\n      enterTx = await meowContract\r\n        .unStake(stakeamount)\r\n        .send({ feeLimit: 100000000 });\r\n\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          receipt = transaction.ret[0].contractRet;\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      await instance.post(\"/api/userinfo/create\", {\r\n        address: address,\r\n        stakeAmount: stakeamount * -1,\r\n        claimAmount: 0,\r\n        ownNfts: [],\r\n      });\r\n\r\n      return;\r\n    } catch (err: any) {\r\n      console.log(err);\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n      return;\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nexport interface IAppSlice {}\r\n\r\nconst stakeSlice = createSlice({\r\n  name: \"fight\",\r\n  initialState,\r\n  reducers: {\r\n    fetchAppSuccess(state, action) {\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(stackingMeow.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(stackingMeow.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(stackingMeow.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(unstackingMeow.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(unstackingMeow.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(unstackingMeow.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.stack;\r\n\r\nexport default stakeSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (stack) => stack);\r\n","import { Box, Button, Typography } from \"@mui/material\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { AppDispatch } from \"state\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { stackingMeow, unstackingMeow } from \"store/slices/staking-slice\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport HoneyTokenAvatar from \"assets/images/honeytoken.png\";\r\n\r\nconst meowTokenStyle = {\r\n  color: \"#BADA55\",\r\n  fontSize: { xs: \"12px\", sm: \"16px\" },\r\n  mt: 1,\r\n};\r\n\r\nconst jackpotStyle = {\r\n  color: \"white\",\r\n  fontSize: { xs: \"12px\", sm: \"16px\" },\r\n};\r\n\r\nconst stakeButtonStyle = {\r\n  paddingY: { xs: \"4px\", sm: \"6px\" },\r\n  paddingX: { xs: \"8px\", sm: \"16px\" },\r\n  fontSize: { xs: \"12px\", sm: \"16px\" },\r\n  color: \"black\",\r\n  backgroundColor: \"#BADA55\",\r\n  fontFamily: \"Audiowide\",\r\n  \"&: hover\": { backgroundColor: \"#BADA55\", opacity: 0.9 },\r\n};\r\n\r\nconst MeowToken = () => {\r\n  const { account } = useWeb3React();\r\n  const [stackAmount, changesStack] = useState(\"\");\r\n  const [unstackAmount, changeUnstack] = useState(\"\");\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  let stakeAmount: number = useSelector<IReduxState, number>(\r\n    (state) => state.wallet.stakeAmount\r\n  );\r\n  const JackpotAmount = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.jackpotAmount\r\n  );\r\n  let totalStake: number = useSelector<IReduxState, number>(\r\n    (state) => state.wallet.totalStake\r\n  );\r\n  const meowCount: string = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.meowCount\r\n  );\r\n\r\n  async function onStack() {\r\n    if (parseInt(meowCount) < parseInt(stackAmount)) {\r\n      alert(\"You don't have enough balance of Meow Token for stake!\");\r\n      return;\r\n    }\r\n    await dispatch(\r\n      stackingMeow({\r\n        amount: stackAmount,\r\n        address: account,\r\n      })\r\n    );\r\n  }\r\n\r\n  async function onUnstack() {\r\n    if (stakeAmount < parseInt(unstackAmount)) {\r\n      alert(\"You don't have enough Meow Token to unstake!\");\r\n      return;\r\n    }\r\n    await dispatch(\r\n      unstackingMeow({\r\n        amount: unstackAmount,\r\n        address: account,\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: { xs: \"320px\", sm: \"540px\", md: \"800px\", lg: '900px', xl: \"1200px\" },\r\n        mt: { xs: 4, sm: 6, md: 8, xl: 10 },\r\n        marginX: \"auto\",\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          backgroundColor: \"#393D32\",\r\n          pb: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Box\r\n          display='flex'\r\n          justifyContent='center'\r\n          alignItems='center'\r\n        >\r\n          <Box\r\n            component='img'\r\n            src={HoneyTokenAvatar}\r\n            alt='Honey Token Avatar'\r\n            width='10%'\r\n          />\r\n          <Typography\r\n            fontFamily=\"Audiowide\"\r\n            textAlign=\"center\"\r\n            color=\"#58C4E4\"\r\n            sx={{\r\n              fontSize: { xs: \"20px\", sm: \"28px\", md: \"36px\", xl: \"40px\" },\r\n              // px: { xs: 1, sm: 3 },\r\n            }}\r\n          >\r\n            Honey Token\r\n          </Typography>\r\n        </Box>\r\n        <Typography sx={jackpotStyle}>\r\n          Earn HNY each battle! Win or lose you mine one HNY token.\r\n        </Typography>\r\n        <Typography\r\n          fontFamily=\"Audiowide\"\r\n          sx={{\r\n            color: \"#6B81FF\",\r\n            fontSize: { xs: \"14px\", sm: \"18px\" },\r\n            py: { xs: 1 },\r\n            pl: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n          }}\r\n        >\r\n          24 Mined of 100,000,000 HNY\r\n        </Typography>\r\n        <Typography sx={jackpotStyle}>\r\n          Every time number 777 is randomly generated during a fight, users with\r\n          staked HNY tokens split 40% of the Jackpot.\r\n        </Typography>\r\n        <Typography sx={jackpotStyle}>Passive Income!</Typography>\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          flexWrap: \"wrap\",\r\n          alignItems: \"flex-start\",\r\n          py: { xs: 1, sm: 2 },\r\n          px: { xs: 1, sm: 2 },\r\n          backgroundColor: \"#6A6E64\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Button sx={stakeButtonStyle} onClick={onStack}>\r\n            Stake HNY\r\n          </Button>\r\n          <br />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            type=\"number\"\r\n            size=\"small\"\r\n            sx={{ color: \"white\", width: \"100%\", mt: 2 }}\r\n            value={stackAmount}\r\n            onChange={(e) => {\r\n              changesStack(e.target.value);\r\n            }}\r\n          />\r\n          <Typography sx={meowTokenStyle}>\r\n            Staked HNY: {stakeAmount ? stakeAmount : 0} HNY Token\r\n          </Typography>\r\n        </Box>\r\n        <Box>\r\n          <Button sx={stakeButtonStyle} onClick={onUnstack}>\r\n            Unstake HNY\r\n          </Button>\r\n          <br />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            type=\"number\"\r\n            sx={{ color: \"white\", width: \"100%\", mt: 2 }}\r\n            value={unstackAmount}\r\n            onChange={(e) => {\r\n              changeUnstack(e.target.value);\r\n            }}\r\n          />\r\n          <Typography sx={meowTokenStyle}>\r\n            Available HNY: {meowCount}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n      <Box sx={{ p: 1, backgroundColor: \"#393D32\" }}>\r\n        <Typography sx={jackpotStyle}>\r\n          Total Staked HNY in contract: {totalStake ? totalStake : 0} HNY\r\n          Token\r\n        </Typography>\r\n        <Typography sx={jackpotStyle}>\r\n          40% of current Jackpot:{\" \"}\r\n          {JackpotAmount ? (parseInt(JackpotAmount) * 2) / 5 : 0} TRX\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MeowToken;\r\n","import { Box, Typography } from \"@mui/material\";\r\n\r\nconst ChestInfo = () => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: { xs: \"320px\", sm: \"540px\", md: \"800px\", lg: '900px', xl: \"1200px\" },\r\n        mt: { xs: 4, sm: 6, md: 8, xl: 10 },\r\n        marginX: \"auto\",\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          backgroundColor: \"#393D32\",\r\n          pb: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Typography\r\n          fontFamily=\"Audiowide\"\r\n          sx={{\r\n            color: \"#ffc90e\",\r\n            fontSize: { xs: \"20px\", sm: \"28px\", md: \"36px\", xl: \"40\" },\r\n            py: 1,\r\n            px: { xs: 1, sm: 3 },\r\n            textAlign: \"center\",\r\n            mx: \"auto\",\r\n            mb: 1,\r\n          }}\r\n        >\r\n          Honey Pot\r\n        </Typography>\r\n        <Typography\r\n          sx={{ fontSize: { xs: \"12px\", sm: \"16px\" }, color: \"white\", py: 1 }}\r\n        >\r\n          Battle players for NFTs and a chance at opening the Honey Pot Jackpot!\r\n        </Typography>\r\n        <Typography\r\n          sx={{ fontSize: { xs: \"12px\", sm: \"16px\" }, color: \"white\", pt: 2 }}\r\n        >\r\n          Each battle 2 users put up 1 NFT and 50 TRX(250 TRX in big room) each.\r\n        </Typography>\r\n        <Typography\r\n          sx={{ fontSize: { xs: \"12px\", sm: \"16px\" }, color: \"white\", pt: 1 }}\r\n        >\r\n          Users are the given a random number (1-1,000) Highest number wins!\r\n        </Typography>\r\n        <Typography\r\n          sx={{ fontSize: { xs: \"12px\", sm: \"16px\" }, color: \"#BADA55\", pt: 2 }}\r\n        >\r\n          Winner receives both NFT's and 60 TRX + (1 HNY token)\r\n        </Typography>\r\n        <Typography\r\n          sx={{ color: \"#FF1313\", fontSize: { xs: \"12px\", sm: \"16px\", pt: 1 } }}\r\n        >\r\n          Loser receives (1 HNY token)\r\n        </Typography>\r\n        <Typography\r\n          sx={{ color: \"#FF1313\", fontSize: { xs: \"12px\", sm: \"16px\", pt: 1 } }}\r\n        >\r\n          Loser's 30 TRX is sent to the Honey Pot Jackpot until 777 is rolled!\r\n        </Typography>\r\n        <Typography\r\n          sx={{ color: \"#FF1313\", fontSize: { xs: \"12px\", sm: \"16px\", pt: 1 } }}\r\n        >\r\n          10 TRX sent to team account\r\n        </Typography>\r\n      </Box>\r\n      <Box sx={{ py: { xs: 1, sm: 2 }, backgroundColor: \"#6A6E64\", px: 2 }}>\r\n        <Typography\r\n          sx={{ color: \"#F39B33\", fontSize: { xs: \"14px\", sm: \"18px\" } }}\r\n        >\r\n          Honey Pot Jackpot distribution:\r\n        </Typography>\r\n        <Typography\r\n          sx={{ color: \"#F39B33\", fontSize: { xs: \"12px\", sm: \"16px\" }, tp: 1 }}\r\n        >\r\n          40% goes to who rolled 777\r\n        </Typography>\r\n        <Typography\r\n          sx={{ color: \"#F39B33\", fontSize: { xs: \"12px\", sm: \"16px\" }, tp: 1 }}\r\n        >\r\n          10% goes to other user in that battle\r\n        </Typography>\r\n        <Typography\r\n          sx={{ color: \"#F39B33\", fontSize: { xs: \"12px\", sm: \"16px\" }, tp: 1 }}\r\n        >\r\n          40% goes to all users that have HNY tokens staked\r\n        </Typography>\r\n        <Typography\r\n          sx={{ color: \"#F39B33\", fontSize: { xs: \"12px\", sm: \"16px\" }, tp: 1 }}\r\n        >\r\n          5% goes to Tron Beary NFT Stakers\r\n        </Typography>\r\n        <Typography\r\n          sx={{ color: \"#F39B33\", fontSize: { xs: \"12px\", sm: \"16px\" }, tp: 1 }}\r\n        >\r\n          5% remains in the Honey Pot\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChestInfo;\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport MeowToken from \"./components/MeowToken\";\r\nimport ChestInfo from \"./components/ChestInfo\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IReduxState } from \"../../store/slices/state.interface\";\r\nimport HoneyPot from \"assets/images/honeypot.png\";\r\n\r\nconst Stake = () => {\r\n  const JackpotAmount = useSelector<IReduxState, string>(\r\n    (state) => state.jackpot.jackpotAmount\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      display='flex'\r\n      flexDirection='column'\r\n      alignItems='center'\r\n      sx={{ backgroundColor: \"#111B24\", py: { xs: 2, sm: 4, md: 6, xl: 8 } }}\r\n    >\r\n      <Box\r\n        display='flex'\r\n        alignItems='center'\r\n        sx={{\r\n          backgroundColor: \"#393D32\",\r\n          width: { xs: \"320px\", sm: \"540px\", md: \"800px\", lg: '900px', xl: \"1200px\" },\r\n        }}\r\n      >\r\n        <Box\r\n          component='img'\r\n          src={HoneyPot}\r\n          alt='Honey Pot'\r\n          width='10%'\r\n        />\r\n        <Typography\r\n          fontFamily=\"Audiowide\"\r\n          sx={{\r\n            color: \"#ffc90e\",\r\n            fontSize: { xs: \"12px\", sm: \"20px\", md: \"30px\", lg: '36px', xl: \"40px\" },\r\n            py: 1,\r\n            px: { xs: 1, sm: 3 },\r\n            textAlign: \"center\",\r\n            mx: \"auto\",\r\n          }}\r\n        >\r\n          Honey Pot Jackpot: {JackpotAmount ? JackpotAmount : 0} Tron\r\n        </Typography>\r\n        <Box\r\n          component='img'\r\n          src={HoneyPot}\r\n          alt='Honey Pot'\r\n          width='10%'\r\n        />\r\n      </Box>\r\n      <MeowToken />\r\n      <ChestInfo />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Stake;\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport instance from \"constants/axios\";\r\n\r\nexport const loadWaitingDetails = createAsyncThunk(\r\n  \"waiting/loadWaitingDetails\",\r\n  async ({ waitingList, approvedList }: IWaitingSlice) => {\r\n    await instance\r\n      .get(`/api/waiting`)\r\n      .then((response) => {\r\n        waitingList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    await instance\r\n      .get(`/api/approved`)\r\n      .then((response) => {\r\n        approvedList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return {\r\n      waitingList,\r\n      approvedList,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  waitingList: [],\r\n  approvedList: [],\r\n};\r\n\r\nexport interface IWaitingSlice {\r\n  approvedList: any[];\r\n  waitingList: any[];\r\n}\r\n\r\nconst waitingSlice = createSlice({\r\n  name: \"waiting\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadWaitingDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadWaitingDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadWaitingDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.waiting;\r\n\r\nexport default waitingSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (waiting) => waiting);\r\n","import {\r\n  Box,\r\n  Button,\r\n  Modal,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { AppDispatch } from \"state\";\r\nimport { ApproveNft, DeleteWaiting } from \"store/slices/addnft-slice\";\r\nimport { loadWaitingDetails } from \"store/slices/getnft-slice\";\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 300,\r\n  backgroundColor: \"rgba(38,40,42)\",\r\n  border: \"none\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nfunction Waiting() {\r\n  const waitings: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.waiting.waitingList\r\n  );\r\n  const [open, setOpen] = React.useState(false);\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [name, setName] = React.useState(\"\");\r\n  const [symbol, setSymbol] = React.useState(\"\");\r\n  const [created, setCreated] = React.useState(\"\");\r\n\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const handleApprove = useCallback(async (address: string, name: string, symbol: string) => {\r\n    await dispatch(ApproveNft({ address: address, name: name, symbol: symbol }));\r\n    dispatch(loadWaitingDetails({\r\n      waitingList: [],\r\n      approvedList: []\r\n    }));\r\n  }, []);\r\n\r\n  const handleDecline = useCallback(async (address: string) => {\r\n    await dispatch(DeleteWaiting({ address: address }));\r\n    dispatch(loadWaitingDetails({\r\n      waitingList: [],\r\n      approvedList: []\r\n    }));\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography\r\n        fontSize=\"40px\"\r\n        fontWeight=\"700\"\r\n        color=\"white\"\r\n        textAlign=\"center\"\r\n        pt=\"24px\"\r\n        pb=\"24px\"\r\n      >\r\n        Waiting List\r\n      </Typography>\r\n      <Box>\r\n        <Table sx={{ minWidth: 320 }} aria-label=\"simple table\">\r\n          {waitings.length !== 0 ? (\r\n            <>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", sm: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">No</Typography>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Typography color=\"white\">Address</Typography>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", md: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">Name</Typography>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", md: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">Symbol</Typography>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", lg: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">Created At</Typography>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Typography color=\"white\">Approve</Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {waitings.map((waiting, index) => (\r\n                  <TableRow\r\n                    key={index}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", sm: \"table-cell\" },\r\n                      }}\r\n                      component=\"th\"\r\n                      scope=\"row\"\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">{index + 1}</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Typography\r\n                        sx={{\r\n                          wordBreak: \"break-all\",\r\n                        }}\r\n                        color=\"white\"\r\n                      >\r\n                        {waiting.address}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", md: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography\r\n                        sx={{\r\n                          wordBreak: \"break-all\",\r\n                        }}\r\n                        color=\"white\"\r\n                      >\r\n                        {waiting.name}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", md: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography\r\n                        sx={{\r\n                          wordBreak: \"break-all\",\r\n                        }}\r\n                        color=\"white\"\r\n                      >\r\n                        {waiting.symbol}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", lg: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">{waiting.createdAt}</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"success\"\r\n                        sx={{\r\n                          mr: \"12px\",\r\n                          display: { xs: \"none\", sm: \"inline-flex\" },\r\n                        }}\r\n                        onClick={() => {\r\n                          handleApprove(waiting.address, waiting.name, waiting.symbol);\r\n                        }}\r\n                      >\r\n                        Approve\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"warning\"\r\n                        sx={{\r\n                          marginTop: { xs: \"8px\", sm: \"0px\" },\r\n                          display: { xs: \"none\", sm: \"inline-flex\" },\r\n                        }}\r\n                        onClick={() => {\r\n                          handleDecline(waiting.address);\r\n                        }}\r\n                      >\r\n                        Decline\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"success\"\r\n                        sx={{\r\n                          mr: \"12px\",\r\n                          display: { xs: \"block\", sm: \"none\" },\r\n                        }}\r\n                        onClick={() => {\r\n                          handleOpen();\r\n                          setAddress(waiting.address);\r\n                          setName(waiting.name);\r\n                          setSymbol(waiting.symbol);\r\n                          setCreated(waiting.createdAt);\r\n                        }}\r\n                      >\r\n                        Show Details\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </>\r\n          ) : (\r\n            <Typography color=\"white\" fontSize=\"32px\" textAlign=\"center\">\r\n              You have no waiting NFT address for approving\r\n            </Typography>\r\n          )}\r\n        </Table>\r\n      </Box>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Typography\r\n            sx={{\r\n              wordBreak: \"break-all\",\r\n            }}\r\n            color=\"white\"\r\n            textAlign='center'\r\n          >\r\n            Address: {address}\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              wordBreak: \"break-all\",\r\n              mt: '12px'\r\n            }}\r\n            color=\"white\"\r\n            textAlign='center'\r\n          >\r\n            Name: {name}\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              wordBreak: \"break-all\",\r\n              mt: '12px'\r\n            }}\r\n            color=\"white\"\r\n            textAlign='center'\r\n          >\r\n            Symbol: {symbol}\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              wordBreak: \"break-all\",\r\n              mt: '12px'\r\n            }}\r\n            color=\"white\"\r\n            textAlign='center'\r\n          >\r\n            CreatedAt: {created}\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"success\"\r\n            sx={{\r\n              mt: \"20px\",\r\n              width: \"50%\",\r\n            }}\r\n            onClick={() => {\r\n              handleApprove(address, name, symbol);\r\n              handleClose();\r\n            }}\r\n          >\r\n            Approve\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"warning\"\r\n            sx={{\r\n              mt: \"20px\",\r\n              width: \"50%\",\r\n            }}\r\n            onClick={() => {\r\n              handleDecline(address);\r\n              handleClose();\r\n            }}\r\n          >\r\n            Decline\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Waiting;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Modal,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n  } from \"@mui/material\";\r\n  import React, { useCallback } from \"react\";\r\n  import { useDispatch, useSelector } from \"react-redux\";\r\n  import { IReduxState } from \"store/slices/state.interface\";\r\n  import { AppDispatch } from \"state\";\r\n  import { DeleteApproved } from \"store/slices/addnft-slice\";\r\nimport { loadWaitingDetails } from \"store/slices/getnft-slice\";\r\n  \r\n  const style = {\r\n    position: \"absolute\" as \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: 300,\r\n    backgroundColor: \"rgba(38,40,42)\",\r\n    border: \"none\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  };\r\n  \r\n  function Waiting() {\r\n    const approves: any[] = useSelector<IReduxState, any[]>(\r\n      (state) => state.waiting.approvedList\r\n    );\r\n    const [open, setOpen] = React.useState(false);\r\n    const [address, setAddress] = React.useState(\"\");\r\n    const [name, setName] = React.useState(\"\");\r\n    const [symbol, setSymbol] = React.useState(\"\");\r\n    const [created, setCreated] = React.useState(\"\");\r\n  \r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n    const dispatch = useDispatch<AppDispatch>();\r\n  \r\n    const handleDecline = useCallback(async (address: string) => {\r\n      await dispatch(DeleteApproved({ address: address }));\r\n      dispatch(loadWaitingDetails({\r\n        waitingList: [],\r\n        approvedList: []\r\n      }));\r\n    }, []);\r\n  \r\n    return (\r\n      <Box>\r\n        <Typography\r\n          fontSize=\"40px\"\r\n          fontWeight=\"700\"\r\n          color=\"white\"\r\n          textAlign=\"center\"\r\n          pt=\"24px\"\r\n          pb=\"24px\"\r\n        >\r\n          Approved List\r\n        </Typography>\r\n        <Box>\r\n          <Table sx={{ minWidth: 320 }} aria-label=\"simple table\">\r\n            {approves.length !== 0 ? (\r\n              <>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", sm: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">No</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Typography color=\"white\">Address</Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", md: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">Name</Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", md: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">Symbol</Typography>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", lg: \"table-cell\" },\r\n                      }}\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">Created At</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Typography color=\"white\">Approve</Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {approves.map((approve, index) => (\r\n                    <TableRow\r\n                      key={index}\r\n                      sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                    >\r\n                      <TableCell\r\n                        sx={{\r\n                          display: { xs: \"none\", sm: \"table-cell\" },\r\n                        }}\r\n                        component=\"th\"\r\n                        scope=\"row\"\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography color=\"white\">{index + 1}</Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Typography\r\n                          sx={{\r\n                            wordBreak: \"break-all\",\r\n                          }}\r\n                          color=\"white\"\r\n                        >\r\n                          {approve.address}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        sx={{\r\n                          display: { xs: \"none\", md: \"table-cell\" },\r\n                        }}\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography\r\n                          sx={{\r\n                            wordBreak: \"break-all\",\r\n                          }}\r\n                          color=\"white\"\r\n                        >\r\n                          {approve.name}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        sx={{\r\n                          display: { xs: \"none\", md: \"table-cell\" },\r\n                        }}\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography\r\n                          sx={{\r\n                            wordBreak: \"break-all\",\r\n                          }}\r\n                          color=\"white\"\r\n                        >\r\n                          {approve.symbol}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        sx={{\r\n                          display: { xs: \"none\", lg: \"table-cell\" },\r\n                        }}\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography color=\"white\">{approve.createdAt}</Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"warning\"\r\n                          sx={{\r\n                            marginTop: { xs: \"8px\", sm: \"0px\" },\r\n                            display: { xs: \"none\", sm: \"inline-flex\" },\r\n                          }}\r\n                          onClick={() => {\r\n                            handleDecline(approve.address);\r\n                          }}\r\n                        >\r\n                          Decline\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"success\"\r\n                          sx={{\r\n                            mr: \"12px\",\r\n                            display: { xs: \"block\", sm: \"none\" },\r\n                          }}\r\n                          onClick={() => {\r\n                            handleOpen();\r\n                            setAddress(approve.address);\r\n                            setName(approve.name);\r\n                            setSymbol(approve.symbol);\r\n                            setCreated(approve.createdAt);\r\n                          }}\r\n                        >\r\n                          Show Details\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </>\r\n            ) : (\r\n              <Typography color=\"white\" fontSize=\"32px\" textAlign=\"center\">\r\n                You have no waiting NFT address for approving\r\n              </Typography>\r\n            )}\r\n          </Table>\r\n        </Box>\r\n        <Modal\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Typography\r\n              sx={{\r\n                wordBreak: \"break-all\",\r\n              }}\r\n              color=\"white\"\r\n              textAlign='center'\r\n            >\r\n              Address: {address}\r\n            </Typography>\r\n            <Typography\r\n              sx={{\r\n                wordBreak: \"break-all\",\r\n                mt: '12px'\r\n              }}\r\n              color=\"white\"\r\n              textAlign='center'\r\n            >\r\n              Name: {name}\r\n            </Typography>\r\n            <Typography\r\n              sx={{\r\n                wordBreak: \"break-all\",\r\n                mt: '12px'\r\n              }}\r\n              color=\"white\"\r\n              textAlign='center'\r\n            >\r\n              Symbol: {symbol}\r\n            </Typography>\r\n            <Typography\r\n              sx={{\r\n                wordBreak: \"break-all\",\r\n                mt: '12px'\r\n              }}\r\n              color=\"white\"\r\n              textAlign='center'\r\n            >\r\n              CreatedAt: {created}\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"warning\"\r\n              sx={{\r\n                mt: \"20px\",\r\n                width: \"50%\",\r\n              }}\r\n              onClick={() => {\r\n                handleDecline(address);\r\n                handleClose();\r\n              }}\r\n            >\r\n              Decline\r\n            </Button>\r\n          </Box>\r\n        </Modal>\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  export default Waiting;\r\n  ","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { metamaskErrorWrap } from \"helpers/metamask-error-wrap\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\nimport tronWeb from \"tronweb\";\r\nimport { notification } from \"utils/notification\";\r\n\r\ninterface IrefundRoom {\r\n  tokenId: Number;\r\n  nftAddress: string;\r\n  fighterAddress: string;\r\n}\r\n\r\ndeclare var window: any;\r\n\r\nexport const refundRoom = createAsyncThunk(\r\n  \"refund/refundRoom\",\r\n  //@ts-ignore\r\n  async (\r\n    { tokenId, nftAddress, fighterAddress }: IrefundRoom,\r\n    { dispatch }\r\n  ) => {\r\n    let meowContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(tronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n      }\r\n    }\r\n    try {\r\n      let enterTx = await meowContract\r\n        .refundFight(tokenId, fighterAddress, nftAddress)\r\n        .send({ feeLimit: 100000000 });\r\n\r\n      let receipt = null;\r\n      while (receipt === \"REVERT\" || receipt == null) {\r\n        if (window.tronWeb) {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n          const transaction = await window.tronWeb.trx.getTransaction(enterTx);\r\n          if (transaction && transaction.ret && transaction.ret.length > 0) {\r\n            receipt = transaction.ret[0].contractRet;\r\n          }\r\n          console.log(\"receipt: \", receipt, enterTx);\r\n        }\r\n        if (receipt === \"REVERT\") {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\r\n        }\r\n      }\r\n\r\n      notification({ title: \"Successfully Refunded!\", type: \"success\" });\r\n      return;\r\n    } catch (err: any) {\r\n      notification({ title: `${err}`, type: \"danger\" });\r\n      return metamaskErrorWrap(err, dispatch);\r\n    } finally {\r\n    }\r\n  }\r\n);\r\n","import {\r\n  Box,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { gameDataStyle } from \"@types\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { AppDispatch } from \"state\";\r\nimport { refundRoom } from \"store/slices/refund-slice\";\r\nimport instance from \"constants/axios\";\r\n\r\nfunction Refund() {\r\n  const [displayData, setDisplayData] = useState<gameDataStyle[]>([]);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const gameData: gameDataStyle[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.app.gameData\r\n  );\r\n\r\n  let filteredData: gameDataStyle[] = [];\r\n\r\n  const handleRefund = useCallback(\r\n    async (id: Number, nftAddress: string, fighterAddress: string, roomNum: number) => {\r\n      await dispatch(\r\n        refundRoom({\r\n          tokenId: id,\r\n          nftAddress: nftAddress,\r\n          fighterAddress: fighterAddress\r\n        })\r\n      );\r\n      instance.delete(`/api/betting/delete/${roomNum}`);\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    let cnt = 0;\r\n    for(let i = 0; i < gameData.length; i ++) {\r\n      if(gameData[i].firstAddress === '') {\r\n        console.log(gameData[i].firstAddress);\r\n        continue;\r\n      }\r\n      filteredData.push(gameData[i]);\r\n      setDisplayData(filteredData);\r\n    }\r\n  }, [gameData]);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography\r\n        fontSize=\"40px\"\r\n        fontWeight=\"700\"\r\n        color=\"white\"\r\n        textAlign=\"center\"\r\n        pt=\"24px\"\r\n        pb=\"24px\"\r\n      >\r\n        Refund List\r\n      </Typography>\r\n      <Box>\r\n        <Table sx={{ minWidth: 320 }} aria-label=\"simple table\">\r\n          {displayData.length !== 0 ? (\r\n            <>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", sm: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">Category</Typography>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Typography color=\"white\">Created At</Typography>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    sx={{\r\n                      display: { xs: \"none\", md: \"table-cell\" },\r\n                    }}\r\n                    align=\"center\"\r\n                  >\r\n                    <Typography color=\"white\">Refund</Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {displayData.map((data, index) => (\r\n                  <TableRow\r\n                    key={index}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    <TableCell\r\n                      sx={{\r\n                        display: { xs: \"none\", sm: \"table-cell\" },\r\n                      }}\r\n                      component=\"th\"\r\n                      scope=\"row\"\r\n                      align=\"center\"\r\n                    >\r\n                      <Typography color=\"white\">{data.nftName}</Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Typography\r\n                        sx={{\r\n                          wordBreak: \"break-all\",\r\n                        }}\r\n                        color=\"white\"\r\n                      >\r\n                        {data.createdAt}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"warning\"\r\n                        sx={{\r\n                          marginTop: { xs: \"8px\", sm: \"0px\" },\r\n                          display: { xs: \"none\", sm: \"inline-flex\" },\r\n                        }}\r\n                        onClick={() => {\r\n                          handleRefund(data.tokenId, data.nftAddress, data.firstAddress, data.roomNum);\r\n                        }}\r\n                      >\r\n                        Refund\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </>\r\n          ) : (\r\n            <Typography color=\"white\" fontSize=\"32px\" textAlign=\"center\">\r\n              You have no waiting Rooms!\r\n            </Typography>\r\n          )}\r\n        </Table>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Refund;","import { useCallback, useEffect } from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loadWaitingDetails } from \"store/slices/getnft-slice\";\r\nimport { AppDispatch } from \"state\";\r\nimport Waiting from \"./components/waiting\";\r\nimport Approve from \"./components/approve\";\r\nimport Refund from \"./components/refund\";\r\n\r\nfunction Admin() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const loadData = useCallback(() => {\r\n    dispatch(\r\n      loadWaitingDetails({\r\n        waitingList: [],\r\n        approvedList: [],\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: \"#111B24\",\r\n      }}\r\n      minHeight=\"100vh\"\r\n    >\r\n      <Waiting />\r\n      <Approve />\r\n      <Refund />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Admin;\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { randomDataStyle } from \"@types\";\r\n\r\nconst Role = () => {\r\n  const randomData: randomDataStyle[] = useSelector<\r\n    IReduxState,\r\n    randomDataStyle[]\r\n  >((state) => state.random.randomData);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        paddingX: \"6px\",\r\n        mt: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n        pb: 1,\r\n      }}\r\n      width=\"100%\"\r\n      height=\"100vh\"\r\n      overflow=\"scroll\"\r\n    >\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          fontSize: { xs: \"24px\", sm: \"30px\" },\r\n          color: \"white\",\r\n          textAlign: \"center\",\r\n          py: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n          mb: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n        }}\r\n      >\r\n        Numbers Rolled\r\n      </Typography>\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        {randomData &&\r\n          randomData.map((data, index) => (\r\n            <Box display=\"flex\" flexDirection=\"column\" key={index}>\r\n              <Typography\r\n                sx={{\r\n                  color: \"white\",\r\n                  fontSize: { xs: \"14px\", sm: \"16px\", md: \"20px\" },\r\n                  lineHeight: \"1.3\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                {data.randomNumber1}\r\n              </Typography>\r\n              <Typography\r\n                sx={{\r\n                  color: \"white\",\r\n                  fontSize: { xs: \"14px\", sm: \"16px\", md: \"20px\" },\r\n                  lineHeight: \"1.3\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                {data.randomNumber2}\r\n              </Typography>\r\n            </Box>\r\n          ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Role;\r\n","import { Box, Skeleton, Typography } from \"@mui/material\";\r\nimport TaskAltIcon from \"@mui/icons-material/TaskAlt\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst FinishedBattle = () => {\r\n  const resultData: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.result.resultData\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        paddingX: \"6px\",\r\n        mt: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n        pb: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n      }}\r\n    >\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          fontSize: { xs: \"24px\", sm: \"30px\" },\r\n          color: \"white\",\r\n          textAlign: \"center\",\r\n          py: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n          mb: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n        }}\r\n      >\r\n        Recent Finished Battles\r\n      </Typography>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n          flexWrap: \"wrap\",\r\n        }}\r\n      >\r\n        {resultData &&\r\n          resultData.map((data, index) => {\r\n            return (\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-start\",\r\n                  mr: { xs: 2, sm: 3 },\r\n                  mb: { xs: 1, sm: 2, md: 3, lg: 4 },\r\n                }}\r\n                key={index}\r\n              >\r\n                <Box\r\n                  sx={{\r\n                    marginRight: {\r\n                      xs: \"6px\",\r\n                      sm: \"8px\",\r\n                      md: \"12px\",\r\n                      xl: \"16px\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <Typography\r\n                    sx={{\r\n                      color: \"white\",\r\n                      fontSize: { xs: \"15px\", sm: \"18px\" },\r\n                      mb: 1,\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    {data.randomNumber1}\r\n                  </Typography>\r\n                  {data.nftUrl1 ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      sx={{ width: { xs: \"120px\", sm: \"160px\", md: \"200px\" } }}\r\n                      src={data.nftUrl1}\r\n                      alt=\"Battle Image\"\r\n                      borderRadius=\"12px\"\r\n                    />\r\n                  ) : (\r\n                    <Skeleton\r\n                      sx={{\r\n                        width: { xs: \"120px\", sm: \"160px\", md: \"200px\" },\r\n                        height: { xs: \"120px\", sm: \"160px\", md: \"200px\" },\r\n                      }}\r\n                    />\r\n                  )}\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      justifyContent:\r\n                        data.randomNumber1 > data.randomNumber2\r\n                          ? \"space-between\"\r\n                          : \"center\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <Typography\r\n                      sx={{\r\n                        color: \"white\",\r\n                        fontSize: { xs: \"15px\", sm: \"18px\" },\r\n                        mt: 1,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      {`${data.address1.slice(0, 4)}...${data.address1.slice(\r\n                        -4\r\n                      )}`}\r\n                    </Typography>\r\n                    {data.randomNumber1 > data.randomNumber2 ? (\r\n                      <TaskAltIcon\r\n                        sx={{\r\n                          color: \"green\",\r\n                          fontSize: { xs: \"21px\", sm: \"24px\" },\r\n                        }}\r\n                      />\r\n                    ) : null}\r\n                  </Box>\r\n                </Box>\r\n                <Box>\r\n                  <Typography\r\n                    sx={{\r\n                      color: \"white\",\r\n                      fontSize: { xs: \"12px\", sm: \"18px\" },\r\n                      mb: 1,\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    {data.randomNumber2}\r\n                  </Typography>\r\n                  {data.nftUrl2 ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      sx={{ width: { xs: \"120px\", sm: \"160px\", md: \"200px\" } }}\r\n                      src={data.nftUrl2}\r\n                      alt=\"Battle Image\"\r\n                      borderRadius=\"12px\"\r\n                    />\r\n                  ) : (\r\n                    <Skeleton\r\n                      sx={{\r\n                        width: { xs: \"120px\", sm: \"160px\", md: \"200px\" },\r\n                        height: { xs: \"120px\", sm: \"160px\", md: \"200px\" },\r\n                      }}\r\n                    />\r\n                  )}\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      justifyContent:\r\n                        data.randomNumber1 < data.randomNumber2\r\n                          ? \"space-between\"\r\n                          : \"center\",\r\n                      alignItems: \"center\",\r\n                      pt: 1,\r\n                    }}\r\n                  >\r\n                    <Typography\r\n                      sx={{\r\n                        color: \"white\",\r\n                        fontSize: { xs: \"12px\", sm: \"18px\" },\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      {`${data.address2.slice(0, 4)}...${data.address2.slice(\r\n                        -4\r\n                      )}`}\r\n                    </Typography>\r\n                    {data.randomNumber1 < data.randomNumber2 ? (\r\n                      <TaskAltIcon\r\n                        sx={{\r\n                          color: \"green\",\r\n                          fontSize: { xs: \"21px\", sm: \"24px\" },\r\n                        }}\r\n                      />\r\n                    ) : null}\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FinishedBattle;\r\n","import {\r\n  Box,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n} from \"@mui/material\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport first from \"assets/images/first.png\";\r\nimport second from \"assets/images/second.png\";\r\nimport third from \"assets/images/third.png\";\r\nimport other from \"assets/images/other.png\";\r\n\r\nconst Winner = () => {\r\n  const winnerData: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.winner.winnerData\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        paddingX: \"6px\",\r\n        pt: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n        pb: 1,\r\n      }}\r\n      height=\"100vh\"\r\n      width=\"100%\"\r\n    >\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          fontSize: { xs: \"24px\", sm: \"30px\" },\r\n          color: \"white\",\r\n          textAlign: \"center\",\r\n          py: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n          mb: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n        }}\r\n      >\r\n        Top 10 Winners\r\n      </Typography>\r\n      <Table>\r\n        <TableBody>\r\n          {winnerData &&\r\n            winnerData.map((data, index) => (\r\n              <TableRow key={index}>\r\n                <TableCell\r\n                  sx={{\r\n                    borderBottom: \"none\",\r\n                    padding: \"0\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  {data.rank === 1 ? (\r\n                    <Box component=\"img\" src={first} width=\"50px\" />\r\n                  ) : data.rank === 2 ? (\r\n                    <Box component=\"img\" src={second} width=\"50px\" />\r\n                  ) : data.rank === 3 ? (\r\n                    <Box component=\"img\" src={third} width=\"50px\" />\r\n                  ) : (\r\n                    <Box component=\"img\" src={other} width=\"50px\" />\r\n                  )}\r\n                </TableCell>\r\n                <TableCell\r\n                  sx={{\r\n                    borderBottom: \"none\",\r\n                    padding: \"0\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Typography\r\n                    sx={{\r\n                      color: \"white\",\r\n                      fontSize: { xs: \"14px\", sm: \"16px\", md: \"20px\" },\r\n                    }}\r\n                  >\r\n                    {`${data.address.slice(0, 4)}...${data.address.slice(-4)}`}\r\n                  </Typography>\r\n                </TableCell>\r\n                <TableCell\r\n                  sx={{\r\n                    borderBottom: \"none\",\r\n                    padding: \"0\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Typography\r\n                    sx={{\r\n                      color: \"white\",\r\n                      fontSize: { xs: \"14px\", sm: \"16px\", md: \"20px\" },\r\n                    }}\r\n                  >\r\n                    {data.winCount} wins\r\n                  </Typography>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Winner;\r\n","import { Box, Skeleton, Typography } from \"@mui/material\";\r\nimport TaskAltIcon from \"@mui/icons-material/TaskAlt\";\r\nimport { IReduxState } from \"store/slices/state.interface\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst MyResult = () => {\r\n  const resultData: any[] = useSelector<IReduxState, any[]>(\r\n    (state) => state.result.myResultData\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        paddingX: \"6px\",\r\n        mt: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n        pb: { xs: 2, sm: 4, md: 6, xl: 8 },\r\n      }}\r\n    >\r\n      <Typography\r\n        fontFamily=\"Audiowide\"\r\n        sx={{\r\n          fontSize: { xs: \"24px\", sm: \"30px\" },\r\n          color: \"white\",\r\n          textAlign: \"center\",\r\n          py: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n          mb: { xs: 1, sm: 2, md: 3, xl: 4 },\r\n        }}\r\n      >\r\n        My Results (Last 20 battles)\r\n      </Typography>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n          flexWrap: \"wrap\",\r\n        }}\r\n      >\r\n        {resultData &&\r\n          resultData.map((data, index) => {\r\n            return (\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-start\",\r\n                  mr: { xs: 2, sm: 3 },\r\n                  mb: { xs: 1, sm: 2, md: 3, lg: 4 },\r\n                }}\r\n                key={index}\r\n              >\r\n                <Box\r\n                  sx={{\r\n                    marginRight: {\r\n                      xs: \"6px\",\r\n                      sm: \"8px\",\r\n                      md: \"12px\",\r\n                      xl: \"16px\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <Typography\r\n                    sx={{\r\n                      color: \"white\",\r\n                      fontSize: { xs: \"15px\", sm: \"18px\" },\r\n                      mb: 1,\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    {data.randomNumber1}\r\n                  </Typography>\r\n                  {data.nftUrl1 ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      sx={{ width: { xs: \"120px\", sm: \"160px\", md: \"200px\" } }}\r\n                      src={data.nftUrl1}\r\n                      alt=\"Battle Image\"\r\n                      borderRadius=\"12px\"\r\n                    />\r\n                  ) : (\r\n                    <Skeleton\r\n                      sx={{\r\n                        width: { xs: \"120px\", sm: \"160px\", md: \"200px\" },\r\n                        height: { xs: \"120px\", sm: \"160px\", md: \"200px\" },\r\n                      }}\r\n                    />\r\n                  )}\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      justifyContent:\r\n                        data.randomNumber1 > data.randomNumber2\r\n                          ? \"space-between\"\r\n                          : \"center\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <Typography\r\n                      sx={{\r\n                        color: \"white\",\r\n                        fontSize: { xs: \"15px\", sm: \"18px\" },\r\n                        mt: 1,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      {`${data.address1.slice(0, 4)}...${data.address1.slice(\r\n                        -4\r\n                      )}`}\r\n                    </Typography>\r\n                    {data.randomNumber1 > data.randomNumber2 ? (\r\n                      <TaskAltIcon\r\n                        sx={{\r\n                          color: \"green\",\r\n                          fontSize: { xs: \"21px\", sm: \"24px\" },\r\n                        }}\r\n                      />\r\n                    ) : null}\r\n                  </Box>\r\n                </Box>\r\n                <Box>\r\n                  <Typography\r\n                    sx={{\r\n                      color: \"white\",\r\n                      fontSize: { xs: \"12px\", sm: \"18px\" },\r\n                      mb: 1,\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    {data.randomNumber2}\r\n                  </Typography>\r\n                  {data.nftUrl2 ? (\r\n                    <Box\r\n                      component=\"img\"\r\n                      sx={{ width: { xs: \"120px\", sm: \"160px\", md: \"200px\" } }}\r\n                      src={data.nftUrl2}\r\n                      alt=\"Battle Image\"\r\n                      borderRadius=\"12px\"\r\n                    />\r\n                  ) : (\r\n                    <Skeleton\r\n                      sx={{\r\n                        width: { xs: \"120px\", sm: \"160px\", md: \"200px\" },\r\n                        height: { xs: \"120px\", sm: \"160px\", md: \"200px\" },\r\n                      }}\r\n                    />\r\n                  )}\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      justifyContent:\r\n                        data.randomNumber1 < data.randomNumber2\r\n                          ? \"space-between\"\r\n                          : \"center\",\r\n                      alignItems: \"center\",\r\n                      pt: 1,\r\n                    }}\r\n                  >\r\n                    <Typography\r\n                      sx={{\r\n                        color: \"white\",\r\n                        fontSize: { xs: \"12px\", sm: \"18px\" },\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      {`${data.address2.slice(0, 4)}...${data.address2.slice(\r\n                        -4\r\n                      )}`}\r\n                    </Typography>\r\n                    {data.randomNumber1 < data.randomNumber2 ? (\r\n                      <TaskAltIcon\r\n                        sx={{\r\n                          color: \"green\",\r\n                          fontSize: { xs: \"21px\", sm: \"24px\" },\r\n                        }}\r\n                      />\r\n                    ) : null}\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyResult;\r\n","import { Box } from \"@mui/material\";\r\nimport Role from \"./Role\";\r\nimport FinishedBattle from \"./FinishedBattle\";\r\nimport Winner from \"./Winner\";\r\nimport MyResult from \"./MyResult\";\r\n\r\nconst Result = () => {\r\n  return (\r\n    <Box minHeight=\"100vh\" sx={{ backgroundColor: \"#111B24\" }}>\r\n      <Box display=\"flex\" justifyContent=\"space-around\">\r\n        <Winner />\r\n        <Role />\r\n      </Box>\r\n      <FinishedBattle />\r\n      <MyResult />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import { createReducer, nanoid } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addPopup,\r\n  PopupContent,\r\n  removePopup,\r\n  updateBlockNumber,\r\n  ApplicationModal,\r\n  setOpenModal,\r\n} from \"./actions\";\r\n\r\ntype PopupList = Array<{\r\n  key: string;\r\n  show: boolean;\r\n  content: PopupContent;\r\n  removeAfterMs: number | null;\r\n}>;\r\n\r\nexport interface ApplicationState {\r\n  readonly blockNumber: { readonly [chainId: number]: number };\r\n  readonly popupList: PopupList;\r\n  readonly openModal: ApplicationModal | null;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  openModal: null,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const { chainId, blockNumber } = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== \"number\") {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(\r\n          blockNumber,\r\n          state.blockNumber[chainId]\r\n        );\r\n      }\r\n    })\r\n    .addCase(setOpenModal, (state, action) => {\r\n      state.openModal = action.payload;\r\n    })\r\n    .addCase(\r\n      addPopup,\r\n      (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\r\n        state.popupList = (\r\n          key\r\n            ? state.popupList.filter((popup) => popup.key !== key)\r\n            : state.popupList\r\n        ).concat([\r\n          {\r\n            key: key || nanoid(),\r\n            show: true,\r\n            content,\r\n            removeAfterMs,\r\n          },\r\n        ]);\r\n      }\r\n    )\r\n    .addCase(removePopup, (state, { payload: { key } }) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    })\r\n);\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// fired once when the app reloads but before the app renders\r\n// allows any updates to be applied to store data loaded from localStorage\r\nexport const updateVersion = createAction<void>('global/updateVersion');\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport interface SerializedToken {\r\n  chainId: number;\r\n  address: string;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n\r\nexport interface SerializedPair {\r\n  token0: SerializedToken;\r\n  token1: SerializedToken;\r\n}\r\n\r\nexport const updateMatchesDarkMode = createAction<{ matchesDarkMode: boolean }>(\r\n  \"user/updateMatchesDarkMode\"\r\n);\r\nexport const updateUserDarkMode = createAction<{ userDarkMode: boolean }>(\r\n  \"user/updateUserDarkMode\"\r\n);\r\nexport const updateUserExpertMode = createAction<{ userExpertMode: boolean }>(\r\n  \"user/updateUserExpertMode\"\r\n);\r\nexport const updateUserSlippageTolerance = createAction<{\r\n  userSlippageTolerance: number;\r\n}>(\"user/updateUserSlippageTolerance\");\r\nexport const updateUserDeadline = createAction<{ userDeadline: number }>(\r\n  \"user/updateUserDeadline\"\r\n);\r\nexport const addSerializedToken = createAction<{\r\n  serializedToken: SerializedToken;\r\n}>(\"user/addSerializedToken\");\r\nexport const removeSerializedToken = createAction<{\r\n  chainId: number;\r\n  address: string;\r\n}>(\"user/removeSerializedToken\");\r\nexport const addSerializedPair = createAction<{\r\n  serializedPair: SerializedPair;\r\n}>(\"user/addSerializedPair\");\r\nexport const removeSerializedPair = createAction<{\r\n  chainId: number;\r\n  tokenAAddress: string;\r\n  tokenBAddress: string;\r\n}>(\"user/removeSerializedPair\");\r\nexport const toggleURLWarning = createAction<void>(\"app/toggleURLWarning\");\r\n","import {\r\n  INITIAL_ALLOWED_SLIPPAGE,\r\n  DEFAULT_DEADLINE_FROM_NOW,\r\n} from \"../../constants\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { updateVersion } from \"../global/actions\";\r\nimport {\r\n  addSerializedPair,\r\n  addSerializedToken,\r\n  removeSerializedPair,\r\n  removeSerializedToken,\r\n  SerializedPair,\r\n  SerializedToken,\r\n  updateMatchesDarkMode,\r\n  updateUserDarkMode,\r\n  updateUserExpertMode,\r\n  updateUserSlippageTolerance,\r\n  updateUserDeadline,\r\n  toggleURLWarning,\r\n} from \"./actions\";\r\n\r\nconst currentTimestamp = () => new Date().getTime();\r\n\r\nexport interface UserState {\r\n  // the timestamp of the last updateVersion action\r\n  lastUpdateVersionTimestamp?: number;\r\n\r\n  userDarkMode: boolean | null; // the user's choice for dark mode or light mode\r\n  matchesDarkMode: boolean; // whether the dark mode media query matches\r\n\r\n  userExpertMode: boolean;\r\n\r\n  // user defined slippage tolerance in bips, used in all txns\r\n  userSlippageTolerance: number;\r\n\r\n  // deadline set by user in minutes, used in all txns\r\n  userDeadline: number;\r\n\r\n  tokens: {\r\n    [chainId: number]: {\r\n      [address: string]: SerializedToken;\r\n    };\r\n  };\r\n\r\n  pairs: {\r\n    [chainId: number]: {\r\n      // keyed by token0Address:token1Address\r\n      [key: string]: SerializedPair;\r\n    };\r\n  };\r\n\r\n  timestamp: number;\r\n  URLWarningVisible: boolean;\r\n}\r\n\r\nfunction pairKey(token0Address: string, token1Address: string) {\r\n  return `${token0Address};${token1Address}`;\r\n}\r\n\r\nexport const initialState: UserState = {\r\n  userDarkMode: true,\r\n  matchesDarkMode: true,\r\n  userExpertMode: false,\r\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\r\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\r\n  tokens: {},\r\n  pairs: {},\r\n  timestamp: currentTimestamp(),\r\n  URLWarningVisible: true,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateVersion, (state) => {\r\n      // slippage isnt being tracked in local storage, reset to default\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof state.userSlippageTolerance !== \"number\") {\r\n        state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE;\r\n      }\r\n\r\n      // deadline isnt being tracked in local storage, reset to default\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof state.userDeadline !== \"number\") {\r\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW;\r\n      }\r\n\r\n      state.lastUpdateVersionTimestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateUserDarkMode, (state, action) => {\r\n      state.userDarkMode = action.payload.userDarkMode;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateMatchesDarkMode, (state, action) => {\r\n      state.matchesDarkMode = action.payload.matchesDarkMode;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateUserExpertMode, (state, action) => {\r\n      state.userExpertMode = action.payload.userExpertMode;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateUserSlippageTolerance, (state, action) => {\r\n      state.userSlippageTolerance = action.payload.userSlippageTolerance;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(updateUserDeadline, (state, action) => {\r\n      state.userDeadline = action.payload.userDeadline;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\r\n      state.tokens[serializedToken.chainId] =\r\n        state.tokens[serializedToken.chainId] || {};\r\n      state.tokens[serializedToken.chainId][serializedToken.address] =\r\n        serializedToken;\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(\r\n      removeSerializedToken,\r\n      (state, { payload: { address, chainId } }) => {\r\n        state.tokens[chainId] = state.tokens[chainId] || {};\r\n        delete state.tokens[chainId][address];\r\n        state.timestamp = currentTimestamp();\r\n      }\r\n    )\r\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\r\n      if (\r\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\r\n        serializedPair.token0.address !== serializedPair.token1.address\r\n      ) {\r\n        const chainId = serializedPair.token0.chainId;\r\n        state.pairs[chainId] = state.pairs[chainId] || {};\r\n        state.pairs[chainId][\r\n          pairKey(serializedPair.token0.address, serializedPair.token1.address)\r\n        ] = serializedPair;\r\n      }\r\n      state.timestamp = currentTimestamp();\r\n    })\r\n    .addCase(\r\n      removeSerializedPair,\r\n      (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\r\n        if (state.pairs[chainId]) {\r\n          // just delete both keys if either exists\r\n          delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)];\r\n          delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)];\r\n        }\r\n        state.timestamp = currentTimestamp();\r\n      }\r\n    )\r\n    .addCase(toggleURLWarning, (state) => {\r\n      state.URLWarningVisible = !state.URLWarningVisible;\r\n    })\r\n);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from \"./actions\";\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n  claim?: { recipient: string };\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(\r\n      addTransaction,\r\n      (\r\n        transactions,\r\n        { payload: { chainId, from, hash, approval, summary, claim } }\r\n      ) => {\r\n        if (transactions[chainId]?.[hash]) {\r\n          throw Error(\"Attempted to add existing transaction.\");\r\n        }\r\n        const txs = transactions[chainId] ?? {};\r\n        txs[hash] = { hash, approval, summary, claim, from, addedTime: now() };\r\n        transactions[chainId] = txs;\r\n      }\r\n    )\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(\r\n      checkedTransaction,\r\n      (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n        const tx = transactions[chainId]?.[hash];\r\n        if (!tx) {\r\n          return;\r\n        }\r\n        if (!tx.lastCheckedBlockNumber) {\r\n          tx.lastCheckedBlockNumber = blockNumber;\r\n        } else {\r\n          tx.lastCheckedBlockNumber = Math.max(\r\n            blockNumber,\r\n            tx.lastCheckedBlockNumber\r\n          );\r\n        }\r\n      }\r\n    )\r\n    .addCase(\r\n      finalizeTransaction,\r\n      (transactions, { payload: { hash, chainId, receipt } }) => {\r\n        const tx = transactions[chainId]?.[hash];\r\n        if (!tx) {\r\n          return;\r\n        }\r\n        tx.receipt = receipt;\r\n        tx.confirmedTime = now();\r\n      }\r\n    )\r\n);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addMulticallListeners,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  removeMulticallListeners,\r\n  toCallKey,\r\n  updateMulticallResults,\r\n} from \"./actions\";\r\n\r\nexport interface MulticallState {\r\n  callListeners?: {\r\n    // on a per-chain basis\r\n    [chainId: number]: {\r\n      // stores for each call key the listeners' preferences\r\n      [callKey: string]: {\r\n        // stores how many listeners there are per each blocks per fetch preference\r\n        [blocksPerFetch: number]: number;\r\n      };\r\n    };\r\n  };\r\n\r\n  callResults: {\r\n    [chainId: number]: {\r\n      [callKey: string]: {\r\n        data?: string | null;\r\n        blockNumber?: number;\r\n        fetchingBlockNumber?: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nconst initialState: MulticallState = {\r\n  callResults: {},\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(\r\n      addMulticallListeners,\r\n      (\r\n        state,\r\n        { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }\r\n      ) => {\r\n        const listeners: MulticallState[\"callListeners\"] = state.callListeners\r\n          ? state.callListeners\r\n          : (state.callListeners = {});\r\n        listeners[chainId] = listeners[chainId] ?? {};\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call);\r\n          listeners[chainId][callKey] = listeners[chainId][callKey] ?? {};\r\n          listeners[chainId][callKey][blocksPerFetch] =\r\n            (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1;\r\n        });\r\n      }\r\n    )\r\n    .addCase(\r\n      removeMulticallListeners,\r\n      (\r\n        state,\r\n        { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }\r\n      ) => {\r\n        const listeners: MulticallState[\"callListeners\"] = state.callListeners\r\n          ? state.callListeners\r\n          : (state.callListeners = {});\r\n\r\n        if (!listeners[chainId]) return;\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call);\r\n          if (!listeners[chainId][callKey]) return;\r\n          if (!listeners[chainId][callKey][blocksPerFetch]) return;\r\n\r\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\r\n            delete listeners[chainId][callKey][blocksPerFetch];\r\n          } else {\r\n            listeners[chainId][callKey][blocksPerFetch]--;\r\n          }\r\n        });\r\n      }\r\n    )\r\n    .addCase(\r\n      fetchingMulticallResults,\r\n      (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\r\n        state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call);\r\n          const current = state.callResults[chainId][callKey];\r\n          if (!current) {\r\n            state.callResults[chainId][callKey] = {\r\n              fetchingBlockNumber,\r\n            };\r\n          } else {\r\n            if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber)\r\n              return;\r\n            state.callResults[chainId][callKey].fetchingBlockNumber =\r\n              fetchingBlockNumber;\r\n          }\r\n        });\r\n      }\r\n    )\r\n    .addCase(\r\n      errorFetchingMulticallResults,\r\n      (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\r\n        state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call);\r\n          const current = state.callResults[chainId][callKey];\r\n          if (!current) return; // only should be dispatched if we are already fetching\r\n          if (current.fetchingBlockNumber === fetchingBlockNumber) {\r\n            delete current.fetchingBlockNumber;\r\n            current.data = null;\r\n            current.blockNumber = fetchingBlockNumber;\r\n          }\r\n        });\r\n      }\r\n    )\r\n    .addCase(\r\n      updateMulticallResults,\r\n      (state, { payload: { chainId, results, blockNumber } }) => {\r\n        state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n        Object.keys(results).forEach((callKey) => {\r\n          const current = state.callResults[chainId][callKey];\r\n          if ((current?.blockNumber ?? 0) > blockNumber) return;\r\n          state.callResults[chainId][callKey] = {\r\n            data: results[callKey],\r\n            blockNumber,\r\n          };\r\n        });\r\n      }\r\n    )\r\n);\r\n","import { setAll } from \"helpers/set-all\";\r\nimport {\r\n  createSlice,\r\n  createSelector,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"state\";\r\nimport TronWeb from \"tronweb\";\r\nimport { SHASTA_TESTNET } from \"constants/addresses\";\r\n\r\ninterface ILoadJackpotDetails {\r\n  account: any;\r\n}\r\n\r\ndeclare var window: any;\r\n\r\nexport const loadJackpotDetails = createAsyncThunk(\r\n  \"jackpot/loadJackpotDetails\",\r\n  async ({ account }: ILoadJackpotDetails) => {\r\n    let meowContract, meowTokenContract;\r\n    if (window) {\r\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n        meowContract = await window.tronWeb\r\n          .contract()\r\n          .at(TronWeb.address.toHex(SHASTA_TESTNET.MEOW_ADDRESS));\r\n        meowTokenContract = await window.tronWeb\r\n          .contract()\r\n          .at(TronWeb.address.toHex(SHASTA_TESTNET.MEOWTOKEN_ADDRESS));\r\n      }\r\n    }\r\n\r\n    const gameprice = (await meowContract.gamePrice().call()).toString();\r\n    const jackpotAmount = (\r\n      (await meowContract.jackpotAmount().call()) / Math.pow(10, 6)\r\n    ).toString();\r\n    const meowCount = (\r\n      await meowTokenContract.balanceOf(account).call()\r\n    ).toString();\r\n    return {\r\n      gameprice,\r\n      jackpotAmount,\r\n      meowCount,\r\n    };\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: true,\r\n};\r\n\r\nexport interface IJackPotSlice {\r\n  gameprice: string;\r\n  jackpotAmount: string;\r\n  loading: boolean;\r\n  meowCount: string;\r\n}\r\n\r\nconst jackpotSlice = createSlice({\r\n  name: \"jackpot\",\r\n  initialState,\r\n  reducers: {\r\n    fetchJackpotSuccess(state, action) {\r\n      setAll(state, action.payload);\r\n      // console.log(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadJackpotDetails.pending, (state, action) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(loadJackpotDetails.fulfilled, (state, action) => {\r\n        setAll(state, action.payload);\r\n        state.loading = false;\r\n      })\r\n      .addCase(loadJackpotDetails.rejected, (state, { error }) => {\r\n        state.loading = false;\r\n      });\r\n  },\r\n});\r\n\r\nconst baseInfo = (state: RootState) => state.jackpot;\r\n\r\nexport default jackpotSlice.reducer;\r\n\r\nexport const getAppState = createSelector(baseInfo, (jackpot) => jackpot);\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { load } from \"redux-localstorage-simple\";\r\n\r\nimport application from \"./application/reducer\";\r\nimport { updateVersion } from \"./global/actions\";\r\nimport user from \"./user/reducer\";\r\nimport transactions from \"./transactions/reducer\";\r\nimport multicall from \"./multicall/reducer\";\r\n\r\nimport appReducer from \"store/slices/game-slice\";\r\nimport fightReducer from \"store/slices/play-slice\";\r\nimport stackReducer from \"store/slices/staking-slice\";\r\nimport nftReducer from \"store/slices/NFt-slice\";\r\nimport nftInfoReducer from \"store/slices/Nftinfo-slice\";\r\nimport walletInfoReducer from \"store/slices/walletInfo-slice\";\r\nimport messagesReducer from \"store/slices/messages-slice\";\r\nimport battleReducer from \"store/slices/battle-slice\";\r\nimport JackpotReducer from \"store/slices/jackpot-slice\";\r\nimport RandomReducer from \"store/slices/random-slice\";\r\nimport ResultReducer from \"store/slices/result-slice\";\r\nimport WinnerReducer from \"store/slices/winner-slice\";\r\nimport WaitingReducer from \"store/slices/getnft-slice\";\r\nimport UserInfoReducer from \"store/slices/userinfo-slice\";\r\n\r\nconst PERSISTED_KEYS: string[] = [\"user\", \"transactions\", \"lists\"];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    user,\r\n    transactions,\r\n    multicall,\r\n    app: appReducer,\r\n    fight: fightReducer,\r\n    stack: stackReducer,\r\n    nft: nftReducer,\r\n    nfts: nftInfoReducer,\r\n    wallet: walletInfoReducer,\r\n    messages: messagesReducer,\r\n    battle: battleReducer,\r\n    jackpot: JackpotReducer,\r\n    random: RandomReducer,\r\n    result: ResultReducer,\r\n    winner: WinnerReducer,\r\n    waiting: WaitingReducer,\r\n    userInfo: UserInfoReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({ serializableCheck: false }),\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nstore.dispatch(updateVersion());\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport Header from \"components/Header\";\r\nimport Home from \"pages/Home\";\r\nimport Stake from \"pages/Stake\";\r\nimport Admin from \"pages/admin\";\r\nimport Result from \"pages/result\";\r\nimport { Provider } from \"react-redux\";\r\nimport store, { AppDispatch } from \"./state\";\r\nimport { loadGameDetails } from \"./store/slices/game-slice\";\r\nimport { loadNftDetails } from \"store/slices/Nftinfo-slice\";\r\nimport { loadJackpotDetails } from \"store/slices/jackpot-slice\";\r\nimport { loadRandomDetails } from \"store/slices/random-slice\";\r\nimport { loadResultDetails } from \"store/slices/result-slice\";\r\nimport { loadWinnerDetails } from \"store/slices/winner-slice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEffect, useCallback } from \"react\";\r\nimport { useWalletModalToggle } from \"state/application/hooks\";\r\nimport { ReactNotifications } from \"react-notifications-component\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\nimport { loadWaitingDetails } from \"store/slices/getnft-slice\";\r\nimport { loadUserInfoDetails } from \"store/slices/userinfo-slice\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { active, account } = useWeb3React();\r\n  const toggleWalletModal = useWalletModalToggle();\r\n\r\n  const loadData = useCallback(() => {\r\n    dispatch(loadGameDetails({ gameData: [] }));\r\n    dispatch(loadRandomDetails({ randomData: [] }));\r\n    dispatch(\r\n      loadResultDetails({\r\n        resultData: [],\r\n        myResultData: [],\r\n        address: account,\r\n      })\r\n    );\r\n    dispatch(loadWinnerDetails({ winnerData: [] }));\r\n    dispatch(\r\n      loadWaitingDetails({\r\n        waitingList: [],\r\n        approvedList: [],\r\n      })\r\n    );\r\n    dispatch(loadNftDetails({ account: account }));\r\n    dispatch(loadJackpotDetails({ account: account }));\r\n    dispatch(loadUserInfoDetails({\r\n      userInfoData: {\r\n        address: account,\r\n        stakeAmount: 0,\r\n        claimAmount: 0,\r\n        ownNfts: []\r\n      }\r\n    }));\r\n  }, [account]);\r\n\r\n  useEffect(() => {\r\n    if (active) {\r\n      loadData();\r\n    }\r\n  }, [active]);\r\n  useEffect(() => {\r\n    if (!active) {\r\n      toggleWalletModal();\r\n    }\r\n  }, [active]);\r\n\r\n  return (\r\n    <>\r\n      <Provider store={store}>\r\n        <ReactNotifications />\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/stake\" component={Stake} />\r\n          <Route exact path=\"/admin\" component={Admin} />\r\n          <Route exact path=\"/result\" component={Result} />\r\n          <Route path=\"*\">\r\n            <Redirect to=\"/\" />\r\n          </Route>\r\n        </Switch>\r\n      </Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import PropTypes from \"prop-types\";\r\nimport { CssBaseline } from \"@mui/material\";\r\nimport {\r\n  ThemeProvider as MUIThemeProvider,\r\n  createTheme,\r\n  StyledEngineProvider,\r\n} from \"@mui/material/styles\";\r\n\r\nThemeProvider.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default function ThemeProvider({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode: \"light\",\r\n      common: {\r\n        black: \"#16151a\",\r\n      },\r\n      primary: {\r\n        light: \"#62ceec\",\r\n        main: \"#6164ff\",\r\n        dark: \"#2847EE\",\r\n      },\r\n      secondary: {\r\n        light: \"#f59b2f\",\r\n        main: \"#ff7523\",\r\n        dark: \"#3f1d3f\",\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <StyledEngineProvider injectFirst>\r\n      <MUIThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        {children}\r\n      </MUIThemeProvider>\r\n    </StyledEngineProvider>\r\n  );\r\n}\r\n","import { Web3Provider } from '@ethersproject/providers';\r\nexport default function getLibrary(provider: any): Web3Provider {\r\n  const library = new Web3Provider(provider);\r\n  library.pollingInterval = 15000;\r\n  return library;\r\n}\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { createWeb3ReactRoot, Web3ReactProvider } from \"@web3-react/core\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport \"assets/styles/index.scss\";\r\nimport App from \"./App\";\r\nimport store from \"./state\";\r\nimport ThemeProvider from \"./theme\";\r\nimport getLibrary from \"./utils/getLibrary\";\r\nimport { NetworkContextName } from \"./constants\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName);\r\n\r\nReactDOM.render(\r\n  <ThemeProvider>\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <Web3ProviderNetwork getLibrary={getLibrary}>\r\n        <Provider store={store}>\r\n          <HashRouter>\r\n            <App />\r\n          </HashRouter>\r\n        </Provider>\r\n      </Web3ProviderNetwork>\r\n    </Web3ReactProvider>\r\n  </ThemeProvider>,\r\n\r\n  document.getElementById(\"root\") as HTMLElement\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}